[
  {
    "objectID": "api/get_genes_for_go_regex.html",
    "href": "api/get_genes_for_go_regex.html",
    "title": "get_genes_for_go_regex",
    "section": "",
    "text": "geneinfo.get_genes_for_go_regex(regex, taxid=9606)\nGet gene information for GO terms matching a regular expression in their description string.\n\n\n\nregex : str\n\nRegular expression to match GO term descriptions.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)\n\n\n\n\n\n\n : pd.DataFrame\n\nColumns: symbol, name, chrom, start, end.",
    "crumbs": [
      "Gene annotation",
      "get_genes_for_go_regex"
    ]
  },
  {
    "objectID": "api/get_genes_for_go_regex.html#parameters",
    "href": "api/get_genes_for_go_regex.html#parameters",
    "title": "get_genes_for_go_regex",
    "section": "",
    "text": "regex : str\n\nRegular expression to match GO term descriptions.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)",
    "crumbs": [
      "Gene annotation",
      "get_genes_for_go_regex"
    ]
  },
  {
    "objectID": "api/get_genes_for_go_regex.html#returns",
    "href": "api/get_genes_for_go_regex.html#returns",
    "title": "get_genes_for_go_regex",
    "section": "",
    "text": ": pd.DataFrame\n\nColumns: symbol, name, chrom, start, end.",
    "crumbs": [
      "Gene annotation",
      "get_genes_for_go_regex"
    ]
  },
  {
    "objectID": "api/go_info.html",
    "href": "api/go_info.html",
    "title": "go_info",
    "section": "",
    "text": "geneinfo.go_info(terms)\nDisplays HML formatted information about the given GO terms.\n\n\n\nterms : Union[str, List[str]]\n\nA GO term or list of GO terms to display information for.",
    "crumbs": [
      "GO information",
      "go_info"
    ]
  },
  {
    "objectID": "api/go_info.html#parameters",
    "href": "api/go_info.html#parameters",
    "title": "go_info",
    "section": "",
    "text": "terms : Union[str, List[str]]\n\nA GO term or list of GO terms to display information for.",
    "crumbs": [
      "GO information",
      "go_info"
    ]
  },
  {
    "objectID": "api/ensembl_id.html",
    "href": "api/ensembl_id.html",
    "title": "ensembl_id",
    "section": "",
    "text": "geneinfo.ensembl_id(name, species='homo_sapiens')\nGet ENSEMBL ID for some gene identifier\n\n\n\nname : str\n\nGene identifier\n\nspecies : optional = 'homo_sapiens'\n\nSpecies, by default ‘homo_sapiens’\n\n\n\n\n\n\n : str\n\nENSEMBL ID\n\n\n\n\n\n\n: [](~geneinfo.NotFound)\n\nRaises exception if no ENSEMBL ID can be found.",
    "crumbs": [
      "ID conversion",
      "ensembl_id"
    ]
  },
  {
    "objectID": "api/ensembl_id.html#parameters",
    "href": "api/ensembl_id.html#parameters",
    "title": "ensembl_id",
    "section": "",
    "text": "name : str\n\nGene identifier\n\nspecies : optional = 'homo_sapiens'\n\nSpecies, by default ‘homo_sapiens’",
    "crumbs": [
      "ID conversion",
      "ensembl_id"
    ]
  },
  {
    "objectID": "api/ensembl_id.html#returns",
    "href": "api/ensembl_id.html#returns",
    "title": "ensembl_id",
    "section": "",
    "text": ": str\n\nENSEMBL ID",
    "crumbs": [
      "ID conversion",
      "ensembl_id"
    ]
  },
  {
    "objectID": "api/ensembl_id.html#raises",
    "href": "api/ensembl_id.html#raises",
    "title": "ensembl_id",
    "section": "",
    "text": ": [](~geneinfo.NotFound)\n\nRaises exception if no ENSEMBL ID can be found.",
    "crumbs": [
      "ID conversion",
      "ensembl_id"
    ]
  },
  {
    "objectID": "api/get_go_terms_for_genes.html",
    "href": "api/get_go_terms_for_genes.html",
    "title": "get_go_terms_for_genes",
    "section": "",
    "text": "geneinfo.get_go_terms_for_genes(genes, taxid=9606, evidence=None)\nGet the union of GO terms for a list of genes.\n\n\n\ngenes : str\n\ndescription\n\ntaxid : int = 9606\n\ndescription, by default 9606\n\nevidence : list = None\n\ndescription, by default None\n\n\n\n\n\n\n : list\n\nGo terms for the specified genes.",
    "crumbs": [
      "GO information",
      "get_go_terms_for_genes"
    ]
  },
  {
    "objectID": "api/get_go_terms_for_genes.html#parameters",
    "href": "api/get_go_terms_for_genes.html#parameters",
    "title": "get_go_terms_for_genes",
    "section": "",
    "text": "genes : str\n\ndescription\n\ntaxid : int = 9606\n\ndescription, by default 9606\n\nevidence : list = None\n\ndescription, by default None",
    "crumbs": [
      "GO information",
      "get_go_terms_for_genes"
    ]
  },
  {
    "objectID": "api/get_go_terms_for_genes.html#returns",
    "href": "api/get_go_terms_for_genes.html#returns",
    "title": "get_go_terms_for_genes",
    "section": "",
    "text": ": list\n\nGo terms for the specified genes.",
    "crumbs": [
      "GO information",
      "get_go_terms_for_genes"
    ]
  },
  {
    "objectID": "api/email.html",
    "href": "api/email.html",
    "title": "email",
    "section": "",
    "text": "geneinfo.email(email_address)\nRegisters your email address for Entrez queries. Thay way, NCBI will contect you before closeing your connection if you are making too many queries.\n\n\n\nemail_address : str\n\nyour email address",
    "crumbs": [
      "Utilities",
      "email"
    ]
  },
  {
    "objectID": "api/email.html#parameters",
    "href": "api/email.html#parameters",
    "title": "email",
    "section": "",
    "text": "email_address : str\n\nyour email address",
    "crumbs": [
      "Utilities",
      "email"
    ]
  },
  {
    "objectID": "api/index.html",
    "href": "api/index.html",
    "title": "Function reference",
    "section": "",
    "text": "These functions retrieve information summaries, for named genes or genes in a defined genomic range, and displays it as rendered Markdown in the output cell.\n\n\n\ngene_info\nDisplays HTML formatted information about one or more genes.\n\n\ngene_info_region\nDisplays HTML formatted information about genes in a chromosomal region.\n\n\n\n\n\n\nThese functions display information graphically together with each either gene structures in a genomic region (gene_plot) or chromosomal ideograms (chrom_ideogram).\n\n\n\ngene_plot\nPlots gene ideograms for a chromosomal region and returns axes for\n\n\nchrom_ideogram\nPlots an ideogram of the human chromosomes with annotations.\n\n\n\n\n\n\nThese functions retrieve coordinates of genes in a chromosomal region.\n\n\n\nget_genes_region\nGets gene structure information for genes in a chromosomal region.\n\n\nget_genes_region_dataframe\nGets gene structure information for genes in a chromosomal region in the form\n\n\n\n\n\n\nThese functions converts between NCBI, ENSEMBL and HGCN gene identifiers.\n\n\n\nensembl_id\nGet ENSEMBL ID for some gene identifier\n\n\nhgcn_symbol\nGet HGCN gene symbol for some gene identifier\n\n\nensembl2symbol\nConverts ENSEMBL ID to gene HGCN gene symbol\n\n\nensembl2ncbi\nConverts ENSEMBL ID to gene NCBI ID\n\n\n\n\n\n\nThese functions retrieve and display STRING network information.\n\n\n\nstring_network_table\nRetrieves STRING network for a list of genes and returns it as a pandas.DataFrame.\n\n\nshow_string_network\nDisplay STRING network for a list of genes.\n\n\n\n\n\n\nThese functions retrieve gene ontology information.\n\n\n\ngo_info\nDisplays HML formatted information about the given GO terms.\n\n\ngo_term2name\nConverts a GO term to its name.\n\n\ngo_name2term\nConverts a GO term name to its term.\n\n\nget_go_terms_for_genes\nGet the union of GO terms for a list of genes.\n\n\nget_terms_for_go_regex\nGet GO terms for terms matching a regular expression in their description string.\n\n\ngo_annotation_table\nGO annotations for a given taxonomy id as a pandas.DataFrame.\n\n\n\n\n\n\nThese functions allow gene ontology enrichment analyses.\n\n\n\ngo_enrichment\nRuns a GO enrichment analysis.\n\n\nshow_go_evidence_codes\nDisplay list of GO evidence categories and their codes.\n\n\nsymbols_protein_coding\nList of protein coding gene symbols for a given taxonomy id.\n\n\ndownload_data\n\n\n\n\n\n\n\nThese functions display directed graphs representing sets of connected GO terms.\n\n\n\nshow_go_dag_for_gene\nDisplays GO graph for a given gene.\n\n\nshow_go_dag_for_terms\nDisplay GO graph for a list of GO terms.\n\n\nshow_go_dag_enrichment_results\nDisplays a GO enrichment analysis results.\n\n\n\n\n\n\nThese functions retrieves genes based on their GO annotation.\n\n\n\nget_genes_for_go_regex\nGet gene information for GO terms matching a regular expression in their description string.\n\n\nget_genes_for_go_terms\nGet gene information for genes with specified GO terms.\n\n\ngene_annotation_table\nGene annotations for a given taxonomy id as a pandas.DataFrame.\n\n\n\n\n\n\nThese are utility functions to record your email in queries and to tabulate genes.\n\n\n\nemail\nRegisters your email address for Entrez queries. Thay way, NCBI will contect you\n\n\ntabulate_genes",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#gene-information",
    "href": "api/index.html#gene-information",
    "title": "Function reference",
    "section": "",
    "text": "These functions retrieve information summaries, for named genes or genes in a defined genomic range, and displays it as rendered Markdown in the output cell.\n\n\n\ngene_info\nDisplays HTML formatted information about one or more genes.\n\n\ngene_info_region\nDisplays HTML formatted information about genes in a chromosomal region.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#gene-plots",
    "href": "api/index.html#gene-plots",
    "title": "Function reference",
    "section": "",
    "text": "These functions display information graphically together with each either gene structures in a genomic region (gene_plot) or chromosomal ideograms (chrom_ideogram).\n\n\n\ngene_plot\nPlots gene ideograms for a chromosomal region and returns axes for\n\n\nchrom_ideogram\nPlots an ideogram of the human chromosomes with annotations.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#gene-coordinates",
    "href": "api/index.html#gene-coordinates",
    "title": "Function reference",
    "section": "",
    "text": "These functions retrieve coordinates of genes in a chromosomal region.\n\n\n\nget_genes_region\nGets gene structure information for genes in a chromosomal region.\n\n\nget_genes_region_dataframe\nGets gene structure information for genes in a chromosomal region in the form",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#id-conversion",
    "href": "api/index.html#id-conversion",
    "title": "Function reference",
    "section": "",
    "text": "These functions converts between NCBI, ENSEMBL and HGCN gene identifiers.\n\n\n\nensembl_id\nGet ENSEMBL ID for some gene identifier\n\n\nhgcn_symbol\nGet HGCN gene symbol for some gene identifier\n\n\nensembl2symbol\nConverts ENSEMBL ID to gene HGCN gene symbol\n\n\nensembl2ncbi\nConverts ENSEMBL ID to gene NCBI ID",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#string-networks",
    "href": "api/index.html#string-networks",
    "title": "Function reference",
    "section": "",
    "text": "These functions retrieve and display STRING network information.\n\n\n\nstring_network_table\nRetrieves STRING network for a list of genes and returns it as a pandas.DataFrame.\n\n\nshow_string_network\nDisplay STRING network for a list of genes.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#go-information",
    "href": "api/index.html#go-information",
    "title": "Function reference",
    "section": "",
    "text": "These functions retrieve gene ontology information.\n\n\n\ngo_info\nDisplays HML formatted information about the given GO terms.\n\n\ngo_term2name\nConverts a GO term to its name.\n\n\ngo_name2term\nConverts a GO term name to its term.\n\n\nget_go_terms_for_genes\nGet the union of GO terms for a list of genes.\n\n\nget_terms_for_go_regex\nGet GO terms for terms matching a regular expression in their description string.\n\n\ngo_annotation_table\nGO annotations for a given taxonomy id as a pandas.DataFrame.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#go-enrichment",
    "href": "api/index.html#go-enrichment",
    "title": "Function reference",
    "section": "",
    "text": "These functions allow gene ontology enrichment analyses.\n\n\n\ngo_enrichment\nRuns a GO enrichment analysis.\n\n\nshow_go_evidence_codes\nDisplay list of GO evidence categories and their codes.\n\n\nsymbols_protein_coding\nList of protein coding gene symbols for a given taxonomy id.\n\n\ndownload_data",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#go-graphs",
    "href": "api/index.html#go-graphs",
    "title": "Function reference",
    "section": "",
    "text": "These functions display directed graphs representing sets of connected GO terms.\n\n\n\nshow_go_dag_for_gene\nDisplays GO graph for a given gene.\n\n\nshow_go_dag_for_terms\nDisplay GO graph for a list of GO terms.\n\n\nshow_go_dag_enrichment_results\nDisplays a GO enrichment analysis results.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#gene-annotation",
    "href": "api/index.html#gene-annotation",
    "title": "Function reference",
    "section": "",
    "text": "These functions retrieves genes based on their GO annotation.\n\n\n\nget_genes_for_go_regex\nGet gene information for GO terms matching a regular expression in their description string.\n\n\nget_genes_for_go_terms\nGet gene information for genes with specified GO terms.\n\n\ngene_annotation_table\nGene annotations for a given taxonomy id as a pandas.DataFrame.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#utilities",
    "href": "api/index.html#utilities",
    "title": "Function reference",
    "section": "",
    "text": "These are utility functions to record your email in queries and to tabulate genes.\n\n\n\nemail\nRegisters your email address for Entrez queries. Thay way, NCBI will contect you\n\n\ntabulate_genes",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/go_enrichment.html",
    "href": "api/go_enrichment.html",
    "title": "go_enrichment",
    "section": "",
    "text": "geneinfo.go_enrichment(\n    gene_list\n    taxid=9606\n    background_chrom=None\n    background_genes=None\n    terms=None\n    list_study_genes=False\n    alpha=0.05\n)\nRuns a GO enrichment analysis.\n\n\n\ngene_list : list\n\nList of gene symbols or NCBI gene ids.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human\n\nbackground_chrom : str = None\n\nName of chromosome, by default None. Limits analysis to this named chromosome\n\nbackground_genes : list = None\n\nList of genes for use as background in GO enrichment analysis, by default None\n\nterms : list = None\n\nList of GO terms for use as background in GO enrichment analysis, by default None\n\nlist_study_genes : list = False\n\nWhether to include lists of genes responsible for enrichment for each identified GO term, by default False\n\nalpha : float = 0.05\n\nFalse discovery significance cut-off, by default 0.05\n\n\n\n\n\n\n : pd.DataFrame\n\npd.DataFrame with columns: - namespace: (BP, MF, CC) - term_id: GO term - e/p: enrichment or depletion - pval_uncorr: uncorrected p-value - p_fdr_bh: Benjamini-Hochberg corrected p-value - ratio: ratio of study genes in GO term - bg_ratio: ratio of background genes in GO term - obj: GOEnrichmentRecord object\n\n\n\n\n\ngene_list = ['TP53', 'BRCA1', 'BRCA2', 'EGFR', 'KRAS', 'PTEN', 'CDH1', 'ATM', 'CHEK2', 'PALB2']\nresults = go_enrichment(gene_list, taxid=9606, alpha=0.05)\nshow_go_dag_enrichment_results(results.obj)",
    "crumbs": [
      "GO enrichment",
      "go_enrichment"
    ]
  },
  {
    "objectID": "api/go_enrichment.html#parameters",
    "href": "api/go_enrichment.html#parameters",
    "title": "go_enrichment",
    "section": "",
    "text": "gene_list : list\n\nList of gene symbols or NCBI gene ids.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human\n\nbackground_chrom : str = None\n\nName of chromosome, by default None. Limits analysis to this named chromosome\n\nbackground_genes : list = None\n\nList of genes for use as background in GO enrichment analysis, by default None\n\nterms : list = None\n\nList of GO terms for use as background in GO enrichment analysis, by default None\n\nlist_study_genes : list = False\n\nWhether to include lists of genes responsible for enrichment for each identified GO term, by default False\n\nalpha : float = 0.05\n\nFalse discovery significance cut-off, by default 0.05",
    "crumbs": [
      "GO enrichment",
      "go_enrichment"
    ]
  },
  {
    "objectID": "api/go_enrichment.html#returns",
    "href": "api/go_enrichment.html#returns",
    "title": "go_enrichment",
    "section": "",
    "text": ": pd.DataFrame\n\npd.DataFrame with columns: - namespace: (BP, MF, CC) - term_id: GO term - e/p: enrichment or depletion - pval_uncorr: uncorrected p-value - p_fdr_bh: Benjamini-Hochberg corrected p-value - ratio: ratio of study genes in GO term - bg_ratio: ratio of background genes in GO term - obj: GOEnrichmentRecord object",
    "crumbs": [
      "GO enrichment",
      "go_enrichment"
    ]
  },
  {
    "objectID": "api/go_enrichment.html#examples",
    "href": "api/go_enrichment.html#examples",
    "title": "go_enrichment",
    "section": "",
    "text": "gene_list = ['TP53', 'BRCA1', 'BRCA2', 'EGFR', 'KRAS', 'PTEN', 'CDH1', 'ATM', 'CHEK2', 'PALB2']\nresults = go_enrichment(gene_list, taxid=9606, alpha=0.05)\nshow_go_dag_enrichment_results(results.obj)",
    "crumbs": [
      "GO enrichment",
      "go_enrichment"
    ]
  },
  {
    "objectID": "api/show_string_network.html",
    "href": "api/show_string_network.html",
    "title": "show_string_network",
    "section": "",
    "text": "geneinfo.show_string_network(my_genes, nodes=10)\nDisplay STRING network for a list of genes.\n\n\n\nmy_genes : list\n\nList of gene symbols\n\nnodes : int = 10\n\nNumber of nodes to show, by default 10",
    "crumbs": [
      "STRING networks",
      "show_string_network"
    ]
  },
  {
    "objectID": "api/show_string_network.html#parameters",
    "href": "api/show_string_network.html#parameters",
    "title": "show_string_network",
    "section": "",
    "text": "my_genes : list\n\nList of gene symbols\n\nnodes : int = 10\n\nNumber of nodes to show, by default 10",
    "crumbs": [
      "STRING networks",
      "show_string_network"
    ]
  },
  {
    "objectID": "api/string_network_table.html",
    "href": "api/string_network_table.html",
    "title": "string_network_table",
    "section": "",
    "text": "geneinfo.string_network_table(my_genes, nodes=10)\nRetrieves STRING network for a list of genes and returns it as a pandas.DataFrame.\n\n\n\nmy_genes : list\n\nList of gene symbols\n\nnodes : int = 10\n\nNumber of nodes to show, by default 10\n\n\n\n\n\n\n : pd.DataFrame\n\nSTRING network information for specified genes.",
    "crumbs": [
      "STRING networks",
      "string_network_table"
    ]
  },
  {
    "objectID": "api/string_network_table.html#parameters",
    "href": "api/string_network_table.html#parameters",
    "title": "string_network_table",
    "section": "",
    "text": "my_genes : list\n\nList of gene symbols\n\nnodes : int = 10\n\nNumber of nodes to show, by default 10",
    "crumbs": [
      "STRING networks",
      "string_network_table"
    ]
  },
  {
    "objectID": "api/string_network_table.html#returns",
    "href": "api/string_network_table.html#returns",
    "title": "string_network_table",
    "section": "",
    "text": ": pd.DataFrame\n\nSTRING network information for specified genes.",
    "crumbs": [
      "STRING networks",
      "string_network_table"
    ]
  },
  {
    "objectID": "api/gene_annotation_table.html",
    "href": "api/gene_annotation_table.html",
    "title": "gene_annotation_table",
    "section": "",
    "text": "geneinfo.gene_annotation_table(taxid=9606)\nGene annotations for a given taxonomy id as a pandas.DataFrame.\n\n\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human\n\n\n\n\n\n\n : pd.DataFrame\n\nGene annotations for the specified taxonomy id.",
    "crumbs": [
      "Gene annotation",
      "gene_annotation_table"
    ]
  },
  {
    "objectID": "api/gene_annotation_table.html#parameters",
    "href": "api/gene_annotation_table.html#parameters",
    "title": "gene_annotation_table",
    "section": "",
    "text": "taxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human",
    "crumbs": [
      "Gene annotation",
      "gene_annotation_table"
    ]
  },
  {
    "objectID": "api/gene_annotation_table.html#returns",
    "href": "api/gene_annotation_table.html#returns",
    "title": "gene_annotation_table",
    "section": "",
    "text": ": pd.DataFrame\n\nGene annotations for the specified taxonomy id.",
    "crumbs": [
      "Gene annotation",
      "gene_annotation_table"
    ]
  },
  {
    "objectID": "api/tabulate_genes.html",
    "href": "api/tabulate_genes.html",
    "title": "tabulate_genes",
    "section": "",
    "text": "tabulate_genes\ngeneinfo.tabulate_genes(words, ncols=None)",
    "crumbs": [
      "Utilities",
      "tabulate_genes"
    ]
  },
  {
    "objectID": "api/show_go_dag_enrichment_results.html",
    "href": "api/show_go_dag_enrichment_results.html",
    "title": "show_go_dag_enrichment_results",
    "section": "",
    "text": "geneinfo.show_go_dag_enrichment_results(results)\nDisplays a GO enrichment analysis results.\n\n\n\nresults : Union[List[GOEnrichmentRecord], pd.Series]\n\nList or Series of GO result objejcts from obj column in the pd.DataFrame returned by go_enrichment().\n\n\n\n\n\ngene_list = ['TP53', 'BRCA1', 'BRCA2', 'EGFR', 'KRAS', 'PTEN', 'CDH1', 'ATM', 'CHEK2', 'PALB2']\nresults = go_enrichment(gene_list, taxid=9606, alpha=0.05)\nshow_go_dag_enrichment_results(results.obj)",
    "crumbs": [
      "GO graphs",
      "show_go_dag_enrichment_results"
    ]
  },
  {
    "objectID": "api/show_go_dag_enrichment_results.html#parameters",
    "href": "api/show_go_dag_enrichment_results.html#parameters",
    "title": "show_go_dag_enrichment_results",
    "section": "",
    "text": "results : Union[List[GOEnrichmentRecord], pd.Series]\n\nList or Series of GO result objejcts from obj column in the pd.DataFrame returned by go_enrichment().",
    "crumbs": [
      "GO graphs",
      "show_go_dag_enrichment_results"
    ]
  },
  {
    "objectID": "api/show_go_dag_enrichment_results.html#examples",
    "href": "api/show_go_dag_enrichment_results.html#examples",
    "title": "show_go_dag_enrichment_results",
    "section": "",
    "text": "gene_list = ['TP53', 'BRCA1', 'BRCA2', 'EGFR', 'KRAS', 'PTEN', 'CDH1', 'ATM', 'CHEK2', 'PALB2']\nresults = go_enrichment(gene_list, taxid=9606, alpha=0.05)\nshow_go_dag_enrichment_results(results.obj)",
    "crumbs": [
      "GO graphs",
      "show_go_dag_enrichment_results"
    ]
  },
  {
    "objectID": "api/get_genes_for_go_terms.html",
    "href": "api/get_genes_for_go_terms.html",
    "title": "get_genes_for_go_terms",
    "section": "",
    "text": "geneinfo.get_genes_for_go_terms(terms, taxid=9606)\nGet gene information for genes with specified GO terms.\n\n\n\nterms : \n\nList of GO terms\n\ntaxid :  = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)\n\n\n\n\n\n\n : pd.DataFrame\n\nColumns: symbol, name, chrom, start, end.",
    "crumbs": [
      "Gene annotation",
      "get_genes_for_go_terms"
    ]
  },
  {
    "objectID": "api/get_genes_for_go_terms.html#parameters",
    "href": "api/get_genes_for_go_terms.html#parameters",
    "title": "get_genes_for_go_terms",
    "section": "",
    "text": "terms : \n\nList of GO terms\n\ntaxid :  = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)",
    "crumbs": [
      "Gene annotation",
      "get_genes_for_go_terms"
    ]
  },
  {
    "objectID": "api/get_genes_for_go_terms.html#returns",
    "href": "api/get_genes_for_go_terms.html#returns",
    "title": "get_genes_for_go_terms",
    "section": "",
    "text": ": pd.DataFrame\n\nColumns: symbol, name, chrom, start, end.",
    "crumbs": [
      "Gene annotation",
      "get_genes_for_go_terms"
    ]
  },
  {
    "objectID": "api/get_genes_region.html",
    "href": "api/get_genes_region.html",
    "title": "get_genes_region",
    "section": "",
    "text": "geneinfo.get_genes_region(\n    chrom\n    window_start\n    window_end\n    assembly='GRCh38'\n    db='ncbiRefSeq'\n)\nGets gene structure information for genes in a chromosomal region.\n\n\n\nchrom : str\n\nChromosome identifier\n\nwindow_start : int\n\nStart of region\n\nwindow_end : int\n\nEnd of region (end base not included)\n\nassembly : str = 'GRCh38'\n\nGenome assembly, by default ‘GRCh38’\n\ndb : str = 'ncbiRefSeq'\n\nDatabase, by default ‘ncbiRefSeq’\n\n\n\n\n\n\n : list\n\nList of gene information. Each gene is a tuple with the following elements: - gene name - gene start - gene end - gene strand - list of exons (start, end)",
    "crumbs": [
      "Gene coordinates",
      "get_genes_region"
    ]
  },
  {
    "objectID": "api/get_genes_region.html#parameters",
    "href": "api/get_genes_region.html#parameters",
    "title": "get_genes_region",
    "section": "",
    "text": "chrom : str\n\nChromosome identifier\n\nwindow_start : int\n\nStart of region\n\nwindow_end : int\n\nEnd of region (end base not included)\n\nassembly : str = 'GRCh38'\n\nGenome assembly, by default ‘GRCh38’\n\ndb : str = 'ncbiRefSeq'\n\nDatabase, by default ‘ncbiRefSeq’",
    "crumbs": [
      "Gene coordinates",
      "get_genes_region"
    ]
  },
  {
    "objectID": "api/get_genes_region.html#returns",
    "href": "api/get_genes_region.html#returns",
    "title": "get_genes_region",
    "section": "",
    "text": ": list\n\nList of gene information. Each gene is a tuple with the following elements: - gene name - gene start - gene end - gene strand - list of exons (start, end)",
    "crumbs": [
      "Gene coordinates",
      "get_genes_region"
    ]
  },
  {
    "objectID": "api/show_go_evidence_codes.html",
    "href": "api/show_go_evidence_codes.html",
    "title": "show_go_evidence_codes",
    "section": "",
    "text": "show_go_evidence_codes\ngeneinfo.show_go_evidence_codes()\nDisplay list of GO evidence categories and their codes.",
    "crumbs": [
      "GO enrichment",
      "show_go_evidence_codes"
    ]
  },
  {
    "objectID": "api/download_data.html",
    "href": "api/download_data.html",
    "title": "download_data",
    "section": "",
    "text": "download_data\ngeneinfo.download_data(prt=sys.stdout)",
    "crumbs": [
      "GO enrichment",
      "download_data"
    ]
  },
  {
    "objectID": "pages/getting_started.html",
    "href": "pages/getting_started.html",
    "title": "Overview",
    "section": "",
    "text": "geneinfo lets you …\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "pages/getting_started.html#installation",
    "href": "pages/getting_started.html#installation",
    "title": "Overview",
    "section": "Installation",
    "text": "Installation\nconda install -c conda-forge -c munch-group geneinfo",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "pages/getting_started.html#basic-use",
    "href": "pages/getting_started.html#basic-use",
    "title": "Overview",
    "section": "Basic use",
    "text": "Basic use\nProin sodales neque erat, varius cursus diam tincidunt sit amet. Etiam scelerisque fringilla nisl eu venenatis. Donec sem ipsum, scelerisque ac venenatis quis, hendrerit vel mauris. Praesent semper erat sit amet purus condimentum, sit amet auctor mi feugiat. In hac habitasse platea dictumst. Nunc ac mauris in massa feugiat bibendum id in dui. Praesent accumsan urna at lacinia aliquet. Proin ultricies eu est quis pellentesque. In vel lorem at nisl rhoncus cursus eu quis mi. In eu rutrum ante, quis placerat justo. Etiam euismod nibh nibh, sed elementum nunc imperdiet in. Praesent gravida nunc vel odio lacinia, at tempus nisl placerat. Aenean id ipsum sed est sagittis hendrerit non in tortor.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "pages/getting_started.html#some-use-case",
    "href": "pages/getting_started.html#some-use-case",
    "title": "Overview",
    "section": "Some use case",
    "text": "Some use case\nThe foo function does … geneinfo.gene_info does … gene_info does …\nNullam dapibus cursus dolor sit amet consequat. Nulla facilisi. Curabitur vel nulla non magna lacinia tincidunt. Duis porttitor quam leo, et blandit velit efficitur ut. Etiam auctor tincidunt porttitor. Phasellus sed accumsan mi. Fusce ut erat dui. Suspendisse eu augue eget turpis condimentum finibus eu non lorem. Donec finibus eros eu ante condimentum, sed pharetra sapien sagittis. Phasellus non dolor ac ante mollis auctor nec et sapien. Pellentesque vulputate at nisi eu tincidunt. Vestibulum at dolor aliquam, hendrerit purus eu, eleifend massa. Morbi consectetur eros id tincidunt gravida. Fusce ut enim quis orci hendrerit lacinia sed vitae enim.\ngene_info(\"ALG13\")",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "pages/getting_started.html#learning-more",
    "href": "pages/getting_started.html#learning-more",
    "title": "Overview",
    "section": "Learning more",
    "text": "Learning more\nGo to the anvanced page to learn how to …\n\nExamples page: sites using quartodoc.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "pages/examples.html",
    "href": "pages/examples.html",
    "title": "Example use",
    "section": "",
    "text": "import sys, os\nimport re\nfrom collections import defaultdict\nimport numpy as np\nimport pandas as pd\nimport pickle\n\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\nset_matplotlib_formats('retina', 'png')\nfrom matplotlib.patches import Rectangle, Polygon\nimport seaborn as sns\nsns.set_style('white')\n\nimport geneinfo as gi\ngi.email('your@email.com')\n\n#%run -i build_cache.py\nIn-house uliity for accessing gene lists in google spreadsheet:\nfrom math import sqrt\nfrom itertools import zip_longest\n\ndef list_genes(words, ncols=None):\n    n = len(words)\n    col_width = max(map(len, words)) + 1\n    if ncols is None:\n        ncols = max(100//col_width, 1+sqrt(n/col_width))\n    nrows = int(n/ncols) + 1\n    rows = []\n    for r in range(0, n, nrows):\n        rows.append(words[r:r+nrows])\n    for row in list(zip_longest(*rows, fillvalue='')):\n        line = []\n        for gene in row:\n            line.append(gene.ljust(col_width))\n        print(''.join(line))\n\ndef read_google_sheet():\n    SHEET_ID = '1JSjSLuto3jqdEnnG7JqzeC_1pUZw76n7XueVAYrUOpk'\n    SHEET_NAME = 'Sheet1'\n    url = f'https://docs.google.com/spreadsheets/d/{SHEET_ID}/gviz/tq?tqx=out:csv&sheet={SHEET_NAME}'\n    df = pd.read_csv(url, header=1, low_memory=False)\n    return df.loc[:, [not x.startswith('Unnamed') for x in df.columns]]\n    \ndef gene_list_names():\n    df = read_google_sheet()\n    return sorted(df.columns.tolist())\n\ndef gene_list(name):\n    df = read_google_sheet()\n    sr = df[name]\n    return sr[~sr.isnull()]\n# from pkg_resources import resource_filename\n# with open(resource_filename('geneinfo', 'data/gene_lists.pickle'), 'rb') as f:\n#     gene_lists = pickle.load(f)\n    \n# def gene_list_names():\n#     return sorted(gene_lists.keys())\n\n# def gene_list(name):\n#     return gene_lists[name].tolist()\ngene_list_names()        \n\n['accel_reg_simiiformes_br',\n 'all_npx',\n 'all_post_mei_expr',\n 'ari_all',\n 'ari_nonPUR',\n 'ari_relate_AFR',\n 'ari_relate_ASIA',\n 'ari_relate_EUR',\n 'ari_relate_PUR',\n 'cDEG',\n 'candidates',\n 'ech75_regions',\n 'ech90_regions',\n 'expr_mod_xi_copynr_fibrobl',\n 'expr_mod_xi_copynr_lcl',\n 'gametologs',\n 'hpa_brain_prot',\n 'intel_seiz_lang',\n 'intelect_disabil',\n 'intersection(nDEG, matos_neuron)',\n 'matos_common',\n 'matos_common_no_xy_gametologs',\n 'matos_neuron',\n 'meritxell_spermatid_expr',\n 'msci',\n 'msci_esc',\n 'mult_copy',\n 'my_primate_codeml',\n 'nDEG',\n 'neuron_genome_proteome',\n 'neuron_npx_proteome',\n 'primate_ampl_multi',\n 'reg_sa_pheno',\n 'sfari_all_conf',\n 'union(H,matos_common)',\n 'xi',\n 'xi_any_evidence',\n 'xi_escape',\n 'xi_uncertain']\nxi_escape = gene_list('xi_escape')\nlist_genes(xi_escape)\n\nAFF2    CDK16   EFNB1   GPR173  IKBKG   MAMLD1  OFD1    PPP2R3B SEPTIN6 TCEAL9  XG      \nAKAP17A CDR1    EIF1AX  GPR174  IL3RA   MAP7D2  P2RY10  PQBP1   SLC25A6 TCEANC  XIST    \nALG13   CHM     EIF2S3  GTPBP6  IQSEC2  MED14   P2RY8   PRKX    SMC1A   TRAPPC2 XPNPEP2 \nAP1S2   COX7B   FGF13   GYG2    JPX     MSL3    PDZD11  PUDP    SRPX    TXLNG   ZBED1   \nARSD    CXorf38 FHL1    HCFC1   KDM5C   MXRA5   PHKA1   RAB9A   STK26   UBA1    ZFX     \nASMTL   CXorf65 FOXO4   HEPH    KDM6A   NAA10   PLCXD1  RBBP7   STS     UBQLN2  ZRSR2   \nCA5B    DDX3X   FUNDC1  HMGN5   LRCH2   NHS     PNPLA4  RPS4X   SYAP1   USP9X           \nCD99    DHRSX   GEMIN8  HUWE1   MAGEE1  NHSL2   PORCN   SCML2   TASL    WAS\nLeft align in pandas tables:\nclass left:\n    def __rlshift__(self, df):\n        \"Left align columns of data frame: df &lt;&lt; left()\"\n        left_aligned_df = df.style.set_properties(**{'text-align': 'left'})\n        left_aligned_df = left_aligned_df.set_table_styles(\n        [dict(selector = 'th', props=[('text-align', 'left')])])\n        display(left_aligned_df)\n        \ndf = pd.DataFrame(dict(name=['A', 'B'], desc=['bla bla bla bla', 'bla']))\ndf\n\n\n\n\n\n\n\n\nname\ndesc\n\n\n\n\n0\nA\nbla bla bla bla\n\n\n1\nB\nbla\ndf &lt;&lt; left()\n\n\n\n\n\n\n \nname\ndesc\n\n\n\n\n0\nA\nbla bla bla bla\n\n\n1\nB\nbla\n%%html\n&lt;style&gt; table { font-variant-numeric: tabular-nums; } &lt;/style&gt;",
    "crumbs": [
      "Examples",
      "Example use"
    ]
  },
  {
    "objectID": "pages/examples.html#summary-gene-information",
    "href": "pages/examples.html#summary-gene-information",
    "title": "Example use",
    "section": "Summary gene information",
    "text": "Summary gene information\nUsing gene symbol:\n\ngi.gene_info('USP4')\n\nSymbol: USP4 (protein-coding)         Aliases: UNP, Unph\nubiquitin specific peptidase 4\nSummary: The protein encoded by this gene is a protease that deubiquitinates target proteins such as ADORA2A and TRIM21. The encoded protein shuttles between the nucleus and cytoplasm and is involved in maintaining operational fidelity in the endoplasmic reticulum. Three transcript variants encoding different isoforms have been found for this gene. [provided by RefSeq, Oct 2011].\nGenomic position: 3:49277144-49340712 (hg38), 3:49315264-49378145 (hg19)\nGene card\n\n\n\nUsing NCBI ID:\n\ngi.gene_info(7157)\n\nSymbol: TP53 (protein-coding)         Aliases: BCC7, BMFS5, LFS1, P53, TRP53\ntumor protein p53\nSummary: This gene encodes a tumor suppressor protein containing transcriptional activation, DNA binding, and oligomerization domains. The encoded protein responds to diverse cellular stresses to regulate expression of target genes, thereby inducing cell cycle arrest, apoptosis, senescence, DNA repair, or changes in metabolism. Mutations in this gene are associated with a variety of human cancers, including hereditary cancers such as Li-Fraumeni syndrome. Alternative splicing of this gene and the use of alternate promoters result in multiple transcript variants and isoforms. Additional isoforms have also been shown to result from the use of alternate translation initiation codons from identical transcript variants (PMIDs: 12032546, 20937277). [provided by RefSeq, Dec 2016].\nGenomic position: 17:7661779-7687546 (hg38), 17:7565097-7590856 (hg19)\nGene card\n\n\n\nFor a a list of genes:\n\ngi.gene_info(['LARS2', 'XCR1'])\n\nSymbol: LARS2 (protein-coding)         Aliases: HLASA, LEURS, PRLTS4, mtLeuRS\nleucyl-tRNA synthetase 2, mitochondrial\nSummary: This gene encodes a class 1 aminoacyl-tRNA synthetase, mitochondrial leucyl-tRNA synthetase. Each of the twenty aminoacyl-tRNA synthetases catalyzes the aminoacylation of a specific tRNA or tRNA isoaccepting family with the cognate amino acid. [provided by RefSeq, Jul 2008].\nGenomic position: 3:45388561-45554726 (hg38), 3:45429998-45590913 (hg19)\nGene card\n\n\n\nSymbol: XCR1 (protein-coding)         Aliases: CCXCR1, GPR5\nX-C motif chemokine receptor 1\nSummary: The protein encoded by this gene is a chemokine receptor belonging to the G protein-coupled receptor superfamily. The family members are characterized by the presence of 7 transmembrane domains. The encoded protein transduces a signal by increasing the intracellular calcium ion level. The viral macrophage inflammatory protein-II is an antagonist of this receptor and blocks signaling. Some studies have implicated a cluster of genes at 3p21.31, including this gene, as associated with COVID-19 risk. The encoded protein may also play a role in cell proliferation and migration in several types of cancer. [provided by RefSeq, Jan 2023].\nGenomic position: 3:46016990-46085825 (hg38), 3:46058516-46069234 (hg19)\nGene card\n\n\n\nFor genes a region:\n\ngi.gene_info_region('chrX', 76500000, 77000000, assembly='hg19')\n\nSymbol: FGF16 (protein-coding)         Aliases: FGF-16, MF4\nfibroblast growth factor 16\nSummary: This gene encodes a member of a family of proteins that are involved in a variety of biological processes, including embryonic development, cell growth, morphogenesis, tissue repair, tumor growth and invasion. This gene is expressed in cardiac cells and is required for proper heart development. Mutation in this gene was also observed in individuals with metacarpal 4-5 fusion. [provided by RefSeq, Mar 2014].\nGene card\n\n\n\nSymbol: ATRX (protein-coding)         Aliases: JMS, MRX52, RAD54, RAD54L, XH2, XNP, ZNF-HX\nATRX chromatin remodeler\nSummary: The protein encoded by this gene contains an ATPase/helicase domain, and thus it belongs to the SWI/SNF family of chromatin remodeling proteins. This protein is found to undergo cell cycle-dependent phosphorylation, which regulates its nuclear matrix and chromatin association, and suggests its involvement in the gene regulation at interphase and chromosomal segregation in mitosis. Mutations in this gene are associated with X-linked syndromes exhibiting cognitive disabilities as well as alpha-thalassemia (ATRX) syndrome. These mutations have been shown to cause diverse changes in the pattern of DNA methylation, which may provide a link between chromatin remodeling, DNA methylation, and gene expression in developmental processes. Multiple alternatively spliced transcript variants encoding distinct isoforms have been reported. [provided by RefSeq, Jul 2017].\nGenomic position: X:77504880-77786233 (hg38), HG1426_PATCH:76765832-77047170, X:76760356-77041702 (hg19)\nGene card\n\n\n\nSymbol: ATRX (protein-coding)         Aliases: JMS, MRX52, RAD54, RAD54L, XH2, XNP, ZNF-HX\nATRX chromatin remodeler\nSummary: The protein encoded by this gene contains an ATPase/helicase domain, and thus it belongs to the SWI/SNF family of chromatin remodeling proteins. This protein is found to undergo cell cycle-dependent phosphorylation, which regulates its nuclear matrix and chromatin association, and suggests its involvement in the gene regulation at interphase and chromosomal segregation in mitosis. Mutations in this gene are associated with X-linked syndromes exhibiting cognitive disabilities as well as alpha-thalassemia (ATRX) syndrome. These mutations have been shown to cause diverse changes in the pattern of DNA methylation, which may provide a link between chromatin remodeling, DNA methylation, and gene expression in developmental processes. Multiple alternatively spliced transcript variants encoding distinct isoforms have been reported. [provided by RefSeq, Jul 2017].\nGenomic position: X:77504880-77786233 (hg38), HG1426_PATCH:76765832-77047170, X:76760356-77041702 (hg19)\nGene card\n\n\n\nFor species other than human:\n\ngi.gene_info('DYNLT3', species='mouse', scopes=['mgi'])\n\nSymbol: Dynlt3 (protein-coding)         Aliases: 2310075M16Rik, Tcte1l\ndynein light chain Tctex-type 3\nGene card",
    "crumbs": [
      "Examples",
      "Example use"
    ]
  },
  {
    "objectID": "pages/examples.html#get-the-hgcn-symbol-for-an-alias",
    "href": "pages/examples.html#get-the-hgcn-symbol-for-an-alias",
    "title": "Example use",
    "section": "Get the HGCN symbol for an alias",
    "text": "Get the HGCN symbol for an alias\n\ngi.hgcn_symbol(['CXorf23', 'BCLAF3'])\n\n['BCLAF3', 'BCLAF3']",
    "crumbs": [
      "Examples",
      "Example use"
    ]
  },
  {
    "objectID": "pages/examples.html#get-coordinates-for-genes-in-a-region",
    "href": "pages/examples.html#get-coordinates-for-genes-in-a-region",
    "title": "Example use",
    "section": "Get coordinates for genes in a region",
    "text": "Get coordinates for genes in a region\n\ngi.get_genes_region('chrX', 76500000, 77000000, assembly='hg19')\n\n[('FGF16',\n  76709642,\n  76712769,\n  '+',\n  [(76709642, 76709751), (76711767, 76712769)]),\n ('ATRX',\n  76760357,\n  77041702,\n  '-',\n  [(76760357, 76764107),\n   (76776265, 76776394),\n   (76776880, 76776976),\n   (76777740, 76777866),\n   (76778729, 76778879),\n   (76812921, 76813116),\n   (76814139, 76814317),\n   (76829714, 76829823),\n   (76845303, 76845410),\n   (76849165, 76849319),\n   (76854879, 76855049),\n   (76855200, 76855289),\n   (76855902, 76856033),\n   (76872080, 76872198),\n   (76874273, 76874449),\n   (76875862, 76876000),\n   (76888694, 76888872),\n   (76889053, 76889200),\n   (76890084, 76890194),\n   (76891405, 76891547),\n   (76907603, 76907843),\n   (76909587, 76909690),\n   (76912049, 76912143),\n   (76918870, 76919047),\n   (76920133, 76920267),\n   (76931720, 76931793),\n   (76937011, 76940085),\n   (76940430, 76940498),\n   (76944310, 76944420),\n   (76949312, 76949426),\n   (76952064, 76952192),\n   (76953070, 76953123),\n   (76954061, 76954117),\n   (76972607, 76972720),\n   (77041467, 77041702)]),\n ('ATRX',\n  76760357,\n  77041702,\n  '-',\n  [(76760357, 76764107),\n   (76776265, 76776394),\n   (76776880, 76776976),\n   (76777740, 76777866),\n   (76778729, 76778879),\n   (76812921, 76813116),\n   (76814139, 76814317),\n   (76829714, 76829823),\n   (76845303, 76845410),\n   (76849165, 76849319),\n   (76854879, 76855049),\n   (76855200, 76855289),\n   (76855902, 76856033),\n   (76872080, 76872198),\n   (76874273, 76874449),\n   (76875862, 76876000),\n   (76888694, 76888872),\n   (76889053, 76889200),\n   (76890084, 76890194),\n   (76891405, 76891547),\n   (76907603, 76907843),\n   (76909587, 76909690),\n   (76912049, 76912143),\n   (76918870, 76919047),\n   (76920133, 76920267),\n   (76931720, 76931793),\n   (76937011, 76940085),\n   (76940430, 76940498),\n   (76944310, 76944420),\n   (76952064, 76952192),\n   (76953070, 76953123),\n   (76954061, 76954117),\n   (76972607, 76972720),\n   (77041467, 77041702)])]",
    "crumbs": [
      "Examples",
      "Example use"
    ]
  },
  {
    "objectID": "pages/examples.html#plot-data-over-gene-annotation",
    "href": "pages/examples.html#plot-data-over-gene-annotation",
    "title": "Example use",
    "section": "Plot data over gene annotation",
    "text": "Plot data over gene annotation\n\n# x = np.linspace(1, 1520300000, 100000)\n# y = np.random.random(100000)\n# dummy manhattan data\nx = np.linspace(76500000, 77500000, 10000)\nrng = np.random.default_rng()\ny = rng.exponential(scale=1, size=x.size)\n\nStandard plot:\n\nax = gi.gene_plot('chrX', 76500000, 77500000, 'hg38')\nax.scatter(x, y, s=2)\nplt.tight_layout()\n\n\n\n\n\n\n\n\nSame on older hg19 assembly:\n\nax = gi.gene_plot('chrX', 76500000, 77500000, assembly='hg19')\nax.scatter(x, y, s=2)\nplt.tight_layout()\n\n\n\n\n\n\n\n\nTwo subplots for data:\n\nax1, ax2 = gi.gene_plot('chrX', 76500000, 77500000, assembly='hg38', return_axes=2)\nax1.scatter(x, y, s=2)\nax2.scatter(x, y, s=2)\nplt.tight_layout()\n\n\n\n\n\n\n\n\nThree subplots for data and adjusted aspect ratio:\n\nax1, ax2, ax3 = gi.gene_plot('chrX', 76500000, 77500000, assembly='hg38', return_axes=3, aspect=0.5)\nax1.scatter(x, y, s=2)\nax2.scatter(x, y, s=2)\nax3.scatter(x, y, s=2)\nplt.tight_layout()\n\n\n\n\n\n\n\n\nHighlight a list of genes:\n\nax = gi.gene_plot('chrX', 76500000, 77500000, 'hg19', highlight=['ATRX', 'ATP7A'])\nax.scatter(x, y, s=2)\nsns.despine(ax=ax) # make it look nicer\nplt.tight_layout()\n\n\n\n\n\n\n\n\nCombinatorial hightlighting:\nCombining text weight, style, color and bbox:\n\nhighlight = defaultdict(dict)\nfor gene in ['ATRX', 'COX7B', 'PGK1']:\n    highlight[gene].update(dict(weight='bold'))\nfor gene in ['MAGT1']:\n    highlight[gene].update(dict(style='italic'))\nfor gene in ['ATP7A', 'ATRX']:\n    highlight[gene].update(dict(color='red'))\nfor gene in ['PGK1', 'ATRX']:\n    highlight[gene].update(dict(bbox=dict(edgecolor='black', facecolor='none', linewidth=0.2)))\n\n\nax = gi.gene_plot('chrX', 76500000, 77500000, 'hg19', highlight=highlight)\nax.scatter(x, y, s=2)\nsns.despine(ax=ax) # make it look nicer\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nhighlight = defaultdict(dict)\nfor gene in gene_list('xi_any_evidence'):\n    highlight[gene].update(dict(weight='bold'))\nfor gene in gene_list('ech75_regions'):\n    highlight[gene].update(dict(style='italic'))\nfor gene in gene_list('sfari_all_conf') + gene_list('intelect_disabil'):\n    highlight[gene].update(dict(color='red'))\nfor gene in gene_list('gametologs') +  gene_list('mult_copy') + gene_list('xi_escape') + gene_list('cDEG') + gene_list('nDEG'):\n    highlight[gene].update(dict(bbox=dict(edgecolor='black', facecolor='none', linewidth=0.2)))\n\n\nax = gi.gene_plot('chrX', 76500000, 77500000, 'hg19', highlight=highlight)\n\nax.scatter(x, y, s=2)\nsns.despine(ax=ax) # make it look nicer\nplt.tight_layout()\n\n\n\n\n\n\n\n\nLarger with colors:\n\nax = gi.gene_plot('chrX', 76500000, 77500000, 'hg19', highlight=highlight, figsize=(10, 4))\n\nax.scatter(x, y, s=2, c=y, cmap='viridis_r')\nsns.despine(ax=ax) # make it look nicer\nplt.tight_layout()\n\n\n\n\n\n\n\n\nOther features:\n\nax = gi.gene_plot('chrX', 76500000, 77500000, assembly='hg19',\n                  figsize=(10, 4),          # larger figure\n                  collapse_splice_var=False, # show all splice variants separately\n                  exact_exons=False,        # allow exons to be wide enough to be visible on large plots\n                  hard_limits=True,          # truncate genes that overlap the borders of the specified range\n                 )\n\nax.scatter(x, y, s=2)\nsns.despine(ax=ax) # make it look nicer\nplt.tight_layout()",
    "crumbs": [
      "Examples",
      "Example use"
    ]
  },
  {
    "objectID": "pages/examples.html#show-string-interaction-network",
    "href": "pages/examples.html#show-string-interaction-network",
    "title": "Example use",
    "section": "Show STRING interaction network",
    "text": "Show STRING interaction network\n\ngi.show_string_network(['ATRX', 'TP53', 'RAD51'], nodes=10)",
    "crumbs": [
      "Examples",
      "Example use"
    ]
  },
  {
    "objectID": "pages/examples.html#chromosome-ideogram",
    "href": "pages/examples.html#chromosome-ideogram",
    "title": "Example use",
    "section": "Chromosome ideogram",
    "text": "Chromosome ideogram\n\n# import importlib\n# import geneinfo\n# importlib.reload(geneinfo)\n\n\nannotation = [\n    ('chr1', 50000000, 50001000),                          # segment color defaults to red\n    ('chr2', 10000000, 1000000, 'green'),                  # with segment color\n    ('chr3', 45000000, 55000000, 'blue', 'NAME'),          # with name label\n    ('chr6', 10000000, 15000000, 'magenta', None, 0, 0.5), # with base and height\n    ('chr6', 10000000, 15000000, 'pink', None, 0.5, 0.5),  # with base and height\n]\n\ngi.chrom_ideogram(annotation)\n\n\n\n\n\n\n\n\nTo make sure segments are visible on the plot, the default minimal size of plotteed segments are 200000. This can be changed like this (notice how the chr1 segment is no longer visible):\n\ngi.chrom_ideogram(annotation, min_visible_width=1)\n\n\n\n\n\n\n\n\nOther assembly, figure dimentions:\n\ngi.chrom_ideogram(annotation, assembly='hg19', figsize=(4, 8))\n\n\n\n\n\n\n\n\nYou can add position markers along a chromosome like this to better see the location of some segments:\n\nchrom = 'chr3'\nstart = 100000000\nend = 200000000\nwidth = 10000000\nannotation2 = annotation + [(chrom, x[0], x[1], 'black', str(x[2]/width)) for x in zip(\n    range(start, end, width), \n    range(start+1, end, width), \n    range(start, end, width)\n)]\ngi.chrom_ideogram(annotation2)",
    "crumbs": [
      "Examples",
      "Example use"
    ]
  },
  {
    "objectID": "pages/examples.html#gene-ontology-information",
    "href": "pages/examples.html#gene-ontology-information",
    "title": "Example use",
    "section": "Gene ontology information",
    "text": "Gene ontology information\nNB: The first time you use the GO utilities, it will spend a very long time downloading data. If you do not want to wait that out in the notebook, you can execute this command in the folder where you store your notebooks:\nconda run -n &lt;environment&gt; python -c 'import geneinfo ; geneinfo.download_data()'\nGet info for one or more GO terms:\n\ngi.go_info('GO:0000776')\n\nGO:0000776: kinetochore\nA multisubunit complex that is located at the centromeric region of DNA and provides an attachment point for the spindle microtubules.\n\n\n\n\ngi.go_info(['GO:0000776', 'GO:0005634'])\n\nGO:0000776: kinetochore\nA multisubunit complex that is located at the centromeric region of DNA and provides an attachment point for the spindle microtubules.\n\n\n\nGO:0005634: nucleus\nA membrane-bounded organelle of eukaryotic cells in which chromosomes are housed and replicated. In most cells, the nucleus contains all of the cell’s chromosomes except the organellar chromosomes, and is the site of RNA synthesis and processing. In some species, or in specialized cell types, RNA metabolism or DNA replication may be absent.\n\n\n\nGet GO terms for a one or more genes:\n\ngo_terms = gi.get_go_terms_for_genes(['DYNLT3'])\ngo_terms[:10]\n\n['GO:0000776',\n 'GO:0005515',\n 'GO:0005634',\n 'GO:0005737',\n 'GO:0005868',\n 'GO:0007018',\n 'GO:0007346',\n 'GO:0042802',\n 'GO:0045505',\n 'GO:0045931']\n\n\nDescriptions for GO terms for one or more genes:\n\ngi.go_info(gi.get_go_terms_for_genes(['DYNLT3']))\n\nGO:0000776: kinetochore\nA multisubunit complex that is located at the centromeric region of DNA and provides an attachment point for the spindle microtubules.\n\n\n\nGO:0005515: protein binding\nBinding to a protein.\n\n\n\nGO:0005634: nucleus\nA membrane-bounded organelle of eukaryotic cells in which chromosomes are housed and replicated. In most cells, the nucleus contains all of the cell’s chromosomes except the organellar chromosomes, and is the site of RNA synthesis and processing. In some species, or in specialized cell types, RNA metabolism or DNA replication may be absent.\n\n\n\nGO:0005737: cytoplasm\nThe contents of a cell excluding the plasma membrane and nucleus, but including other subcellular structures.\n\n\n\nGO:0005868: cytoplasmic dynein complex\nAny dynein complex with a homodimeric dynein heavy chain core that catalyzes movement along a microtubule. Cytoplasmic dynein complexes participate in many cytoplasmic transport activities in eukaryotes, such as mRNA localization, intermediate filament transport, nuclear envelope breakdown, apoptosis, transport of centrosomal proteins, mitotic spindle assembly, virus transport, kinetochore functions, and movement of signaling and spindle checkpoint proteins. Some complexes participate in intraflagellar transport. Subunits associated with the dynein heavy chain mediate association between dynein heavy chain and cargoes, and may include light chains and light intermediate chains.\n\n\n\nGO:0007018: microtubule-based movement\nA microtubule-based process that results in the movement of organelles, other microtubules, or other cellular components. Examples include motor-driven movement along microtubules and movement driven by polymerization or depolymerization of microtubules.\n\n\n\nGO:0007346: regulation of mitotic cell cycle\nAny process that modulates the rate or extent of progress through the mitotic cell cycle.\n\n\n\nGO:0042802: identical protein binding\nBinding to an identical protein or proteins.\n\n\n\nGO:0045505: dynein intermediate chain binding\nBinding to an intermediate chain of the dynein complex.\n\n\n\nGO:0045931: positive regulation of mitotic cell cycle\nAny process that activates or increases the rate or extent of progression through the mitotic cell cycle.\n\n\n\nGO:0051301: cell division\nThe process resulting in division and partitioning of components of a cell to form more cells; may or may not be accompanied by the physical separation of a cell into distinct, individually membrane-bounded daughter cells.\n\n\n\nGO:0061673: mitotic spindle astral microtubule\nAny of the mitotic spindle microtubules that radiate in all directions from the spindle poles and are thought to contribute to the forces that separate the poles and position them in relation to the rest of the cell.",
    "crumbs": [
      "Examples",
      "Example use"
    ]
  },
  {
    "objectID": "pages/examples.html#go-graphs",
    "href": "pages/examples.html#go-graphs",
    "title": "Example use",
    "section": "GO graphs",
    "text": "GO graphs\nShow the sub-graph for a list of GO terms:\n\nimport geneinfo\nimport importlib\nimportlib.reload(geneinfo)\n#geneinfo.go_info('GO:0000776')\ngeneinfo.show_go_dag_for_terms(go_terms)\n\n\n\n\n\n\n\n\n\ngi.show_go_dag_for_terms(go_terms)\n\n\n\n\n\n\n\n\nShow the sub-graph for the GO terms of a single gene:\n\ngi.show_go_dag_for_gene('DYNLT3')\n\n\n\n\n\n\n\n\nSame but using GO annotation backed by certain kinds of evidence:\n\ngi.show_go_dag_for_gene('DYNLT3', evidence=['IDA', 'EXP', 'HTP'])\n\n\n\n\n\n\n\n\nShow the categories of evidence backing GO annotations:\n\ngi.show_go_evidence_codes()\n\nExperimental evidence codes:  Inferred from Experiment (EXP)  Inferred from Direct Assay (IDA)  Inferred from Physical Interaction (IPI)  Inferred from Mutant Phenotype (IMP)  Inferred from Genetic Interaction (IGI)  Inferred from Expression Pattern (IEP)  Inferred from High Throughput Experiment (HTP)  Inferred from High Throughput Direct Assay (HDA)  Inferred from High Throughput Mutant Phenotype (HMP)  Inferred from High Throughput Genetic Interaction (HGI)  Inferred from High Throughput Expression Pattern (HEP)\nPhylogenetically-inferred annotations:  Inferred from Biological aspect of Ancestor (IBA)  Inferred from Biological aspect of Descendant (IBD)  Inferred from Key Residues (IKR)  Inferred from Rapid Divergence (IRD)\nComputational analysis evidence codes  Inferred from Sequence or structural Similarity (ISS)  Inferred from Sequence Orthology (ISO)  Inferred from Sequence Alignment (ISA)  Inferred from Sequence Model (ISM)  Inferred from Genomic Context (IGC)  Inferred from Reviewed Computational Analysis (RCA)\nAuthor statement evidence codes:  Traceable Author Statement (TAS)  Non-traceable Author Statement (NAS)\nCurator statement evidence codes:  Inferred by Curator (IC)  No biological Data available (ND)\nElectronic annotation evidence code:  Inferred from Electronic Annotation (IEA)",
    "crumbs": [
      "Examples",
      "Example use"
    ]
  },
  {
    "objectID": "pages/examples.html#find-genes-based-on-go-info",
    "href": "pages/examples.html#find-genes-based-on-go-info",
    "title": "Example use",
    "section": "Find genes based on GO info",
    "text": "Find genes based on GO info\nFind genes matching a regular expression in any associated GO term description:\n\nmotor_genes_df = gi.get_genes_for_go_regex('kinesin|dynein')\nmotor_genes_df.head() &lt;&lt; left()\n\ngeneinfo_cache/go-basic.obo: fmt(1.2) rel(2024-09-08) 44,296 Terms; optional_attrs(comment def relationship synonym xref)\ngeneinfo_cache/go-basic.obo: fmt(1.2) rel(2024-09-08) 44,296 Terms; optional_attrs(comment def relationship synonym xref)\n\n\n\n\n\n\n\n \nsymbol\nname\nchrom\nstart\nend\n\n\n\n\n0\nSPAG1\nsperm associated antigen 1\n8\n100158037\n100241903\n\n\n1\nBLOC1S2\nbiogenesis of lysosomal organelles complex 1 subunit 2\n10\n100286679\n100273277\n\n\n2\nLZTS2\nleucine zipper tumor suppressor 2\n10\n100996587\n101007832\n\n\n3\nDYNC1H1\ndynein cytoplasmic 1 heavy chain 1\n14\n101964572\n102056442\n\n\n4\nKIF1B\nkinesin family member 1B\n1\n10210569\n10381602",
    "crumbs": [
      "Examples",
      "Example use"
    ]
  },
  {
    "objectID": "pages/examples.html#global-go-enrichment",
    "href": "pages/examples.html#global-go-enrichment",
    "title": "Example use",
    "section": "Global GO enrichment",
    "text": "Global GO enrichment\nEnrichment against all GO terms with all protein coding genes as background:\n\nimport importlib\nimport geneinfo\nimportlib.reload(geneinfo)\n\n&lt;module 'geneinfo' from '/Users/kmt/geneinfo/geneinfo/__init__.py'&gt;\n\n\n\ngo_results = gi.go_enrichment(motor_genes_df.symbol)\ngo_results.head(10)\n\nCould not map gene symbol \"KIF28P\" to ncbi id\n\n\n\n\n\n\n\n\n\nnamespace\nterm_id\ne/p\npval_uncorr\np_fdr_bh\nratio\nbg_ratio\nobj\n\n\n\n\n0\nCC\nGO:0005874\ne\n3.174662e-104\n5.793757e-101\n0.296407\n0.014664\n&lt;GO:0005874&gt;\n\n\n1\nBP\nGO:0007018\ne\n3.469444e-87\n4.220231e-83\n0.152695\n0.002719\n&lt;GO:0007018&gt;\n\n\n2\nCC\nGO:0005871\ne\n1.323152e-82\n1.207376e-79\n0.134731\n0.002185\n&lt;GO:0005871&gt;\n\n\n3\nMF\nGO:0008017\ne\n2.849730e-80\n1.305176e-76\n0.239521\n0.012819\n&lt;GO:0008017&gt;\n\n\n4\nCC\nGO:0005813\ne\n1.960675e-77\n1.192744e-74\n0.314371\n0.030444\n&lt;GO:0005813&gt;\n\n\n5\nMF\nGO:0019894\ne\n4.661206e-77\n1.067416e-73\n0.125749\n0.002039\n&lt;GO:0019894&gt;\n\n\n6\nCC\nGO:0032391\ne\n3.269844e-75\n1.491866e-72\n0.122754\n0.001991\n&lt;GO:0032391&gt;\n\n\n7\nMF\nGO:0003777\ne\n5.259928e-70\n8.030157e-67\n0.125749\n0.002331\n&lt;GO:0003777&gt;\n\n\n8\nMF\nGO:0045505\ne\n7.657838e-68\n8.768225e-65\n0.110778\n0.001797\n&lt;GO:0045505&gt;\n\n\n9\nCC\nGO:0016235\ne\n3.632820e-64\n1.325979e-61\n0.104790\n0.001699\n&lt;GO:0016235&gt;\n\n\n\n\n\n\n\nShow GO DAG for enrichment results:\n\ngi.show_go_dag_enrichment_results(go_results.obj)\n\n\n\n\n\n\n\n\nSame but only for top 10 GO terms:\n\ngi.show_go_dag_enrichment_results(go_results.obj[:10])\n\n\n\n\n\n\n\n\nDescriptions of the same 10 GO terms:\n\ngi.go_info(go_results.term_id[:10])\n\nGO:0005874: microtubule\nAny of the long, generally straight, hollow tubes of internal diameter 12-15 nm and external diameter 24 nm found in a wide variety of eukaryotic cells; each consists (usually) of 13 protofilaments of polymeric tubulin, staggered in such a manner that the tubulin monomers are arranged in a helical pattern on the microtubular surface, and with the alpha/beta axes of the tubulin subunits parallel to the long axis of the tubule; exist in equilibrium with pool of tubulin monomers and can be rapidly assembled or disassembled in response to physiological stimuli; concerned with force generation, e.g. in the spindle.\n\n\n\nGO:0007018: microtubule-based movement\nA microtubule-based process that results in the movement of organelles, other microtubules, or other cellular components. Examples include motor-driven movement along microtubules and movement driven by polymerization or depolymerization of microtubules.\n\n\n\nGO:0005871: kinesin complex\nAny complex that includes a dimer of molecules from the kinesin superfamily, a group of related proteins that contain an extended region of predicted alpha-helical coiled coil in the main chain that likely produces dimerization. The native complexes of several kinesin family members have also been shown to contain additional peptides, often designated light chains as all of the noncatalytic subunits that are currently known are smaller than the chain that contains the motor unit. Kinesin complexes generally possess a force-generating enzymatic activity, or motor, which converts the free energy of the gamma phosphate bond of ATP into mechanical work.\n\n\n\nGO:0008017: microtubule binding\nBinding to a microtubule, a filament composed of tubulin monomers.\n\n\n\nGO:0005813: centrosome\nA structure comprised of a core structure (in most organisms, a pair of centrioles) and peripheral material from which a microtubule-based structure, such as a spindle apparatus, is organized. Centrosomes occur close to the nucleus during interphase in many eukaryotic cells, though in animal cells it changes continually during the cell-division cycle.\n\n\n\nGO:0019894: kinesin binding\nInteracting selectively and non-covalently and stoichiometrically with kinesin, a member of a superfamily of microtubule-based motor proteins that perform force-generating tasks such as organelle transport and chromosome segregation.\n\n\n\nGO:0032391: photoreceptor connecting cilium\nThe portion of the photoreceptor cell cilium linking the photoreceptor inner and outer segments. It’s considered to be equivalent to the ciliary transition zone.\n\n\n\nGO:0003777: microtubule motor activity\nA motor activity that generates movement along a microtubule, driven by ATP hydrolysis.\n\n\n\nGO:0045505: dynein intermediate chain binding\nBinding to an intermediate chain of the dynein complex.\n\n\n\nGO:0016235: aggresome\nAn inclusion body formed by dynein-dependent retrograde transport of an aggregated protein on microtubules.\n\n\n\nShow the GO DAG for a set of GO terms and their parent terms:\n\ngi.show_go_dag_for_terms(go_results.term_id[:10])\n\n\n\n\n\n\n\n\nSpecifying a custom set of background genes:\nThe query genes should be a subset of the background genes:\n\nall_protein_coding = set(pd.read_csv('geneinfo_cache/9606_protein_genes.txt', sep='\\t').Symbol)\n# only the first 50 genes:\nsubset_background = list(all_protein_coding)[:50] + motor_genes_df.symbol.tolist()\n\n\ngo_results = gi.go_enrichment(motor_genes_df.symbol, background_genes=subset_background)\ngo_results\n\nCould not map gene symbol \"KIF28P\" to ncbi id\nCould not map gene symbol \"KIF28P\" to ncbi id\n\n\n\n\n\n\n\n\n\nnamespace\nterm_id\ne/p\npval_uncorr\np_fdr_bh\nratio\nbg_ratio\nobj\n\n\n\n\n0\nCC\nGO:0005813\ne\n8.279747e-07\n0.000378\n0.314371\n0.276042\n&lt;GO:0005813&gt;\n\n\n1\nCC\nGO:0005874\ne\n2.975553e-06\n0.000678\n0.296407\n0.260417\n&lt;GO:0005874&gt;\n\n\n2\nCC\nGO:0005737\ne\n2.878076e-05\n0.004375\n0.538922\n0.497396\n&lt;GO:0005737&gt;\n\n\n3\nMF\nGO:0000981\np\n9.358545e-05\n0.018951\n0.011976\n0.028646\n&lt;GO:0000981&gt;\n\n\n4\nMF\nGO:0008017\ne\n6.502644e-05\n0.018951\n0.239521\n0.210938\n&lt;GO:0008017&gt;\n\n\n5\nCC\nGO:0005929\ne\n3.614207e-04\n0.032962\n0.164671\n0.143229\n&lt;GO:0005929&gt;\n\n\n6\nCC\nGO:0036064\ne\n3.598807e-04\n0.032962\n0.167665\n0.145833\n&lt;GO:0036064&gt;\n\n\n7\nCC\nGO:0005930\ne\n6.152330e-04\n0.046758\n0.155689\n0.135417\n&lt;GO:0005930&gt;\n\n\n8\nCC\nGO:0005829\ne\n7.499627e-04\n0.048855\n0.494012\n0.460938\n&lt;GO:0005829&gt;\n\n\n\n\n\n\n\nUse only the X chromosome as background:\n\ngo_results = gi.go_enrichment(motor_genes_df.symbol, background_chrom='X')\ngo_results\n\nCould not map gene symbol \"KIF28P\" to ncbi id\n\n\n\n\n\n\n\n\n\nnamespace\nterm_id\ne/p\npval_uncorr\np_fdr_bh\nratio\nbg_ratio\nobj\n\n\n\n\n0\nMF\nGO:0045505\ne\n0.000041\n0.010017\n0.333333\n0.002345\n&lt;GO:0045505&gt;\n\n\n1\nMF\nGO:0070840\ne\n0.000041\n0.010017\n0.333333\n0.002345\n&lt;GO:0070840&gt;\n\n\n2\nMF\nGO:0008017\ne\n0.000031\n0.010017\n0.500000\n0.012896\n&lt;GO:0008017&gt;\n\n\n3\nCC\nGO:0016235\ne\n0.000041\n0.020475\n0.333333\n0.002345\n&lt;GO:0016235&gt;",
    "crumbs": [
      "Examples",
      "Example use"
    ]
  },
  {
    "objectID": "pages/examples.html#enrichment-among-a-subset-of-go-terms",
    "href": "pages/examples.html#enrichment-among-a-subset-of-go-terms",
    "title": "Example use",
    "section": "Enrichment among a subset of GO terms",
    "text": "Enrichment among a subset of GO terms\nExtract terms matching regular expression:\n\n#target_terms = gi.get_terms_for_go_regex('brain')\n#target_terms = gi.get_terms_for_go_regex('microtubul')\n# target_terms = gi.get_terms_for_go_regex('spindle')\ntarget_terms = gi.get_terms_for_go_regex(r'neuron\\S* migration')\ngi.show_go_dag_for_terms(target_terms)\n\ngeneinfo_cache/go-basic.obo: fmt(1.2) rel(2024-09-08) 44,296 Terms; optional_attrs(comment def relationship synonym xref)\n\n\n\n\n\n\n\n\n\n\ngo_results = gi.go_enrichment(motor_genes_df.symbol, terms=target_terms, list_study_genes=True)\ngo_results.head()\n\ngeneinfo_cache/go-basic.obo: fmt(1.2) rel(2024-09-08) 44,296 Terms; optional_attrs(def relationship)\n\n\nCould not map gene symbol \"KIF28P\" to ncbi id\n\n\n\n\n\n\n\n\n\nnamespace\nterm_id\ne/p\npval_uncorr\np_fdr_bh\nratio\nbg_ratio\nobj\nstudy_genes\n\n\n\n\n0\nCC\nGO:0005615\np\n0.000016\n0.000063\n0.020958\n0.076426\n&lt;GO:0005615&gt;\n[ACTB, BLOC1S1, HSPA1A, SNCA, LRP8, DYNC2I1, T...\n\n\n1\nCC\nGO:0032991\ne\n0.000155\n0.000310\n0.071856\n0.031027\n&lt;GO:0032991&gt;\n[ACTB, HTT, HNRNPU, HSPA1A, HSPA1B, HSP90AB1, ...\n\n\n2\nBP\nGO:0140650\ne\n0.000778\n0.031519\n0.005988\n0.000146\n&lt;GO:0140650&gt;\n[PAFAH1B1, NDEL1]\n\n\n3\nBP\nGO:0001764\ne\n0.000515\n0.031519\n0.023952\n0.005487\n&lt;GO:0001764&gt;\n[BBS4, PAFAH1B1, PCM1, PSEN1, DISC1, DCDC2, ND...\n\n\n\n\n\n\n\n\ngi.show_go_dag_enrichment_results(go_results.obj)\n\n\n\n\n\n\n\n\nExtract terms matching two regular expressions in any order:\n\npattern_one = r'microtub\\S*'\npattern_two = r'spindle'\nregex = fr\"(?=.*({pattern_one}))(?=.*({pattern_two}))(?=.*)\"\n\ntarget_terms = gi.get_terms_for_go_regex(regex)\ngi.show_go_dag_for_terms(target_terms)\n\ngeneinfo_cache/go-basic.obo: fmt(1.2) rel(2024-09-08) 44,296 Terms; optional_attrs(comment def relationship synonym xref)\n\n\n\n\n\n\n\n\n\n\ngo_results = gi.go_enrichment(motor_genes_df.symbol, terms=target_terms, list_study_genes=True)\ngo_results.head()\n\ngeneinfo_cache/go-basic.obo: fmt(1.2) rel(2024-09-08) 44,296 Terms; optional_attrs(def relationship)\n\n\nCould not map gene symbol \"KIF28P\" to ncbi id\n\n\n\n\n\n\n\n\n\nnamespace\nterm_id\ne/p\npval_uncorr\np_fdr_bh\nratio\nbg_ratio\nobj\nstudy_genes\n\n\n\n\n0\nCC\nGO:0005874\ne\n3.174662e-104\n1.428598e-102\n0.296407\n0.014664\n&lt;GO:0005874&gt;\n[APC, KIF1A, CENPE, DCTN1, DNAH5, DNAH6, DNAH8...\n\n\n1\nBP\nGO:0007018\ne\n3.469444e-87\n3.816388e-85\n0.152695\n0.002719\n&lt;GO:0007018&gt;\n[CENPE, DYNC1I2, DYNC1LI2, KIF2A, KIF3C, KIF5A...\n\n\n2\nCC\nGO:0005813\ne\n1.960675e-77\n4.411518e-76\n0.314371\n0.030444\n&lt;GO:0005813&gt;\n[APC, ARL3, BBS4, BICD1, CENPF, CETN1, CETN2, ...\n\n\n3\nCC\nGO:0005868\ne\n3.150407e-42\n4.725610e-41\n0.068862\n0.001117\n&lt;GO:0005868&gt;\n[DYNC1H1, DYNC1I1, DYNC1I2, DYNC1LI2, DYNLT3, ...\n\n\n4\nCC\nGO:0030286\ne\n5.844463e-35\n6.575021e-34\n0.056886\n0.000923\n&lt;GO:0030286&gt;\n[DCTN1, DNAH6, DNAH9, DYNC1H1, DYNC1I2, DYNC1L...\n\n\n\n\n\n\n\n\ngi.show_go_dag_enrichment_results(go_results.obj)",
    "crumbs": [
      "Examples",
      "Example use"
    ]
  },
  {
    "objectID": "pages/basics.html",
    "href": "pages/basics.html",
    "title": "Basic use",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\nProin sodales neque erat, varius cursus diam tincidunt sit amet. Etiam scelerisque fringilla nisl eu venenatis. Donec sem ipsum, scelerisque ac venenatis quis, hendrerit vel mauris. Praesent semper erat sit amet purus condimentum, sit amet auctor mi feugiat. In hac habitasse platea dictumst. Nunc ac mauris in massa feugiat bibendum id in dui. Praesent accumsan urna at lacinia aliquet. Proin ultricies eu est quis pellentesque. In vel lorem at nisl rhoncus cursus eu quis mi. In eu rutrum ante, quis placerat justo. Etiam euismod nibh nibh, sed elementum nunc imperdiet in. Praesent gravida nunc vel odio lacinia, at tempus nisl placerat. Aenean id ipsum sed est sagittis hendrerit non in tortor."
  },
  {
    "objectID": "pages/basics.html#some-topic",
    "href": "pages/basics.html#some-topic",
    "title": "Basic use",
    "section": "Some topic",
    "text": "Some topic\nFinding Python objects to document involves two pieces of configuration:\n\nthe package name.\na list of objects for content.\n\nquartodoc can look up a wide variety of objects, including functions, modules, classes, attributes, and methods:"
  },
  {
    "objectID": "api/go_name2term.html",
    "href": "api/go_name2term.html",
    "title": "go_name2term",
    "section": "",
    "text": "geneinfo.go_name2term(name)\nConverts a GO term name to its term.\n\n\n\nname : str\n\nGO term name\n\n\n\n\n\n\n : str\n\nGO term.",
    "crumbs": [
      "GO information",
      "go_name2term"
    ]
  },
  {
    "objectID": "api/go_name2term.html#parameters",
    "href": "api/go_name2term.html#parameters",
    "title": "go_name2term",
    "section": "",
    "text": "name : str\n\nGO term name",
    "crumbs": [
      "GO information",
      "go_name2term"
    ]
  },
  {
    "objectID": "api/go_name2term.html#returns",
    "href": "api/go_name2term.html#returns",
    "title": "go_name2term",
    "section": "",
    "text": ": str\n\nGO term.",
    "crumbs": [
      "GO information",
      "go_name2term"
    ]
  },
  {
    "objectID": "api/get_terms_for_go_regex.html",
    "href": "api/get_terms_for_go_regex.html",
    "title": "get_terms_for_go_regex",
    "section": "",
    "text": "geneinfo.get_terms_for_go_regex(regex, taxid=9606, add_children=False)\nGet GO terms for terms matching a regular expression in their description string.\n\n\n\nregex : str\n\nRegular expression to match GO term descriptions.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)\n\nadd_children : bool = False\n\nAdd GO terms nested under GO terms found, by default False\n\n\n\n\n\n\n : list\n\nList of GO terms.",
    "crumbs": [
      "GO information",
      "get_terms_for_go_regex"
    ]
  },
  {
    "objectID": "api/get_terms_for_go_regex.html#parameters",
    "href": "api/get_terms_for_go_regex.html#parameters",
    "title": "get_terms_for_go_regex",
    "section": "",
    "text": "regex : str\n\nRegular expression to match GO term descriptions.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)\n\nadd_children : bool = False\n\nAdd GO terms nested under GO terms found, by default False",
    "crumbs": [
      "GO information",
      "get_terms_for_go_regex"
    ]
  },
  {
    "objectID": "api/get_terms_for_go_regex.html#returns",
    "href": "api/get_terms_for_go_regex.html#returns",
    "title": "get_terms_for_go_regex",
    "section": "",
    "text": ": list\n\nList of GO terms.",
    "crumbs": [
      "GO information",
      "get_terms_for_go_regex"
    ]
  },
  {
    "objectID": "api/go_term2name.html",
    "href": "api/go_term2name.html",
    "title": "go_term2name",
    "section": "",
    "text": "geneinfo.go_term2name(term)\nConverts a GO term to its name.\n\n\n\nterm : str\n\nGO term\n\n\n\n\n\n\n : str\n\nGO term name.",
    "crumbs": [
      "GO information",
      "go_term2name"
    ]
  },
  {
    "objectID": "api/go_term2name.html#parameters",
    "href": "api/go_term2name.html#parameters",
    "title": "go_term2name",
    "section": "",
    "text": "term : str\n\nGO term",
    "crumbs": [
      "GO information",
      "go_term2name"
    ]
  },
  {
    "objectID": "api/go_term2name.html#returns",
    "href": "api/go_term2name.html#returns",
    "title": "go_term2name",
    "section": "",
    "text": ": str\n\nGO term name.",
    "crumbs": [
      "GO information",
      "go_term2name"
    ]
  },
  {
    "objectID": "api/gene_info.html",
    "href": "api/gene_info.html",
    "title": "gene_info",
    "section": "",
    "text": "geneinfo.gene_info(query, species='human', scopes='hgnc')\nDisplays HTML formatted information about one or more genes.\n\n\n\nquery : Union[str, List[str]]\n\nGene symbol or list of gene symbols\n\nspecies : optional = 'human'\n\nSpecies, by default ‘human’\n\nscopes : optional = 'hgnc'\n\nScopes for information search, by default ‘hgnc’",
    "crumbs": [
      "Gene information",
      "gene_info"
    ]
  },
  {
    "objectID": "api/gene_info.html#parameters",
    "href": "api/gene_info.html#parameters",
    "title": "gene_info",
    "section": "",
    "text": "query : Union[str, List[str]]\n\nGene symbol or list of gene symbols\n\nspecies : optional = 'human'\n\nSpecies, by default ‘human’\n\nscopes : optional = 'hgnc'\n\nScopes for information search, by default ‘hgnc’",
    "crumbs": [
      "Gene information",
      "gene_info"
    ]
  },
  {
    "objectID": "api/ensembl2symbol.html",
    "href": "api/ensembl2symbol.html",
    "title": "ensembl2symbol",
    "section": "",
    "text": "geneinfo.ensembl2symbol(ensembl_id)\nConverts ENSEMBL ID to gene HGCN gene symbol\n\n\n\nensembl_id : str\n\nENSEMBL ID\n\n\n\n\n\n\n : str\n\nHGCN gene symbol\n\n\n\n\n\n\n: [](~geneinfo.NotFound)\n\nRaises exception if no HGCN gene symbol can be found.",
    "crumbs": [
      "ID conversion",
      "ensembl2symbol"
    ]
  },
  {
    "objectID": "api/ensembl2symbol.html#parameters",
    "href": "api/ensembl2symbol.html#parameters",
    "title": "ensembl2symbol",
    "section": "",
    "text": "ensembl_id : str\n\nENSEMBL ID",
    "crumbs": [
      "ID conversion",
      "ensembl2symbol"
    ]
  },
  {
    "objectID": "api/ensembl2symbol.html#returns",
    "href": "api/ensembl2symbol.html#returns",
    "title": "ensembl2symbol",
    "section": "",
    "text": ": str\n\nHGCN gene symbol",
    "crumbs": [
      "ID conversion",
      "ensembl2symbol"
    ]
  },
  {
    "objectID": "api/ensembl2symbol.html#raises",
    "href": "api/ensembl2symbol.html#raises",
    "title": "ensembl2symbol",
    "section": "",
    "text": ": [](~geneinfo.NotFound)\n\nRaises exception if no HGCN gene symbol can be found.",
    "crumbs": [
      "ID conversion",
      "ensembl2symbol"
    ]
  },
  {
    "objectID": "api/hgcn_symbol.html",
    "href": "api/hgcn_symbol.html",
    "title": "hgcn_symbol",
    "section": "",
    "text": "geneinfo.hgcn_symbol(name)\nGet HGCN gene symbol for some gene identifier\n\n\n\nname : str\n\nGene identifier\n\n\n\n\n\n\n : str\n\nHGCN gene symbol\n\n\n\n\n\n\n: [](~geneinfo.NotFound)\n\nRaises exception if no HGCN gene symbol can be found.",
    "crumbs": [
      "ID conversion",
      "hgcn_symbol"
    ]
  },
  {
    "objectID": "api/hgcn_symbol.html#parameters",
    "href": "api/hgcn_symbol.html#parameters",
    "title": "hgcn_symbol",
    "section": "",
    "text": "name : str\n\nGene identifier",
    "crumbs": [
      "ID conversion",
      "hgcn_symbol"
    ]
  },
  {
    "objectID": "api/hgcn_symbol.html#returns",
    "href": "api/hgcn_symbol.html#returns",
    "title": "hgcn_symbol",
    "section": "",
    "text": ": str\n\nHGCN gene symbol",
    "crumbs": [
      "ID conversion",
      "hgcn_symbol"
    ]
  },
  {
    "objectID": "api/hgcn_symbol.html#raises",
    "href": "api/hgcn_symbol.html#raises",
    "title": "hgcn_symbol",
    "section": "",
    "text": ": [](~geneinfo.NotFound)\n\nRaises exception if no HGCN gene symbol can be found.",
    "crumbs": [
      "ID conversion",
      "hgcn_symbol"
    ]
  },
  {
    "objectID": "api/gene_info_region.html",
    "href": "api/gene_info_region.html",
    "title": "gene_info_region",
    "section": "",
    "text": "geneinfo.gene_info_region(\n    chrom\n    window_start\n    window_end\n    assembly='GRCh38'\n    db='ncbiRefSeq'\n)\nDisplays HTML formatted information about genes in a chromosomal region.\n\n\n\nchrom : str\n\nChromosome identifier\n\nwindow_start : int\n\nStart of region\n\nwindow_end : int\n\nEnd of region (end base not included)\n\nassembly : str = 'GRCh38'\n\nGenome assembly, by default ‘GRCh38’\n\ndb : str = 'ncbiRefSeq'\n\nDatabase, by default ‘ncbiRefSeq’",
    "crumbs": [
      "Gene information",
      "gene_info_region"
    ]
  },
  {
    "objectID": "api/gene_info_region.html#parameters",
    "href": "api/gene_info_region.html#parameters",
    "title": "gene_info_region",
    "section": "",
    "text": "chrom : str\n\nChromosome identifier\n\nwindow_start : int\n\nStart of region\n\nwindow_end : int\n\nEnd of region (end base not included)\n\nassembly : str = 'GRCh38'\n\nGenome assembly, by default ‘GRCh38’\n\ndb : str = 'ncbiRefSeq'\n\nDatabase, by default ‘ncbiRefSeq’",
    "crumbs": [
      "Gene information",
      "gene_info_region"
    ]
  },
  {
    "objectID": "api/get_genes_region_dataframe.html",
    "href": "api/get_genes_region_dataframe.html",
    "title": "get_genes_region_dataframe",
    "section": "",
    "text": "geneinfo.get_genes_region_dataframe(\n    chrom\n    window_start\n    window_end\n    assembly='GRCh38'\n    db='ncbiRefSeq'\n)\nGets gene structure information for genes in a chromosomal region in the form of a pandas.DataFrame.\n\n\n\nchrom : str\n\nChromosome identifier\n\nwindow_start : int\n\nStart of region\n\nwindow_end : int\n\nEnd of region (end base not included)\n\nassembly : optional = 'GRCh38'\n\nGenome assembly, by default ‘GRCh38’\n\ndb : optional = 'ncbiRefSeq'\n\nDatabase, by default ‘ncbiRefSeq’\n\n\n\n\n\n\n : pd.DataFrame\n\npandas.DataFrame with the following colunms: - name: gene name - start: gene start - end: gene end - strand: gene strand",
    "crumbs": [
      "Gene coordinates",
      "get_genes_region_dataframe"
    ]
  },
  {
    "objectID": "api/get_genes_region_dataframe.html#parameters",
    "href": "api/get_genes_region_dataframe.html#parameters",
    "title": "get_genes_region_dataframe",
    "section": "",
    "text": "chrom : str\n\nChromosome identifier\n\nwindow_start : int\n\nStart of region\n\nwindow_end : int\n\nEnd of region (end base not included)\n\nassembly : optional = 'GRCh38'\n\nGenome assembly, by default ‘GRCh38’\n\ndb : optional = 'ncbiRefSeq'\n\nDatabase, by default ‘ncbiRefSeq’",
    "crumbs": [
      "Gene coordinates",
      "get_genes_region_dataframe"
    ]
  },
  {
    "objectID": "api/get_genes_region_dataframe.html#returns",
    "href": "api/get_genes_region_dataframe.html#returns",
    "title": "get_genes_region_dataframe",
    "section": "",
    "text": ": pd.DataFrame\n\npandas.DataFrame with the following colunms: - name: gene name - start: gene start - end: gene end - strand: gene strand",
    "crumbs": [
      "Gene coordinates",
      "get_genes_region_dataframe"
    ]
  },
  {
    "objectID": "api/go_annotation_table.html",
    "href": "api/go_annotation_table.html",
    "title": "go_annotation_table",
    "section": "",
    "text": "geneinfo.go_annotation_table(taxid=9606)\nGO annotations for a given taxonomy id as a pandas.DataFrame.\n\n\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human\n\n\n\n\n\n\n : pd.DataFrame\n\nGO annotations for the specified taxonomy id.",
    "crumbs": [
      "GO information",
      "go_annotation_table"
    ]
  },
  {
    "objectID": "api/go_annotation_table.html#parameters",
    "href": "api/go_annotation_table.html#parameters",
    "title": "go_annotation_table",
    "section": "",
    "text": "taxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human",
    "crumbs": [
      "GO information",
      "go_annotation_table"
    ]
  },
  {
    "objectID": "api/go_annotation_table.html#returns",
    "href": "api/go_annotation_table.html#returns",
    "title": "go_annotation_table",
    "section": "",
    "text": ": pd.DataFrame\n\nGO annotations for the specified taxonomy id.",
    "crumbs": [
      "GO information",
      "go_annotation_table"
    ]
  },
  {
    "objectID": "api/show_go_dag_for_terms.html",
    "href": "api/show_go_dag_for_terms.html",
    "title": "show_go_dag_for_terms",
    "section": "",
    "text": "geneinfo.show_go_dag_for_terms(terms, add_relationships=True)\nDisplay GO graph for a list of GO terms.\n\n\n\nterms : Union[list, pd.Series]\n\nGo terms\n\nadd_relationships : bool = True\n\nAdd edges representing relationships between GO terms, by default True",
    "crumbs": [
      "GO graphs",
      "show_go_dag_for_terms"
    ]
  },
  {
    "objectID": "api/show_go_dag_for_terms.html#parameters",
    "href": "api/show_go_dag_for_terms.html#parameters",
    "title": "show_go_dag_for_terms",
    "section": "",
    "text": "terms : Union[list, pd.Series]\n\nGo terms\n\nadd_relationships : bool = True\n\nAdd edges representing relationships between GO terms, by default True",
    "crumbs": [
      "GO graphs",
      "show_go_dag_for_terms"
    ]
  },
  {
    "objectID": "api/chrom_ideogram.html",
    "href": "api/chrom_ideogram.html",
    "title": "chrom_ideogram",
    "section": "",
    "text": "geneinfo.chrom_ideogram(\n    annot\n    vspace=0.1\n    min_visible_width=200000\n    figsize=(10, 10)\n    assembly='hg38'\n)\nPlots an ideogram of the human chromosomes with annotations.\n\n\n\nannot : list\n\nList of tuples with annotations. Each tuple should contain the chromosome name, start and end position, color, label and optionally the width and height of the annotation.\n\nvspace : float = 0.1\n\nVertical space between ideograms, by default 0.1\n\nmin_visible_width : int = 200000\n\nMinum display width of very short annotations, by default 200000\n\nfigsize : tuple = (10, 10)\n\nFigure size, by default (10,10)\n\nassembly : str = 'hg38'\n\nHuman genome assembly, by default ‘hg38’\n\n\n\n\n\nannot = [\n    ('chr1', 20000000, 20100000, 'red', 'TP53'),\n    ('chr5', 40000000, 70000000, 'red', None, 1, 0.5), \n    ('chr8', 90000000, 110000000)\n]\nchrom_ideogram(annot, figsize=(15, 9), vspace=0.2)\n\n# black ticks every 10Mb on chrX\nannot = [('chrX', x[0], x[1], 'black', str(x[2]/1000000)) for x in zip(range(0, 150000000, 10000000), range(300000, 150000000, 10000000), range(0, 150000000, 10000000))]\nchrom_ideogram(annot, figsize=(15, 9), vspace=0.2)",
    "crumbs": [
      "Gene plots",
      "chrom_ideogram"
    ]
  },
  {
    "objectID": "api/chrom_ideogram.html#parameters",
    "href": "api/chrom_ideogram.html#parameters",
    "title": "chrom_ideogram",
    "section": "",
    "text": "annot : list\n\nList of tuples with annotations. Each tuple should contain the chromosome name, start and end position, color, label and optionally the width and height of the annotation.\n\nvspace : float = 0.1\n\nVertical space between ideograms, by default 0.1\n\nmin_visible_width : int = 200000\n\nMinum display width of very short annotations, by default 200000\n\nfigsize : tuple = (10, 10)\n\nFigure size, by default (10,10)\n\nassembly : str = 'hg38'\n\nHuman genome assembly, by default ‘hg38’",
    "crumbs": [
      "Gene plots",
      "chrom_ideogram"
    ]
  },
  {
    "objectID": "api/chrom_ideogram.html#examples",
    "href": "api/chrom_ideogram.html#examples",
    "title": "chrom_ideogram",
    "section": "",
    "text": "annot = [\n    ('chr1', 20000000, 20100000, 'red', 'TP53'),\n    ('chr5', 40000000, 70000000, 'red', None, 1, 0.5), \n    ('chr8', 90000000, 110000000)\n]\nchrom_ideogram(annot, figsize=(15, 9), vspace=0.2)\n\n# black ticks every 10Mb on chrX\nannot = [('chrX', x[0], x[1], 'black', str(x[2]/1000000)) for x in zip(range(0, 150000000, 10000000), range(300000, 150000000, 10000000), range(0, 150000000, 10000000))]\nchrom_ideogram(annot, figsize=(15, 9), vspace=0.2)",
    "crumbs": [
      "Gene plots",
      "chrom_ideogram"
    ]
  },
  {
    "objectID": "api/gene_plot.html",
    "href": "api/gene_plot.html",
    "title": "gene_plot",
    "section": "",
    "text": "geneinfo.gene_plot(\n    chrom\n    start\n    end\n    assembly\n    highlight=[]\n    db='ncbiRefSeq'\n    collapse_splice_var=True\n    hard_limits=False\n    exact_exons=False\n    figsize=None\n    aspect=1\n    despine=False\n    clip_on=True\n    gene_density=60\n    font_size=None\n    return_axes=1\n)\nPlots gene ideograms for a chromosomal region and returns axes for plotting along the same chromosome coordinates.\n\n\n\nchrom : str\n\nChromosome identifier\n\nstart : str\n\nStart of region\n\nend : str\n\nEnd of region (end base not included)\n\nassembly : str\n\nGenome assembly identifier\n\nhighlight : list = []\n\nList or dictionary of genes to highlight on gene plot (see Examples), by default []\n\ndb : str = 'ncbiRefSeq'\n\nDatabase to search, by default ‘ncbiRefSeq’\n\ncollapse_splice_var : bool = True\n\nWhether to collapse splice variants into a single string of exons, by default True\n\nhard_limits : bool = False\n\nWhether to truncate plot in the middle of a gene, by default False so that genes are fully plotted.\n\nexact_exons : bool = False\n\nWhether to plot exon coordinates exatly, by default False so that exons are plotted as a minimum width.\n\nfigsize : tuple = None\n\nFigure size specifified as a (width, height) tuple, by default None honering the default matplotlib settings.\n\naspect : float = 1\n\nSize of gene plot height relative to the total height of the other axes, by default 1\n\ndespine : bool = False\n\nWheher to remove top and right frame borders, by default False\n\nclip_on : bool = True\n\nArgument passed to axes.Text, by default True\n\ngene_density : float = 60\n\nControls the density of gene ideograms in the plot, by default 60\n\nfont_size : int = None\n\nGene label font size, by default None, in which case it is calculated based on the region size.\n\nreturn_axes : int = 1\n\nThe number of vertically stacked axes to return for plotting over the gene plot, by default 1\n\n\n\n\n\n\n : Union[matplotlib.axes.Axes, List[matplotlib.axes.Axes]]\n\nA single axes or a list of axes for plotting data over the gene plot.\n\n\n\n\n\nimport geneinfo as gi\n# Set email for Entrez queries\ngi.email('your@email.com')\n\n# Highlight a single gene\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', highlight='TP53')\nax.scatter(chrom_coordinates, values)\n\n# Highlight multiple genes\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', highlight=['TP53', 'BRCA1'])\nax.scatter(chrom_coordinates, values)\n\n# Highlight genes with custom styles\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', highlight={'TP53': {'color': 'blue', 'weight': 'bold'}})\nax.scatter(chrom_coordinates, values)\n\n# Muli-gene highlight with custom styles\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', highlight={'TP53': {'color': 'blue', 'weight': 'bold'}, 'BRCA1': {'color': 'red'}})\nax.scatter(chrom_coordinates, values)\n\n# Multipel axes for plotting over gene plot\naxes = gene_plot('chr1', 1000000, 2000000, 'hg38', return_axes=2)\nax1, ax2 = axes\nax1.scatter(chrom_coordinates, values1)\nax2.scatter(chrom_coordinates, values2)\n\n# Custom figure size and aspect ratio\naxes = gene_plot('chr1', 1000000, 2000000, 'hg38', figsize=(10, 4), aspect=0.5)\nax1, ax2 = axes\nax1.scatter(chrom_coordinates, values1)\nax2.scatter(chrom_coordinates, values2)",
    "crumbs": [
      "Gene plots",
      "gene_plot"
    ]
  },
  {
    "objectID": "api/gene_plot.html#parameters",
    "href": "api/gene_plot.html#parameters",
    "title": "gene_plot",
    "section": "",
    "text": "chrom : str\n\nChromosome identifier\n\nstart : str\n\nStart of region\n\nend : str\n\nEnd of region (end base not included)\n\nassembly : str\n\nGenome assembly identifier\n\nhighlight : list = []\n\nList or dictionary of genes to highlight on gene plot (see Examples), by default []\n\ndb : str = 'ncbiRefSeq'\n\nDatabase to search, by default ‘ncbiRefSeq’\n\ncollapse_splice_var : bool = True\n\nWhether to collapse splice variants into a single string of exons, by default True\n\nhard_limits : bool = False\n\nWhether to truncate plot in the middle of a gene, by default False so that genes are fully plotted.\n\nexact_exons : bool = False\n\nWhether to plot exon coordinates exatly, by default False so that exons are plotted as a minimum width.\n\nfigsize : tuple = None\n\nFigure size specifified as a (width, height) tuple, by default None honering the default matplotlib settings.\n\naspect : float = 1\n\nSize of gene plot height relative to the total height of the other axes, by default 1\n\ndespine : bool = False\n\nWheher to remove top and right frame borders, by default False\n\nclip_on : bool = True\n\nArgument passed to axes.Text, by default True\n\ngene_density : float = 60\n\nControls the density of gene ideograms in the plot, by default 60\n\nfont_size : int = None\n\nGene label font size, by default None, in which case it is calculated based on the region size.\n\nreturn_axes : int = 1\n\nThe number of vertically stacked axes to return for plotting over the gene plot, by default 1",
    "crumbs": [
      "Gene plots",
      "gene_plot"
    ]
  },
  {
    "objectID": "api/gene_plot.html#returns",
    "href": "api/gene_plot.html#returns",
    "title": "gene_plot",
    "section": "",
    "text": ": Union[matplotlib.axes.Axes, List[matplotlib.axes.Axes]]\n\nA single axes or a list of axes for plotting data over the gene plot.",
    "crumbs": [
      "Gene plots",
      "gene_plot"
    ]
  },
  {
    "objectID": "api/gene_plot.html#examples",
    "href": "api/gene_plot.html#examples",
    "title": "gene_plot",
    "section": "",
    "text": "import geneinfo as gi\n# Set email for Entrez queries\ngi.email('your@email.com')\n\n# Highlight a single gene\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', highlight='TP53')\nax.scatter(chrom_coordinates, values)\n\n# Highlight multiple genes\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', highlight=['TP53', 'BRCA1'])\nax.scatter(chrom_coordinates, values)\n\n# Highlight genes with custom styles\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', highlight={'TP53': {'color': 'blue', 'weight': 'bold'}})\nax.scatter(chrom_coordinates, values)\n\n# Muli-gene highlight with custom styles\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', highlight={'TP53': {'color': 'blue', 'weight': 'bold'}, 'BRCA1': {'color': 'red'}})\nax.scatter(chrom_coordinates, values)\n\n# Multipel axes for plotting over gene plot\naxes = gene_plot('chr1', 1000000, 2000000, 'hg38', return_axes=2)\nax1, ax2 = axes\nax1.scatter(chrom_coordinates, values1)\nax2.scatter(chrom_coordinates, values2)\n\n# Custom figure size and aspect ratio\naxes = gene_plot('chr1', 1000000, 2000000, 'hg38', figsize=(10, 4), aspect=0.5)\nax1, ax2 = axes\nax1.scatter(chrom_coordinates, values1)\nax2.scatter(chrom_coordinates, values2)",
    "crumbs": [
      "Gene plots",
      "gene_plot"
    ]
  },
  {
    "objectID": "api/symbols_protein_coding.html",
    "href": "api/symbols_protein_coding.html",
    "title": "symbols_protein_coding",
    "section": "",
    "text": "geneinfo.symbols_protein_coding(taxid=9606)\nList of protein coding gene symbols for a given taxonomy id.\n\n\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)\n\n\n\n\n\n\n : list\n\nList of gene symbols.",
    "crumbs": [
      "GO enrichment",
      "symbols_protein_coding"
    ]
  },
  {
    "objectID": "api/symbols_protein_coding.html#parameters",
    "href": "api/symbols_protein_coding.html#parameters",
    "title": "symbols_protein_coding",
    "section": "",
    "text": "taxid : int = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)",
    "crumbs": [
      "GO enrichment",
      "symbols_protein_coding"
    ]
  },
  {
    "objectID": "api/symbols_protein_coding.html#returns",
    "href": "api/symbols_protein_coding.html#returns",
    "title": "symbols_protein_coding",
    "section": "",
    "text": ": list\n\nList of gene symbols.",
    "crumbs": [
      "GO enrichment",
      "symbols_protein_coding"
    ]
  },
  {
    "objectID": "api/show_go_dag_for_gene.html",
    "href": "api/show_go_dag_for_gene.html",
    "title": "show_go_dag_for_gene",
    "section": "",
    "text": "geneinfo.show_go_dag_for_gene(\n    gene\n    taxid=9606\n    evidence=None\n    add_relationships=True\n)\nDisplays GO graph for a given gene.\n\n\n\ngene : str\n\nGene symbol\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human\n\nevidence : list = None\n\nLimiting list of evidence categories to include, by default None. See show_go_evidence_codes().\n\nadd_relationships : bool = True\n\nAdd edges representing relationships between GO terms, by default True",
    "crumbs": [
      "GO graphs",
      "show_go_dag_for_gene"
    ]
  },
  {
    "objectID": "api/show_go_dag_for_gene.html#parameters",
    "href": "api/show_go_dag_for_gene.html#parameters",
    "title": "show_go_dag_for_gene",
    "section": "",
    "text": "gene : str\n\nGene symbol\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human\n\nevidence : list = None\n\nLimiting list of evidence categories to include, by default None. See show_go_evidence_codes().\n\nadd_relationships : bool = True\n\nAdd edges representing relationships between GO terms, by default True",
    "crumbs": [
      "GO graphs",
      "show_go_dag_for_gene"
    ]
  },
  {
    "objectID": "api/ensembl2ncbi.html",
    "href": "api/ensembl2ncbi.html",
    "title": "ensembl2ncbi",
    "section": "",
    "text": "geneinfo.ensembl2ncbi(ensembl_id)\nConverts ENSEMBL ID to gene NCBI ID\n\n\n\nensembl_id : \n\nENSEMBL ID\n\n\n\n\n\n\n : \n\nNCBI ID\n\n\n\n\n\n\n: [](~geneinfo.NotFound)\n\nRaises exception if no NCBI ID can be found.",
    "crumbs": [
      "ID conversion",
      "ensembl2ncbi"
    ]
  },
  {
    "objectID": "api/ensembl2ncbi.html#parameters",
    "href": "api/ensembl2ncbi.html#parameters",
    "title": "ensembl2ncbi",
    "section": "",
    "text": "ensembl_id : \n\nENSEMBL ID",
    "crumbs": [
      "ID conversion",
      "ensembl2ncbi"
    ]
  },
  {
    "objectID": "api/ensembl2ncbi.html#returns",
    "href": "api/ensembl2ncbi.html#returns",
    "title": "ensembl2ncbi",
    "section": "",
    "text": ": \n\nNCBI ID",
    "crumbs": [
      "ID conversion",
      "ensembl2ncbi"
    ]
  },
  {
    "objectID": "api/ensembl2ncbi.html#raises",
    "href": "api/ensembl2ncbi.html#raises",
    "title": "ensembl2ncbi",
    "section": "",
    "text": ": [](~geneinfo.NotFound)\n\nRaises exception if no NCBI ID can be found.",
    "crumbs": [
      "ID conversion",
      "ensembl2ncbi"
    ]
  }
]