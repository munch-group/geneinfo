[
  {
    "objectID": "pages/go_graphs.html",
    "href": "pages/go_graphs.html",
    "title": "GO graphs",
    "section": "",
    "text": "NB: The first time you use the GO utilities, it will spend a very long time downloading data. If you do not want to wait that out in the notebook, you can execute this command in the folder where you store your notebooks:\n\n\nTerminal\n\nconda run -n &lt;environment&gt; python -c 'import geneinfo.ontology ; geneinfo.ontology.download_data()'\n\nShow the sub-graph for a list of GO terms:\n\nimport geneinfo.ontology as go\n# import importlib\n# importlib.reload(geneinfo)\ngo_terms = go.get_go_terms_for_genes(['DYNLT3'])\ngo.show_go_dag_for_terms(go_terms)\n\n\n\n\n\n\n\n\n\ngo.show_go_dag_for_terms(go_terms)\n\n\n\n\n\n\n\n\nShow the sub-graph for the GO terms of a single gene:\n\ngo.show_go_dag_for_gene('DYNLT3')\n\n10741    6990\nName: GeneID, dtype: int64\n\n\n\n\n\n\n\n\n\nSame but using GO annotation backed by certain kinds of evidence:\n\ngo.show_go_dag_for_gene('DYNLT3', evidence=['IDA', 'EXP', 'HTP'])\n\n10741    6990\nName: GeneID, dtype: int64",
    "crumbs": [
      "Visualization",
      "GO graphs"
    ]
  },
  {
    "objectID": "pages/getting_started.html",
    "href": "pages/getting_started.html",
    "title": "Overview",
    "section": "",
    "text": "geneinfo is a compilation of gene information APIs adapted for use in a Jupyter notebook and some additional utilities. Its API lets you retrieve of information about genes and gene ontologies, plot data together with gene structures (genome browser style), show data on chromosome ideograms, perform gene ontology enrichment analyses and more.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "pages/getting_started.html#installation",
    "href": "pages/getting_started.html#installation",
    "title": "Overview",
    "section": "Installation",
    "text": "Installation\n\n\nTerminal\n\nconda install -c conda-forge -c munch-group geneinfo",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "pages/getting_started.html#interpreting-data-in-a-gene-context",
    "href": "pages/getting_started.html#interpreting-data-in-a-gene-context",
    "title": "Overview",
    "section": "Interpreting data in a gene context",
    "text": "Interpreting data in a gene context\nAmong many other things, geneinfo lets you plot data in chromosome coordinates and view overlapping gene annotation using gene_plot.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')\n\n# %config InlineBackend.figure_format = 'retina'\n%config InlineBackend.figure_format = 'svg'\n\nDummy data:\n\nx = np.linspace(76500000, 77500000, 10000)\nrng = np.random.default_rng()\ny = rng.exponential(scale=1, size=x.size)\n\n\nimport geneinfo.plot as gplt\nax = gplt.gene_plot('chrX', 76500000, 77500000, assembly='hg19')\nax.scatter(x, y, s=2, c='tab:blue') ;\n\n\n\n\n\n\n\n\nYou can get brief summaries using gene_info.\n\nimport geneinfo.information as gi\n\n\ngi.gene_info(['ATRX', 'MAGT1'])\n\nSymbol: ATRX (protein-coding)         Aliases: JMS, MRX52, RAD54, RAD54L, XH2, XNP, ZNF-HX\nATRX chromatin remodeler\nSummary: The protein encoded by this gene contains an ATPase/helicase domain, and thus it belongs to the SWI/SNF family of chromatin remodeling proteins. This protein is found to undergo cell cycle-dependent phosphorylation, which regulates its nuclear matrix and chromatin association, and suggests its involvement in the gene regulation at interphase and chromosomal segregation in mitosis. Mutations in this gene are associated with X-linked syndromes exhibiting cognitive disabilities as well as alpha-thalassemia (ATRX) syndrome. These mutations have been shown to cause diverse changes in the pattern of DNA methylation, which may provide a link between chromatin remodeling, DNA methylation, and gene expression in developmental processes. Multiple alternatively spliced transcript variants encoding distinct isoforms have been reported. [provided by RefSeq, Jul 2017].\nHuman genomic position: X:77504880-77786233 (hg38), HG1426_PATCH:76765832-77047170, X:76760356-77041702 (hg19)\nGene card\n\n\n\nSymbol: MAGT1 (protein-coding)         Aliases: CDG1CC, IAP, MRX95, OST3B, PRO0756, SLC58A1, XMEN, bA217H1.1\nmagnesium transporter 1\nSummary: This gene encodes a ubiquitously expressed magnesium cation transporter protein that localizes to the cell membrane. This protein also associates with N-oligosaccharyl transferase and therefore may have a role in N-glycosylation. Mutations in this gene cause a form of X-linked intellectual disability (XLID). This gene may have multiple in-frame translation initiation sites, one of which would encode a shorter protein with an N-terminus containing a signal peptide at amino acids 1-29. [provided by RefSeq, Jul 2017].\nHuman genomic position: X:77825747-77899271 (hg38), HG1426_PATCH:77087318-77156547, X:77081861-77151090 (hg19)\nGene card\n\n\n\nGet gene ontology terms associated with genes.\n\nimport geneinfo.ontology as go\ngo.email(\"youremail@address.com\")\n\n\ngo_terms = go.get_go_terms_for_genes(['ATRX', 'MAGT1'], evidence=['IDA', 'EXP', 'HTP'])\ngo_terms[:10]\n\n[]\n\n\nShow graph for those terms.\n\ngo.show_go_dag_for_terms(go_terms)\n\nShow definitions of those terms.\n\ngo.go_info(go_terms)",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "pages/gene_lists.html",
    "href": "pages/gene_lists.html",
    "title": "Gene lists",
    "section": "",
    "text": "from geneinfo.utils import GeneListCollection\nfrom geneinfo.utils import GeneList as glist",
    "crumbs": [
      "Utilities",
      "Gene lists"
    ]
  },
  {
    "objectID": "pages/gene_lists.html#genelist",
    "href": "pages/gene_lists.html#genelist",
    "title": "Gene lists",
    "section": "GeneList",
    "text": "GeneList\nLong lists of gene names do not work well visually:\n\ndummy_genes = ['ABCB7', 'ACTRT1', 'AKAP4', 'ALG13', 'ARHGAP36', 'ATP7A', 'ATRX', 'BCLAF3', 'BRCC3', 'CAPN6', 'CCNB3', 'CFAP47', 'CLCN5', 'CMC4', 'CNKSR2', 'COX7B', 'CYBB', 'DCX', 'DKC1', 'DYNLT3', 'ENOX2', 'ENOX2-AS1', 'EZHIP', 'F8', 'F8A1', 'FAM120C', 'FGF16']\ndummy_genes\n\n['ABCB7',\n 'ACTRT1',\n 'AKAP4',\n 'ALG13',\n 'ARHGAP36',\n 'ATP7A',\n 'ATRX',\n 'BCLAF3',\n 'BRCC3',\n 'CAPN6',\n 'CCNB3',\n 'CFAP47',\n 'CLCN5',\n 'CMC4',\n 'CNKSR2',\n 'COX7B',\n 'CYBB',\n 'DCX',\n 'DKC1',\n 'DYNLT3',\n 'ENOX2',\n 'ENOX2-AS1',\n 'EZHIP',\n 'F8',\n 'F8A1',\n 'FAM120C',\n 'FGF16']\n\n\nGeneList objects work just like normal lists but have some additional features that usefull for exploring sets of genes.\nWhen displayed they render as Markdown in columns to make them easier to read:\n\nlist_A = glist(dummy_genes)\nlist_A\n\n\n\n\nABCB7\nALG13\nATRX\nCAPN6\nCLCN5\nCOX7B\nDKC1\nENOX2-AS1\nF8A1\n\n\nACTRT1\nARHGAP36\nBCLAF3\nCCNB3\nCMC4\nCYBB\nDYNLT3\nEZHIP\nFAM120C\n\n\nAKAP4\nATP7A\nBRCC3\nCFAP47\nCNKSR2\nDCX\nENOX2\nF8\nFGF16\n\n\n\n\n\nThe bitwise operator &lt;&lt; is overloaded and highlights genes also present in another gene list:\n\nlist_B = glist(dummy_genes[::2])\nlist_A &lt;&lt; list_B\n\n\n\n\nABCB7\nALG13\nATRX\nCAPN6\nCLCN5\nCOX7B\nDKC1\nENOX2-AS1\nF8A1\n\n\nACTRT1\nARHGAP36\nBCLAF3\nCCNB3\nCMC4\nCYBB\nDYNLT3\nEZHIP\nFAM120C\n\n\nAKAP4\nATP7A\nBRCC3\nCFAP47\nCNKSR2\nDCX\nENOX2\nF8\nFGF16\n\n\n\n\n\n\nlist_C = glist(dummy_genes[:12])\nlist_A &lt;&lt; list_C\n\n\n\n\nABCB7\nALG13\nATRX\nCAPN6\nCLCN5\nCOX7B\nDKC1\nENOX2-AS1\nF8A1\n\n\nACTRT1\nARHGAP36\nBCLAF3\nCCNB3\nCMC4\nCYBB\nDYNLT3\nEZHIP\nFAM120C\n\n\nAKAP4\nATP7A\nBRCC3\nCFAP47\nCNKSR2\nDCX\nENOX2\nF8\nFGF16\n\n\n\n\n\nThe bitwise operators, &, |, and ^, to allow logical operations on gene lists.\nHighlight in A the intersection between B and C:\n\nlist_A &lt;&lt; (list_B & list_C)\n\n\n\n\nABCB7\nALG13\nATRX\nCAPN6\nCLCN5\nCOX7B\nDKC1\nENOX2-AS1\nF8A1\n\n\nACTRT1\nARHGAP36\nBCLAF3\nCCNB3\nCMC4\nCYBB\nDYNLT3\nEZHIP\nFAM120C\n\n\nAKAP4\nATP7A\nBRCC3\nCFAP47\nCNKSR2\nDCX\nENOX2\nF8\nFGF16\n\n\n\n\n\nHighlight in A the union between B and C:\n\nlist_A &lt;&lt; (list_B | list_C)\n\n\n\n\nABCB7\nALG13\nATRX\nCAPN6\nCLCN5\nCOX7B\nDKC1\nENOX2-AS1\nF8A1\n\n\nACTRT1\nARHGAP36\nBCLAF3\nCCNB3\nCMC4\nCYBB\nDYNLT3\nEZHIP\nFAM120C\n\n\nAKAP4\nATP7A\nBRCC3\nCFAP47\nCNKSR2\nDCX\nENOX2\nF8\nFGF16\n\n\n\n\n\nHighlight in A the genes not shared by B and C:\n\nlist_A &lt;&lt; (list_B ^ list_C)\n\n\n\n\nABCB7\nALG13\nATRX\nCAPN6\nCLCN5\nCOX7B\nDKC1\nENOX2-AS1\nF8A1\n\n\nACTRT1\nARHGAP36\nBCLAF3\nCCNB3\nCMC4\nCYBB\nDYNLT3\nEZHIP\nFAM120C\n\n\nAKAP4\nATP7A\nBRCC3\nCFAP47\nCNKSR2\nDCX\nENOX2\nF8\nFGF16\n\n\n\n\n\nHighlight in A the genes in B but not in C (set difference):\n\nlist_A &lt;&lt; (list_B ^ (list_B & list_C))\n\n\n\n\nABCB7\nALG13\nATRX\nCAPN6\nCLCN5\nCOX7B\nDKC1\nENOX2-AS1\nF8A1\n\n\nACTRT1\nARHGAP36\nBCLAF3\nCCNB3\nCMC4\nCYBB\nDYNLT3\nEZHIP\nFAM120C\n\n\nAKAP4\nATP7A\nBRCC3\nCFAP47\nCNKSR2\nDCX\nENOX2\nF8\nFGF16\n\n\n\n\n\nHighlight in A the genes in C but not in B (set difference):\n\nlist_A &lt;&lt; (list_C ^ (list_C & list_B))\n\n\n\n\nABCB7\nALG13\nATRX\nCAPN6\nCLCN5\nCOX7B\nDKC1\nENOX2-AS1\nF8A1\n\n\nACTRT1\nARHGAP36\nBCLAF3\nCCNB3\nCMC4\nCYBB\nDYNLT3\nEZHIP\nFAM120C\n\n\nAKAP4\nATP7A\nBRCC3\nCFAP47\nCNKSR2\nDCX\nENOX2\nF8\nFGF16",
    "crumbs": [
      "Utilities",
      "Gene lists"
    ]
  },
  {
    "objectID": "pages/gene_lists.html#genelistcollection",
    "href": "pages/gene_lists.html#genelistcollection",
    "title": "Gene lists",
    "section": "GeneListCollection",
    "text": "GeneListCollection\nLoad table of gene lists from a csv file:\n\ngene_lists = GeneListCollection('google_sheet.csv')\n\nOr from a Google Sheet using its ID and the sheet name:\n\n# gene_lists = GeneListCollection(google_sheet='2JSjSLuto3jqdEnnG7JqzeC_1pUZw76n7XueVAYrUOpk')\n\nSee which neuron genes are also SFARI genes:\n\nneuron_genes = glist(gene_lists.get('neuron_npx_proteome'))\nsfari = glist(gene_lists.get('sfari_all_conf'))\nneuron_genes &lt;&lt; sfari\n\n\n\n\nABCB7\nBGN\nEBP\nGPR173\nLAS1L\nNLGN4X\nPNMA3\nRPS6KA3\nTAF9B\nUSP51\n\n\nABCD1\nBRCC3\nEFHC2\nGPR82\nLDOC1\nNONO\nPNMA6A\nRPS6KA6\nTBC1D25\nUSP9X\n\n\nACOT9\nBRWD3\nEFNB1\nGPRASP1\nLONRF3\nNSDHL\nPNPLA4\nRRAGB\nTBC1D8B\nUTP14A\n\n\nACSL4\nC1GALT1C1\nEGFL6\nGPRASP2\nLRCH2\nNUDT11\nPOLA1\nRS1\nTBL1X\nUXT\n\n\nADGRG2\nCA5B\nEIF1AX\nGRIA3\nMAGED1\nNUP62CL\nPORCN\nSAT1\nTCEAL1\nVAMP7\n\n\nADGRG4\nCACNA1F\nEIF2S3\nGRIPAP1\nMAGED2\nNXT2\nPPEF1\nSCML1\nTCEAL2\nVBP1\n\n\nAFF2\nCASK\nELK1\nGSPT2\nMAGEE1\nNYX\nPPP1R3F\nSCML2\nTCEAL3\nVCX3B\n\n\nAIFM1\nCCDC120\nEMD\nGUCY2F\nMAGEE2\nOCRL\nPQBP1\nSH3BGRL\nTCEAL4\nVMA21\n\n\nALG13\nCCDC22\nENOX2\nGYG2\nMAGEH1\nOFD1\nPRAF2\nSH3KBP1\nTCEAL5\nWDR13\n\n\nAMER1\nCD99L2\nF8\nHAUS7\nMAGIX\nOGT\nPRDX4\nSHROOM2\nTCEAL6\nWDR44\n\n\nAMMECR1\nCDK16\nFAAH2\nHCCS\nMAGT1\nOPHN1\nPRICKLE3\nSLC10A3\nTCEAL7\nWDR45\n\n\nAMOT\nCDKL5\nFAM104B\nHCFC1\nMAMLD1\nOPN1LW\nPRKX\nSLC16A2\nTCEAL8\nWNK3\n\n\nANOS1\nCDR1\nFAM120C\nHDAC6\nMAOA\nOPN1MW\nPRPS1\nSLC25A14\nTCEANC\nWWC3\n\n\nAP1S2\nCETN2\nFAM133A\nHDAC8\nMAOB\nOPN1MW3\nPRRG1\nSLC25A5\nTENM1\nXIAP\n\n\nAPEX2\nCFAP47\nFAM199X\nHDX\nMAP3K15\nOTUD5\nPSMD10\nSLC25A53\nTFE3\nXK\n\n\nAPOO\nCFP\nFAM3A\nHMGB3\nMAP7D2\nOTUD6A\nPTCHD1\nSLC35A2\nTHOC2\nYIPF6\n\n\nAPOOL\nCHIC1\nFAM50A\nHMGN5\nMAP7D3\nPABPC1L2A\nPUDP\nSLC38A5\nTIMM17B\nYY2\n\n\nARAF\nCHM\nFAM9B\nHNRNPH2\nMBNL3\nPABPC5\nRAB33A\nSLC6A8\nTIMM8A\nZBTB33\n\n\nARHGAP4\nCHRDL1\nFAM9C\nHPRT1\nMBTPS2\nPAK3\nRAB39B\nSLC9A6\nTIMP1\nZC3H12B\n\n\nARHGAP6\nCHST7\nFANCB\nHSD17B10\nMCF2\nPBDC1\nRAB40AL\nSLC9A7\nTKTL1\nZC4H2\n\n\nARHGEF6\nCITED1\nFGD1\nHTATSF1\nMCTS1\nPCDH11X\nRAB41\nSLITRK2\nTLR7\nZCCHC18\n\n\nARHGEF9\nCLCN4\nFGF13\nHUWE1\nMECP2\nPCDH19\nRAB9A\nSLITRK4\nTMEM164\nZDHHC15\n\n\nARMCX1\nCLCN5\nFHL1\nIDH3G\nMED12\nPCSK1N\nRAB9B\nSMARCA1\nTMEM185A\nZDHHC9\n\n\nARMCX2\nCLDN34\nFLNA\nIDS\nMED14\nPCYT1B\nRAI2\nSMC1A\nTMEM187\nZFX\n\n\nARMCX3\nCLIC2\nFMR1\nIGBP1\nMID1\nPDHA1\nRAP2C\nSMIM10\nTMEM47\nZIC3\n\n\nARMCX4\nCMC4\nFOXO4\nIGSF1\nMID1IP1\nPDK3\nRBBP7\nSMIM10L2A\nTMLHE\nZMAT1\n\n\nARMCX5\nCNKSR2\nFOXP3\nIKBKG\nMID2\nPDZD11\nRBM10\nSMIM10L2B\nTMSB15B\nZMYM3\n\n\nARMCX6\nCOX7B\nFRMPD3\nIL13RA1\nMMGT1\nPDZD4\nRBM3\nSMS\nTMSB4X\nZNF182\n\n\nARR3\nCSTF2\nFRMPD4\nIRAK1\nMORC4\nPGK1\nRBM41\nSNX12\nTRAPPC2\nZNF185\n\n\nARSD\nCTPS2\nFTSJ1\nITGB1BP2\nMORF4L2\nPGRMC1\nRBMX\nSOWAHD\nTRMT2B\nZNF275\n\n\nASB11\nCUL4B\nFUNDC1\nITM2A\nMOSPD1\nPHEX\nRBMX2\nSPIN2A\nTRO\nZNF280C\n\n\nATG4A\nCXorf38\nFUNDC2\nJADE3\nMOSPD2\nPHF6\nRENBP\nSPIN2B\nTSC22D3\nZNF41\n\n\nATP11C\nCXorf58\nG6PD\nKCND1\nMPP1\nPHF8\nREPS2\nSPIN3\nTSPAN6\nZNF449\n\n\nATP2B3\nCYBB\nGABRA3\nKDM5C\nMSL3\nPHKA1\nRGN\nSPIN4\nTSPAN7\nZNF630\n\n\nATP6AP1\nCYSLTR1\nGDI1\nKDM6A\nMSN\nPHKA2\nRHOXF1\nSPRY3\nTSPYL2\nZNF674\n\n\nATP6AP2\nDACH2\nGEMIN8\nKLF8\nNAA10\nPIGA\nRIBC1\nSRPK3\nTSR2\nZNF711\n\n\nATP7A\nDCX\nGK\nKLHL13\nNAP1L2\nPIM2\nRLIM\nSSR4\nTXLNG\nZNF75D\n\n\nATRX\nDDX3X\nGLA\nKLHL15\nNAP1L3\nPIN4\nRNF113A\nSTAG2\nUBA1\nZNF81\n\n\nBCAP31\nDIAPH2\nGLOD5\nKLHL34\nNDP\nPIR\nRP2\nSTS\nUBE2A\nZRSR2\n\n\nBCOR\nDKC1\nGLRA2\nKLHL4\nNDUFA1\nPJA1\nRPA4\nSUV39H1\nUBL4A\nZXDA\n\n\nBCORL1\nDLG3\nGLUD2\nKRBOX4\nNDUFB11\nPLP1\nRPGR\nSYAP1\nUBQLN2\nZXDB\n\n\nBEX1\nDMD\nGNL3L\nL1CAM\nNHS\nPLP2\nRPL10\nSYN1\nUPF3B\n\n\n\nBEX2\nDNASE1L1\nGPC3\nLAGE3\nNKAP\nPLS3\nRPL36A\nSYP\nUPRT\n\n\n\nBEX4\nDRP2\nGPKOW\nLAMP2\nNKRF\nPLXNA3\nRPL39\nTAB3\nUSP11\n\n\n\nBEX5\nDYNLT3\nGPM6B\nLANCL3\nNLGN3\nPNCK\nRPS4X\nTAF1\nUSP27X",
    "crumbs": [
      "Utilities",
      "Gene lists"
    ]
  },
  {
    "objectID": "pages/basics.html",
    "href": "pages/basics.html",
    "title": "Basic use",
    "section": "",
    "text": "Etiam non efficitur urna, quis elementum nisi. Mauris posuere a augue vel gravida. Praesent luctus erat et ex iaculis interdum. Nulla vestibulum quam ac nunc consequat vulputate. Nullam iaculis lobortis sem sit amet fringilla. Aliquam semper, metus ut blandit semper, nulla velit fermentum sapien, fermentum ultrices dolor sapien sed leo. Vestibulum molestie faucibus magna, at feugiat nulla ullamcorper a. Aliquam erat volutpat. Praesent scelerisque magna a justo maximus, sit amet suscipit mauris tempor. Nulla nec dolor eget ipsum pellentesque lobortis a in ipsum. Morbi turpis turpis, fringilla a eleifend maximus, viverra nec neque. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus."
  },
  {
    "objectID": "pages/basics.html#some-topic",
    "href": "pages/basics.html#some-topic",
    "title": "Basic use",
    "section": "Some topic",
    "text": "Some topic\nFinding Python objects to document involves two pieces of configuration:\n\nthe package name.\na list of objects for content.\n\nquartodoc can look up a wide variety of objects, including functions, modules, classes, attributes, and methods:"
  },
  {
    "objectID": "pages/gene_coord.html",
    "href": "pages/gene_coord.html",
    "title": "Gene coordinates",
    "section": "",
    "text": "import geneinfo.information as gi"
  },
  {
    "objectID": "pages/gene_coord.html#gene-coordinates",
    "href": "pages/gene_coord.html#gene-coordinates",
    "title": "Gene coordinates",
    "section": "Gene coordinates",
    "text": "Gene coordinates\n\nfrom geneinfo.utils import clear_cache\n\nclear_cache()\n\n\ngi.gene_coords('DYNLT3', assembly='hg38')\n\n[('chrX', 37838835, 37847571, 'DYNLT3')]\n\n\n\ngi.gene_coords(['DYNLT3', 'CFAP47'], assembly='papAnu4')\n\n[('chrX', 35179240, 35188256, 'DYNLT3'),\n ('chrX', 33488516, 33923885, 'CFAP47')]"
  },
  {
    "objectID": "pages/gene_coord.html#get-coordinates-for-genes-in-a-region",
    "href": "pages/gene_coord.html#get-coordinates-for-genes-in-a-region",
    "title": "Gene coordinates",
    "section": "Get coordinates for genes in a region",
    "text": "Get coordinates for genes in a region\n\ngi.gene_coords_region('chrX', 76500000, 77000000, assembly='hg19')\n\n[('FGF16',\n  'chrX',\n  76709642,\n  76712769,\n  ([(76709642, 76709751), (76711767, 76712769)],)),\n ('ATRX',\n  'chrX',\n  76760357,\n  77041702,\n  ([(76760357, 76764107),\n    (76776265, 76776394),\n    (76776880, 76776976),\n    (76777740, 76777866),\n    (76778729, 76778879),\n    (76812921, 76813116),\n    (76814139, 76814317),\n    (76829714, 76829823),\n    (76845303, 76845410),\n    (76849165, 76849319),\n    (76854879, 76855049),\n    (76855200, 76855289),\n    (76855902, 76856033),\n    (76872080, 76872198),\n    (76874273, 76874449),\n    (76875862, 76876000),\n    (76888694, 76888872),\n    (76889053, 76889200),\n    (76890084, 76890194),\n    (76891405, 76891547),\n    (76907603, 76907843),\n    (76909587, 76909690),\n    (76912049, 76912143),\n    (76918870, 76919047),\n    (76920133, 76920267),\n    (76931720, 76931793),\n    (76937011, 76940085),\n    (76940430, 76940498),\n    (76944310, 76944420),\n    (76949312, 76949426),\n    (76952064, 76952192),\n    (76953070, 76953123),\n    (76954061, 76954117),\n    (76972607, 76972720),\n    (77041467, 77041702)],\n   [(76760357, 76764107),\n    (76776265, 76776394),\n    (76776880, 76776976),\n    (76777740, 76777866),\n    (76778729, 76778879),\n    (76812921, 76813116),\n    (76814139, 76814317),\n    (76829714, 76829823),\n    (76845303, 76845410),\n    (76849165, 76849319),\n    (76854879, 76855049),\n    (76855200, 76855289),\n    (76855902, 76856033),\n    (76872080, 76872198),\n    (76874273, 76874449),\n    (76875862, 76876000),\n    (76888694, 76888872),\n    (76889053, 76889200),\n    (76890084, 76890194),\n    (76891405, 76891547),\n    (76907603, 76907843),\n    (76909587, 76909690),\n    (76912049, 76912143),\n    (76918870, 76919047),\n    (76920133, 76920267),\n    (76931720, 76931793),\n    (76937011, 76940085),\n    (76940430, 76940498),\n    (76944310, 76944420),\n    (76952064, 76952192),\n    (76953070, 76953123),\n    (76954061, 76954117),\n    (76972607, 76972720),\n    (77041467, 77041702)]))]"
  },
  {
    "objectID": "pages/cashing.html",
    "href": "pages/cashing.html",
    "title": "Caching",
    "section": "",
    "text": "geneinfo will cash information queries to make the notebooks run rast on subsequent executions.",
    "crumbs": [
      "Utilities",
      "Caching"
    ]
  },
  {
    "objectID": "pages/cashing.html#clearing-the-cache",
    "href": "pages/cashing.html#clearing-the-cache",
    "title": "Caching",
    "section": "Clearing the cache",
    "text": "Clearing the cache\nTo clear that cache use:\n\nimport geneinfo.utils as utils\n\nutils.clear_cache()",
    "crumbs": [
      "Utilities",
      "Caching"
    ]
  },
  {
    "objectID": "pages/cashing.html#disabling-use-of-the-cache",
    "href": "pages/cashing.html#disabling-use-of-the-cache",
    "title": "Caching",
    "section": "Disabling use of the cache",
    "text": "Disabling use of the cache\nTo just disable its use for the current kernel, so all info is retrieved anew, use:\n\nutils.use_cache = False\n\nTo switch it back on:\n\nutils.use_cache = True\n\nTo temporarily disable for a block of code you can use:\n\nwith utils.cache_disabled():\n    ...",
    "crumbs": [
      "Utilities",
      "Caching"
    ]
  },
  {
    "objectID": "pages/cashing.html#exposing-retrieval-of-information",
    "href": "pages/cashing.html#exposing-retrieval-of-information",
    "title": "Caching",
    "section": "Exposing retrieval of information",
    "text": "Exposing retrieval of information\nIf you want to keep track of when cached information is used and when it is retrieved, you can set:\n\nutils.verbose_retrieval = True\n\nThis will print a message to stderr each time data is retrieved.",
    "crumbs": [
      "Utilities",
      "Caching"
    ]
  },
  {
    "objectID": "pages/gene_ids.html",
    "href": "pages/gene_ids.html",
    "title": "ID conversion",
    "section": "",
    "text": "import geneinfo.information as gi",
    "crumbs": [
      "Information",
      "ID conversion"
    ]
  },
  {
    "objectID": "pages/gene_ids.html#conversion-from-ensembl-ids",
    "href": "pages/gene_ids.html#conversion-from-ensembl-ids",
    "title": "ID conversion",
    "section": "Conversion from ENSEMBL IDs:",
    "text": "Conversion from ENSEMBL IDs:\n\ngi.ensembl2ncbi('ENSG00000128573')\n\n93986\n\n\n\ngi.ensembl2symbol('ENSG00000128573')\n\n'FOXP2'",
    "crumbs": [
      "Information",
      "ID conversion"
    ]
  },
  {
    "objectID": "pages/gene_ids.html#conversion-to-ensembl-ids",
    "href": "pages/gene_ids.html#conversion-to-ensembl-ids",
    "title": "ID conversion",
    "section": "Conversion to ENSEMBL IDs:",
    "text": "Conversion to ENSEMBL IDs:\n\ngi.ensembl_id('FOXP2', species='Homo sapiens')\n\n'ENSG00000128573'\n\n\n\ngi.ensembl_id(['FOXP2', '93986'], species='Homo sapiens')\n\n['ENSG00000128573', 'ENSG00000128573']",
    "crumbs": [
      "Information",
      "ID conversion"
    ]
  },
  {
    "objectID": "pages/gene_ids.html#conversion-to-hgcn-gene-symbols",
    "href": "pages/gene_ids.html#conversion-to-hgcn-gene-symbols",
    "title": "ID conversion",
    "section": "Conversion to HGCN gene symbols",
    "text": "Conversion to HGCN gene symbols\nSpecies Human sapiens is assumed.\n\ngi.hgcn_symbol(['CXorf23', 'BCLAF3', 'ENSG00000173681'])\n\n['BCLAF3', 'BCLAF3', 'BCLAF3']",
    "crumbs": [
      "Information",
      "ID conversion"
    ]
  },
  {
    "objectID": "api/email.html",
    "href": "api/email.html",
    "title": "email",
    "section": "",
    "text": "geneinfo.ontology.email(email_address)\nRegisters your email address for Entrez queries. Thay way, NCBI will contect you before closeing your connection if you are making too many queries.\n\n\n\nemail_address : str\n\nyour email address",
    "crumbs": [
      "GO graphs",
      "email"
    ]
  },
  {
    "objectID": "api/email.html#parameters",
    "href": "api/email.html#parameters",
    "title": "email",
    "section": "",
    "text": "email_address : str\n\nyour email address",
    "crumbs": [
      "GO graphs",
      "email"
    ]
  },
  {
    "objectID": "api/go_annotation_table.html",
    "href": "api/go_annotation_table.html",
    "title": "go_annotation_table",
    "section": "",
    "text": "geneinfo.ontology.go_annotation_table(taxid=9606)\nGO annotations for a given taxonomy id as a pandas.DataFrame.\n\n\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human\n\n\n\n\n\n\n : pd.DataFrame\n\nGO annotations for the specified taxonomy id.",
    "crumbs": [
      "GO information",
      "go_annotation_table"
    ]
  },
  {
    "objectID": "api/go_annotation_table.html#parameters",
    "href": "api/go_annotation_table.html#parameters",
    "title": "go_annotation_table",
    "section": "",
    "text": "taxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human",
    "crumbs": [
      "GO information",
      "go_annotation_table"
    ]
  },
  {
    "objectID": "api/go_annotation_table.html#returns",
    "href": "api/go_annotation_table.html#returns",
    "title": "go_annotation_table",
    "section": "",
    "text": ": pd.DataFrame\n\nGO annotations for the specified taxonomy id.",
    "crumbs": [
      "GO information",
      "go_annotation_table"
    ]
  },
  {
    "objectID": "api/show_go_evidence_codes.html",
    "href": "api/show_go_evidence_codes.html",
    "title": "show_go_evidence_codes",
    "section": "",
    "text": "show_go_evidence_codes\ngeneinfo.ontology.show_go_evidence_codes()\nDisplay list of GO evidence categories and their codes.",
    "crumbs": [
      "GO enrichment",
      "show_go_evidence_codes"
    ]
  },
  {
    "objectID": "api/GeneList.html",
    "href": "api/GeneList.html",
    "title": "GeneList",
    "section": "",
    "text": "geneinfo.utils.GeneList(self, *args, **kwargs)\n\n\n\n\n\nName\nDescription\n\n\n\n\ndownload_gene_aliases\nDownload mapping from any alias to the cannonical hgcn name for use in set operations.\n\n\n\n\n\ngeneinfo.utils.GeneList.download_gene_aliases()\nDownload mapping from any alias to the cannonical hgcn name for use in set operations.",
    "crumbs": [
      "Utilities",
      "GeneList"
    ]
  },
  {
    "objectID": "api/GeneList.html#methods",
    "href": "api/GeneList.html#methods",
    "title": "GeneList",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndownload_gene_aliases\nDownload mapping from any alias to the cannonical hgcn name for use in set operations.\n\n\n\n\n\ngeneinfo.utils.GeneList.download_gene_aliases()\nDownload mapping from any alias to the cannonical hgcn name for use in set operations.",
    "crumbs": [
      "Utilities",
      "GeneList"
    ]
  },
  {
    "objectID": "api/tabulate_genes.html",
    "href": "api/tabulate_genes.html",
    "title": "tabulate_genes",
    "section": "",
    "text": "tabulate_genes\ngeneinfo.utils.tabulate_genes(words, ncols=None)",
    "crumbs": [
      "Utilities",
      "tabulate_genes"
    ]
  },
  {
    "objectID": "api/gene_annotation_table.html",
    "href": "api/gene_annotation_table.html",
    "title": "gene_annotation_table",
    "section": "",
    "text": "geneinfo.ontology.gene_annotation_table(taxid=9606)\nGene annotations for a given taxonomy id as a pandas.DataFrame.\n\n\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human\n\n\n\n\n\n\n : pd.DataFrame\n\nGene annotations for the specified taxonomy id.",
    "crumbs": [
      "Gene annotation",
      "gene_annotation_table"
    ]
  },
  {
    "objectID": "api/gene_annotation_table.html#parameters",
    "href": "api/gene_annotation_table.html#parameters",
    "title": "gene_annotation_table",
    "section": "",
    "text": "taxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human",
    "crumbs": [
      "Gene annotation",
      "gene_annotation_table"
    ]
  },
  {
    "objectID": "api/gene_annotation_table.html#returns",
    "href": "api/gene_annotation_table.html#returns",
    "title": "gene_annotation_table",
    "section": "",
    "text": ": pd.DataFrame\n\nGene annotations for the specified taxonomy id.",
    "crumbs": [
      "Gene annotation",
      "gene_annotation_table"
    ]
  },
  {
    "objectID": "api/gene_coords.html",
    "href": "api/gene_coords.html",
    "title": "gene_coords",
    "section": "",
    "text": "geneinfo.information.gene_coords(names, assembly)\nGet gene coordinates for a gene or list of genes.\n\n\n\nnames : Union[str, Sequence[str]]\n\nGene name or list of gene names\n\nassembly : str\n\nAssembly identifier, e.g. ‘hg38’ or ‘rheMac10’\n\n\n\n\n\n\n : List[Tuple[str, int, int, str]]\n\nList of tuples with chromosome, start, end, and gene name.",
    "crumbs": [
      "Gene coordinates",
      "gene_coords"
    ]
  },
  {
    "objectID": "api/gene_coords.html#parameters",
    "href": "api/gene_coords.html#parameters",
    "title": "gene_coords",
    "section": "",
    "text": "names : Union[str, Sequence[str]]\n\nGene name or list of gene names\n\nassembly : str\n\nAssembly identifier, e.g. ‘hg38’ or ‘rheMac10’",
    "crumbs": [
      "Gene coordinates",
      "gene_coords"
    ]
  },
  {
    "objectID": "api/gene_coords.html#returns",
    "href": "api/gene_coords.html#returns",
    "title": "gene_coords",
    "section": "",
    "text": ": List[Tuple[str, int, int, str]]\n\nList of tuples with chromosome, start, end, and gene name.",
    "crumbs": [
      "Gene coordinates",
      "gene_coords"
    ]
  },
  {
    "objectID": "api/get_genes_region.html",
    "href": "api/get_genes_region.html",
    "title": "get_genes_region",
    "section": "",
    "text": "geneinfo.information.get_genes_region(\n    chrom\n    window_start\n    window_end\n    assembly='GRCh38'\n    db='ncbiRefSeq'\n)\nGets gene structure information for genes in a chromosomal region.\n\n\n\nchrom : str\n\nChromosome identifier\n\nwindow_start : int\n\nStart of region\n\nwindow_end : int\n\nEnd of region (end base not included)\n\nassembly : str = 'GRCh38'\n\nGenome assembly, by default ‘GRCh38’\n\ndb : str = 'ncbiRefSeq'\n\nDatabase, by default ‘ncbiRefSeq’\n\n\n\n\n\n\n : list\n\nList of gene information. Each gene is a tuple with the following elements: - gene name - gene start - gene end - gene strand - list of exons (start, end)"
  },
  {
    "objectID": "api/get_genes_region.html#parameters",
    "href": "api/get_genes_region.html#parameters",
    "title": "get_genes_region",
    "section": "",
    "text": "chrom : str\n\nChromosome identifier\n\nwindow_start : int\n\nStart of region\n\nwindow_end : int\n\nEnd of region (end base not included)\n\nassembly : str = 'GRCh38'\n\nGenome assembly, by default ‘GRCh38’\n\ndb : str = 'ncbiRefSeq'\n\nDatabase, by default ‘ncbiRefSeq’"
  },
  {
    "objectID": "api/get_genes_region.html#returns",
    "href": "api/get_genes_region.html#returns",
    "title": "get_genes_region",
    "section": "",
    "text": ": list\n\nList of gene information. Each gene is a tuple with the following elements: - gene name - gene start - gene end - gene strand - list of exons (start, end)"
  },
  {
    "objectID": "api/index.html",
    "href": "api/index.html",
    "title": "Function reference",
    "section": "",
    "text": "These functions retrieve information summaries, for named genes or genes in a defined genomic range, and displays it as rendered Markdown in the output cell.\n\n\n\ngene_info\nDisplays HTML formatted information about one or more human genes.\n\n\ngene_info_region\nDisplays HTML formatted information about genes in a chromosomal region.\n\n\n\n\n\n\nThese functions display information graphically together with each either gene structures in a genomic region (gene_plot) or chromosomal ideograms (chrom_ideogram).\n\n\n\ngene_plot\nPlots gene ideograms for a chromosomal region and returns axes for\n\n\nGenomeIdeogram\nClass to plot ideograms of chromosomes in a genome assembly.\n\n\nChromIdeogram\nChild class of GenomeIdeogram for plotting single chromosome ideograms.\n\n\n\n\n\n\nThese functions retrieve coordinates of named genes or genes in a chromosomal region.\n\n\n\ngene_coords\nGet gene coordinates for a gene or list of genes.\n\n\ngene_coords_region\nGets gene structure information for genes in a chromosomal region.\n\n\n\n\n\n\nThese functions converts between NCBI, ENSEMBL and HGCN gene identifiers.\n\n\n\nensembl_id\nGet ENSEMBL ID for some gene identifier\n\n\nhgcn_symbol\nGet HGCN gene symbol for some gene identifier\n\n\nensembl2symbol\nConverts ENSEMBL ID to gene HGCN gene symbol\n\n\nensembl2ncbi\nConverts ENSEMBL ID to gene NCBI ID\n\n\n\n\n\n\nThese functions retrieve and display STRING network information.\n\n\n\nstring_network_table\nRetrieves STRING network for a list of genes and returns it as a pandas.DataFrame.\n\n\nshow_string_network\nDisplay STRING network for a list of genes.\n\n\n\n\n\n\nThese functions retrieve gene ontology information.\n\n\n\ngo_info\nDisplays HML formatted information about the given GO terms.\n\n\ngo_term2name\nConverts a GO term to its name.\n\n\ngo_name2term\nConverts a GO term name to its term.\n\n\nget_go_terms_for_genes\nGet the union of GO terms for a list of genes.\n\n\nget_terms_for_go_regex\nGet GO terms for terms matching a regular expression in their description string.\n\n\ngo_annotation_table\nGO annotations for a given taxonomy id as a pandas.DataFrame.\n\n\n\n\n\n\nThese functions allow gene ontology enrichment analyses.\n\n\n\ngo_enrichment\nRuns a GO enrichment analysis.\n\n\nshow_go_evidence_codes\nDisplay list of GO evidence categories and their codes.\n\n\nsymbols_protein_coding\nList of protein coding gene symbols for a given taxonomy id.\n\n\ndownload_data\n\n\n\n\n\n\n\nThese functions display directed graphs representing sets of connected GO terms.\n\n\n\nemail\nRegisters your email address for Entrez queries. Thay way, NCBI will contect\n\n\nshow_go_dag_for_gene\nDisplays GO graph for a given gene.\n\n\nshow_go_dag_for_terms\nDisplay GO graph for a list of GO terms.\n\n\nshow_go_dag_enrichment_results\nDisplays a GO enrichment analysis results.\n\n\n\n\n\n\nThese functions retrieves genes based on their GO annotation.\n\n\n\nget_genes_for_go_regex\nGet gene information for GO terms matching a regular expression in\n\n\nget_genes_for_go_terms\nGet gene information for genes with specified GO terms.\n\n\ngene_annotation_table\nGene annotations for a given taxonomy id as a pandas.DataFrame.\n\n\n\n\n\n\nThese are utility functions to record your email in queries and to tabulate genes.\n\n\n\ntabulate_genes\n\n\n\nhorizon\nHorizon bar plot made allowing multiple chromosomes and multiple samples.\n\n\nstairs\nTurn a df with start, end into one with pos to plot as stairs\n\n\nclear_cache\nClear the cache of a shelve file.\n\n\nGeneList\n\n\n\nGeneListCollection",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#gene-information",
    "href": "api/index.html#gene-information",
    "title": "Function reference",
    "section": "",
    "text": "These functions retrieve information summaries, for named genes or genes in a defined genomic range, and displays it as rendered Markdown in the output cell.\n\n\n\ngene_info\nDisplays HTML formatted information about one or more human genes.\n\n\ngene_info_region\nDisplays HTML formatted information about genes in a chromosomal region.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#gene-plots",
    "href": "api/index.html#gene-plots",
    "title": "Function reference",
    "section": "",
    "text": "These functions display information graphically together with each either gene structures in a genomic region (gene_plot) or chromosomal ideograms (chrom_ideogram).\n\n\n\ngene_plot\nPlots gene ideograms for a chromosomal region and returns axes for\n\n\nGenomeIdeogram\nClass to plot ideograms of chromosomes in a genome assembly.\n\n\nChromIdeogram\nChild class of GenomeIdeogram for plotting single chromosome ideograms.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#gene-coordinates",
    "href": "api/index.html#gene-coordinates",
    "title": "Function reference",
    "section": "",
    "text": "These functions retrieve coordinates of named genes or genes in a chromosomal region.\n\n\n\ngene_coords\nGet gene coordinates for a gene or list of genes.\n\n\ngene_coords_region\nGets gene structure information for genes in a chromosomal region.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#id-conversion",
    "href": "api/index.html#id-conversion",
    "title": "Function reference",
    "section": "",
    "text": "These functions converts between NCBI, ENSEMBL and HGCN gene identifiers.\n\n\n\nensembl_id\nGet ENSEMBL ID for some gene identifier\n\n\nhgcn_symbol\nGet HGCN gene symbol for some gene identifier\n\n\nensembl2symbol\nConverts ENSEMBL ID to gene HGCN gene symbol\n\n\nensembl2ncbi\nConverts ENSEMBL ID to gene NCBI ID",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#string-networks",
    "href": "api/index.html#string-networks",
    "title": "Function reference",
    "section": "",
    "text": "These functions retrieve and display STRING network information.\n\n\n\nstring_network_table\nRetrieves STRING network for a list of genes and returns it as a pandas.DataFrame.\n\n\nshow_string_network\nDisplay STRING network for a list of genes.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#go-information",
    "href": "api/index.html#go-information",
    "title": "Function reference",
    "section": "",
    "text": "These functions retrieve gene ontology information.\n\n\n\ngo_info\nDisplays HML formatted information about the given GO terms.\n\n\ngo_term2name\nConverts a GO term to its name.\n\n\ngo_name2term\nConverts a GO term name to its term.\n\n\nget_go_terms_for_genes\nGet the union of GO terms for a list of genes.\n\n\nget_terms_for_go_regex\nGet GO terms for terms matching a regular expression in their description string.\n\n\ngo_annotation_table\nGO annotations for a given taxonomy id as a pandas.DataFrame.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#go-enrichment",
    "href": "api/index.html#go-enrichment",
    "title": "Function reference",
    "section": "",
    "text": "These functions allow gene ontology enrichment analyses.\n\n\n\ngo_enrichment\nRuns a GO enrichment analysis.\n\n\nshow_go_evidence_codes\nDisplay list of GO evidence categories and their codes.\n\n\nsymbols_protein_coding\nList of protein coding gene symbols for a given taxonomy id.\n\n\ndownload_data",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#go-graphs",
    "href": "api/index.html#go-graphs",
    "title": "Function reference",
    "section": "",
    "text": "These functions display directed graphs representing sets of connected GO terms.\n\n\n\nemail\nRegisters your email address for Entrez queries. Thay way, NCBI will contect\n\n\nshow_go_dag_for_gene\nDisplays GO graph for a given gene.\n\n\nshow_go_dag_for_terms\nDisplay GO graph for a list of GO terms.\n\n\nshow_go_dag_enrichment_results\nDisplays a GO enrichment analysis results.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#gene-annotation",
    "href": "api/index.html#gene-annotation",
    "title": "Function reference",
    "section": "",
    "text": "These functions retrieves genes based on their GO annotation.\n\n\n\nget_genes_for_go_regex\nGet gene information for GO terms matching a regular expression in\n\n\nget_genes_for_go_terms\nGet gene information for genes with specified GO terms.\n\n\ngene_annotation_table\nGene annotations for a given taxonomy id as a pandas.DataFrame.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#utilities",
    "href": "api/index.html#utilities",
    "title": "Function reference",
    "section": "",
    "text": "These are utility functions to record your email in queries and to tabulate genes.\n\n\n\ntabulate_genes\n\n\n\nhorizon\nHorizon bar plot made allowing multiple chromosomes and multiple samples.\n\n\nstairs\nTurn a df with start, end into one with pos to plot as stairs\n\n\nclear_cache\nClear the cache of a shelve file.\n\n\nGeneList\n\n\n\nGeneListCollection",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/symbols_protein_coding.html",
    "href": "api/symbols_protein_coding.html",
    "title": "symbols_protein_coding",
    "section": "",
    "text": "geneinfo.ontology.symbols_protein_coding(taxid=9606)\nList of protein coding gene symbols for a given taxonomy id.\n\n\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)\n\n\n\n\n\n\n : list\n\nList of gene symbols.",
    "crumbs": [
      "GO enrichment",
      "symbols_protein_coding"
    ]
  },
  {
    "objectID": "api/symbols_protein_coding.html#parameters",
    "href": "api/symbols_protein_coding.html#parameters",
    "title": "symbols_protein_coding",
    "section": "",
    "text": "taxid : int = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)",
    "crumbs": [
      "GO enrichment",
      "symbols_protein_coding"
    ]
  },
  {
    "objectID": "api/symbols_protein_coding.html#returns",
    "href": "api/symbols_protein_coding.html#returns",
    "title": "symbols_protein_coding",
    "section": "",
    "text": ": list\n\nList of gene symbols.",
    "crumbs": [
      "GO enrichment",
      "symbols_protein_coding"
    ]
  },
  {
    "objectID": "api/GeneListCollection.html",
    "href": "api/GeneListCollection.html",
    "title": "GeneListCollection",
    "section": "",
    "text": "GeneListCollection\ngeneinfo.utils.GeneListCollection(\n    self\n    url=None\n    google_sheet=None\n    tab='Sheet1'\n)",
    "crumbs": [
      "Utilities",
      "GeneListCollection"
    ]
  },
  {
    "objectID": "api/get_genes_region_dataframe.html",
    "href": "api/get_genes_region_dataframe.html",
    "title": "get_genes_region_dataframe",
    "section": "",
    "text": "geneinfo.information.get_genes_region_dataframe(\n    chrom\n    window_start\n    window_end\n    assembly='GRCh38'\n    db='ncbiRefSeq'\n)\nGets gene structure information for genes in a chromosomal region in the form of a pandas.DataFrame.\n\n\n\nchrom : str\n\nChromosome identifier\n\nwindow_start : int\n\nStart of region\n\nwindow_end : int\n\nEnd of region (end base not included)\n\nassembly : optional = 'GRCh38'\n\nGenome assembly, by default ‘GRCh38’\n\ndb : optional = 'ncbiRefSeq'\n\nDatabase, by default ‘ncbiRefSeq’\n\n\n\n\n\n\n : pd.DataFrame\n\npandas.DataFrame with the following colunms: - name: gene name - start: gene start - end: gene end - strand: gene strand"
  },
  {
    "objectID": "api/get_genes_region_dataframe.html#parameters",
    "href": "api/get_genes_region_dataframe.html#parameters",
    "title": "get_genes_region_dataframe",
    "section": "",
    "text": "chrom : str\n\nChromosome identifier\n\nwindow_start : int\n\nStart of region\n\nwindow_end : int\n\nEnd of region (end base not included)\n\nassembly : optional = 'GRCh38'\n\nGenome assembly, by default ‘GRCh38’\n\ndb : optional = 'ncbiRefSeq'\n\nDatabase, by default ‘ncbiRefSeq’"
  },
  {
    "objectID": "api/get_genes_region_dataframe.html#returns",
    "href": "api/get_genes_region_dataframe.html#returns",
    "title": "get_genes_region_dataframe",
    "section": "",
    "text": ": pd.DataFrame\n\npandas.DataFrame with the following colunms: - name: gene name - start: gene start - end: gene end - strand: gene strand"
  },
  {
    "objectID": "api/get_genes_for_go_terms.html",
    "href": "api/get_genes_for_go_terms.html",
    "title": "get_genes_for_go_terms",
    "section": "",
    "text": "geneinfo.ontology.get_genes_for_go_terms(terms, taxid=9606)\nGet gene information for genes with specified GO terms.\n\n\n\nterms : \n\nList of GO terms\n\ntaxid :  = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)\n\n\n\n\n\n\n : pd.DataFrame\n\nColumns: symbol, name, chrom, start, end.",
    "crumbs": [
      "Gene annotation",
      "get_genes_for_go_terms"
    ]
  },
  {
    "objectID": "api/get_genes_for_go_terms.html#parameters",
    "href": "api/get_genes_for_go_terms.html#parameters",
    "title": "get_genes_for_go_terms",
    "section": "",
    "text": "terms : \n\nList of GO terms\n\ntaxid :  = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)",
    "crumbs": [
      "Gene annotation",
      "get_genes_for_go_terms"
    ]
  },
  {
    "objectID": "api/get_genes_for_go_terms.html#returns",
    "href": "api/get_genes_for_go_terms.html#returns",
    "title": "get_genes_for_go_terms",
    "section": "",
    "text": ": pd.DataFrame\n\nColumns: symbol, name, chrom, start, end.",
    "crumbs": [
      "Gene annotation",
      "get_genes_for_go_terms"
    ]
  },
  {
    "objectID": "api/get_go_terms_for_genes.html",
    "href": "api/get_go_terms_for_genes.html",
    "title": "get_go_terms_for_genes",
    "section": "",
    "text": "geneinfo.ontology.get_go_terms_for_genes(genes, taxid=9606, evidence=None)\nGet the union of GO terms for a list of genes.\n\n\n\ngenes : Union[str, list]\n\nGene name or list of gene names.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human.\n\nevidence : list = None\n\nEvidence codes, by default None\n\n\n\n\n\n\n : list\n\nGo terms for the specified genes.",
    "crumbs": [
      "GO information",
      "get_go_terms_for_genes"
    ]
  },
  {
    "objectID": "api/get_go_terms_for_genes.html#parameters",
    "href": "api/get_go_terms_for_genes.html#parameters",
    "title": "get_go_terms_for_genes",
    "section": "",
    "text": "genes : Union[str, list]\n\nGene name or list of gene names.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human.\n\nevidence : list = None\n\nEvidence codes, by default None",
    "crumbs": [
      "GO information",
      "get_go_terms_for_genes"
    ]
  },
  {
    "objectID": "api/get_go_terms_for_genes.html#returns",
    "href": "api/get_go_terms_for_genes.html#returns",
    "title": "get_go_terms_for_genes",
    "section": "",
    "text": ": list\n\nGo terms for the specified genes.",
    "crumbs": [
      "GO information",
      "get_go_terms_for_genes"
    ]
  },
  {
    "objectID": "api/gene_plot.html",
    "href": "api/gene_plot.html",
    "title": "gene_plot",
    "section": "",
    "text": "geneinfo.plot.gene_plot(\n    chrom\n    start\n    end\n    assembly\n    highlight=[]\n    hard_limits=False\n    exact_exons=False\n    figsize=None\n    aspect=1\n    despine=False\n    clip_on=True\n    gene_density=60\n    font_size=None\n    return_axes=1\n)\nPlots gene ideograms for a chromosomal region and returns axes for plotting along the same chromosome coordinates.\n\n\n\nchrom : str\n\nChromosome identifier\n\nstart : str\n\nStart of region\n\nend : str\n\nEnd of region (end base not included)\n\nassembly : str\n\nGenome assembly identifier\n\nhighlight : List[Dict] = []\n\nList or dictionary of genes to highlight on gene plot (see Examples), by default []\n\nhard_limits : bool = False\n\nWhether to truncate plot in the middle of a gene, by default False so that genes are fully plotted.\n\nexact_exons : bool = False\n\nWhether to plot exon coordinates exactly, by default False so that exons are plotted as a minimum width.\n\nfigsize : tuple = None\n\nFigure size specified as a (width, height) tuple, by default None honoring the default matplotlib settings.\n\naspect : float = 1\n\nSize of gene plot height relative to the total height of the other axes, by default 1\n\ndespine : bool = False\n\nWhether to remove top and right frame borders, by default False\n\nclip_on : bool = True\n\nArgument passed to axes.Text, by default True\n\ngene_density : float = 60\n\nControls the density of gene ideograms in the plot, by default 60\n\nfont_size : int = None\n\nGene label font size, by default None, in which case it is calculated based on the region size.\n\nreturn_axes : int = 1\n\nThe number of vertically stacked axes to return for plotting over the gene plot, by default 1\n\n\n\n\n\n\n : Union[matplotlib.axes.Axes, List[matplotlib.axes.Axes]]\n\nA single axes or a list of axes for plotting data over the gene plot.\n\n\n\n\n\nimport geneinfo.information as gi\n# Set email for Entrez queries\ngi.email('your@email.com')\n\n# Highlight a single gene\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', highlight='TP53')\nax.scatter(chrom_coordinates, values)\n\n# Highlight multiple genes\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', highlight=['TP53', 'BRCA1'])\nax.scatter(chrom_coordinates, values)\n\n# Highlight genes with custom styles\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', \n                highlight={'TP53': {'color': 'blue', 'weight': 'bold'}})\nax.scatter(chrom_coordinates, values)\n\n# Muli-gene highlight with custom styles\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', \n                highlight={'TP53': {'color': 'blue', 'weight': 'bold'}, \n                           'BRCA1': {'color': 'red'}})\nax.scatter(chrom_coordinates, values)\n\n# Multiple axes for plotting over gene plot\naxes = gene_plot('chr1', 1000000, 2000000, 'hg38', return_axes=2)\nax1, ax2 = axes\nax1.scatter(chrom_coordinates, values1)\nax2.scatter(chrom_coordinates, values2)\n\n# Custom figure size and aspect ratio\naxes = gene_plot('chr1', 1000000, 2000000, 'hg38', figsize=(10, 4), aspect=0.5)\nax1, ax2 = axes\nax1.scatter(chrom_coordinates, values1)\nax2.scatter(chrom_coordinates, values2)",
    "crumbs": [
      "Gene plots",
      "gene_plot"
    ]
  },
  {
    "objectID": "api/gene_plot.html#parameters",
    "href": "api/gene_plot.html#parameters",
    "title": "gene_plot",
    "section": "",
    "text": "chrom : str\n\nChromosome identifier\n\nstart : str\n\nStart of region\n\nend : str\n\nEnd of region (end base not included)\n\nassembly : str\n\nGenome assembly identifier\n\nhighlight : List[Dict] = []\n\nList or dictionary of genes to highlight on gene plot (see Examples), by default []\n\nhard_limits : bool = False\n\nWhether to truncate plot in the middle of a gene, by default False so that genes are fully plotted.\n\nexact_exons : bool = False\n\nWhether to plot exon coordinates exactly, by default False so that exons are plotted as a minimum width.\n\nfigsize : tuple = None\n\nFigure size specified as a (width, height) tuple, by default None honoring the default matplotlib settings.\n\naspect : float = 1\n\nSize of gene plot height relative to the total height of the other axes, by default 1\n\ndespine : bool = False\n\nWhether to remove top and right frame borders, by default False\n\nclip_on : bool = True\n\nArgument passed to axes.Text, by default True\n\ngene_density : float = 60\n\nControls the density of gene ideograms in the plot, by default 60\n\nfont_size : int = None\n\nGene label font size, by default None, in which case it is calculated based on the region size.\n\nreturn_axes : int = 1\n\nThe number of vertically stacked axes to return for plotting over the gene plot, by default 1",
    "crumbs": [
      "Gene plots",
      "gene_plot"
    ]
  },
  {
    "objectID": "api/gene_plot.html#returns",
    "href": "api/gene_plot.html#returns",
    "title": "gene_plot",
    "section": "",
    "text": ": Union[matplotlib.axes.Axes, List[matplotlib.axes.Axes]]\n\nA single axes or a list of axes for plotting data over the gene plot.",
    "crumbs": [
      "Gene plots",
      "gene_plot"
    ]
  },
  {
    "objectID": "api/gene_plot.html#examples",
    "href": "api/gene_plot.html#examples",
    "title": "gene_plot",
    "section": "",
    "text": "import geneinfo.information as gi\n# Set email for Entrez queries\ngi.email('your@email.com')\n\n# Highlight a single gene\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', highlight='TP53')\nax.scatter(chrom_coordinates, values)\n\n# Highlight multiple genes\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', highlight=['TP53', 'BRCA1'])\nax.scatter(chrom_coordinates, values)\n\n# Highlight genes with custom styles\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', \n                highlight={'TP53': {'color': 'blue', 'weight': 'bold'}})\nax.scatter(chrom_coordinates, values)\n\n# Muli-gene highlight with custom styles\nax = gene_plot('chr1', 1000000, 2000000, 'hg38', \n                highlight={'TP53': {'color': 'blue', 'weight': 'bold'}, \n                           'BRCA1': {'color': 'red'}})\nax.scatter(chrom_coordinates, values)\n\n# Multiple axes for plotting over gene plot\naxes = gene_plot('chr1', 1000000, 2000000, 'hg38', return_axes=2)\nax1, ax2 = axes\nax1.scatter(chrom_coordinates, values1)\nax2.scatter(chrom_coordinates, values2)\n\n# Custom figure size and aspect ratio\naxes = gene_plot('chr1', 1000000, 2000000, 'hg38', figsize=(10, 4), aspect=0.5)\nax1, ax2 = axes\nax1.scatter(chrom_coordinates, values1)\nax2.scatter(chrom_coordinates, values2)",
    "crumbs": [
      "Gene plots",
      "gene_plot"
    ]
  },
  {
    "objectID": "api/clear_cache.html",
    "href": "api/clear_cache.html",
    "title": "clear_cache",
    "section": "",
    "text": "clear_cache\ngeneinfo.utils.clear_cache(func_name=None)\nClear the cache of a shelve file.",
    "crumbs": [
      "Utilities",
      "clear_cache"
    ]
  },
  {
    "objectID": "api/horizon.html",
    "href": "api/horizon.html",
    "title": "horizon",
    "section": "",
    "text": "horizon\ngeneinfo.utils.horizon(\n    df\n    y=None\n    ax=None\n    cut=None\n    quantile_span=None\n    x='start'\n    beginzero=True\n    offset=0\n    height=None\n    palette='iker'\n    colors=None\n    **kwargs\n)\nHorizon bar plot made allowing multiple chromosomes and multiple samples.",
    "crumbs": [
      "Utilities",
      "horizon"
    ]
  },
  {
    "objectID": "api/GoogleSheet.html",
    "href": "api/GoogleSheet.html",
    "title": "GoogleSheet",
    "section": "",
    "text": "GoogleSheet\ngeneinfo.utils.GoogleSheet(\n    self\n    SHEET_ID='1JSjSLuto3jqdEnnG7JqzeC_1pUZw76n7XueVAYrUOpk'\n    SHEET_NAME='Sheet1'\n)"
  },
  {
    "objectID": "api/go_enrichment.html",
    "href": "api/go_enrichment.html",
    "title": "go_enrichment",
    "section": "",
    "text": "geneinfo.ontology.go_enrichment(\n    gene_list\n    taxid=9606\n    background_chrom=None\n    background_genes=None\n    terms=None\n    list_study_genes=False\n    alpha=0.05\n)\nRuns a GO enrichment analysis.\n\n\n\ngene_list : list\n\nList of gene symbols or NCBI gene ids.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, 9606 (human) or 1758 (mouse), by default 9606.\n\nbackground_chrom : str = None\n\nName of chromosome, by default None. Limits analysis to this named chromosome\n\nbackground_genes : list = None\n\nList of genes for use as background in GO enrichment analysis, by default None\n\nterms : list = None\n\nList of GO terms for use as background in GO enrichment analysis, by default None\n\nlist_study_genes : list = False\n\nWhether to include lists of genes responsible for enrichment for each identified GO term, by default False\n\nalpha : float = 0.05\n\nFalse discovery significance cut-off, by default 0.05\n\n\n\n\n\n\n : pd.DataFrame\n\npd.DataFrame with columns: - namespace: (BP, MF, CC) - term_id: GO term - e/p: enrichment or depletion - pval_uncorr: uncorrected p-value - p_fdr_bh: Benjamini-Hochberg corrected p-value - ratio: ratio of study genes in GO term - bg_ratio: ratio of background genes in GO term - obj: GOEnrichmentRecord object\n\n\n\n\n\ngene_list = ['TP53', 'BRCA1', 'BRCA2', 'EGFR', 'KRAS', 'PTEN', 'CDH1', \n             'ATM', 'CHEK2', 'PALB2']\nresults = go_enrichment(gene_list, taxid=9606, alpha=0.05)\nshow_go_dag_enrichment_results(results.obj)",
    "crumbs": [
      "GO enrichment",
      "go_enrichment"
    ]
  },
  {
    "objectID": "api/go_enrichment.html#parameters",
    "href": "api/go_enrichment.html#parameters",
    "title": "go_enrichment",
    "section": "",
    "text": "gene_list : list\n\nList of gene symbols or NCBI gene ids.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, 9606 (human) or 1758 (mouse), by default 9606.\n\nbackground_chrom : str = None\n\nName of chromosome, by default None. Limits analysis to this named chromosome\n\nbackground_genes : list = None\n\nList of genes for use as background in GO enrichment analysis, by default None\n\nterms : list = None\n\nList of GO terms for use as background in GO enrichment analysis, by default None\n\nlist_study_genes : list = False\n\nWhether to include lists of genes responsible for enrichment for each identified GO term, by default False\n\nalpha : float = 0.05\n\nFalse discovery significance cut-off, by default 0.05",
    "crumbs": [
      "GO enrichment",
      "go_enrichment"
    ]
  },
  {
    "objectID": "api/go_enrichment.html#returns",
    "href": "api/go_enrichment.html#returns",
    "title": "go_enrichment",
    "section": "",
    "text": ": pd.DataFrame\n\npd.DataFrame with columns: - namespace: (BP, MF, CC) - term_id: GO term - e/p: enrichment or depletion - pval_uncorr: uncorrected p-value - p_fdr_bh: Benjamini-Hochberg corrected p-value - ratio: ratio of study genes in GO term - bg_ratio: ratio of background genes in GO term - obj: GOEnrichmentRecord object",
    "crumbs": [
      "GO enrichment",
      "go_enrichment"
    ]
  },
  {
    "objectID": "api/go_enrichment.html#examples",
    "href": "api/go_enrichment.html#examples",
    "title": "go_enrichment",
    "section": "",
    "text": "gene_list = ['TP53', 'BRCA1', 'BRCA2', 'EGFR', 'KRAS', 'PTEN', 'CDH1', \n             'ATM', 'CHEK2', 'PALB2']\nresults = go_enrichment(gene_list, taxid=9606, alpha=0.05)\nshow_go_dag_enrichment_results(results.obj)",
    "crumbs": [
      "GO enrichment",
      "go_enrichment"
    ]
  },
  {
    "objectID": "api/gene_coord.html",
    "href": "api/gene_coord.html",
    "title": "gene_coord",
    "section": "",
    "text": "geneinfo.information.gene_coord(\n    query\n    assembly\n    species='homo_sapiens'\n    pos_list=False\n)\nRetrieves genome coordinates one or more genes.\n\n\n\nquery : Union[str, List[str]]\n\nGene symbol or list of gene symbols\n\nassembly : \n\nGenome assembly.\n\nspecies :  = 'homo_sapiens'\n\nSpecies, by default ‘homo_sapiens’.\n\npos_list :  = False\n\nWether to instead return a list of (chrom, position, name) tuples.\n\n\n\n\n\n\n : dict\n\nDictionary with gene names as keys and (chrom, start, end, strand) tuples as values, or a list of (chrom, position, name) tuples."
  },
  {
    "objectID": "api/gene_coord.html#parameters",
    "href": "api/gene_coord.html#parameters",
    "title": "gene_coord",
    "section": "",
    "text": "query : Union[str, List[str]]\n\nGene symbol or list of gene symbols\n\nassembly : \n\nGenome assembly.\n\nspecies :  = 'homo_sapiens'\n\nSpecies, by default ‘homo_sapiens’.\n\npos_list :  = False\n\nWether to instead return a list of (chrom, position, name) tuples."
  },
  {
    "objectID": "api/gene_coord.html#returns",
    "href": "api/gene_coord.html#returns",
    "title": "gene_coord",
    "section": "",
    "text": ": dict\n\nDictionary with gene names as keys and (chrom, start, end, strand) tuples as values, or a list of (chrom, position, name) tuples."
  },
  {
    "objectID": "api/hgcn_symbol.html",
    "href": "api/hgcn_symbol.html",
    "title": "hgcn_symbol",
    "section": "",
    "text": "geneinfo.information.hgcn_symbol(name)\nGet HGCN gene symbol for some gene identifier\n\n\n\nname : str | list\n\nGene identifier or sequence of identifiers.\n\n\n\n\n\n\n : str\n\nHGCN gene symbol\n\n\n\n\n\n\n: [](~geneinfo.NotFound)\n\nRaises exception if no HGCN gene symbol can be found.",
    "crumbs": [
      "ID conversion",
      "hgcn_symbol"
    ]
  },
  {
    "objectID": "api/hgcn_symbol.html#parameters",
    "href": "api/hgcn_symbol.html#parameters",
    "title": "hgcn_symbol",
    "section": "",
    "text": "name : str | list\n\nGene identifier or sequence of identifiers.",
    "crumbs": [
      "ID conversion",
      "hgcn_symbol"
    ]
  },
  {
    "objectID": "api/hgcn_symbol.html#returns",
    "href": "api/hgcn_symbol.html#returns",
    "title": "hgcn_symbol",
    "section": "",
    "text": ": str\n\nHGCN gene symbol",
    "crumbs": [
      "ID conversion",
      "hgcn_symbol"
    ]
  },
  {
    "objectID": "api/hgcn_symbol.html#raises",
    "href": "api/hgcn_symbol.html#raises",
    "title": "hgcn_symbol",
    "section": "",
    "text": ": [](~geneinfo.NotFound)\n\nRaises exception if no HGCN gene symbol can be found.",
    "crumbs": [
      "ID conversion",
      "hgcn_symbol"
    ]
  },
  {
    "objectID": "api/show_go_dag_for_gene.html",
    "href": "api/show_go_dag_for_gene.html",
    "title": "show_go_dag_for_gene",
    "section": "",
    "text": "geneinfo.ontology.show_go_dag_for_gene(\n    gene\n    taxid=9606\n    evidence=None\n    add_relationships=True\n)\nDisplays GO graph for a given gene.\n\n\n\ngene : str\n\nGene symbol\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human\n\nevidence : list = None\n\nLimiting list of evidence categories to include, by default None. See show_go_evidence_codes().\n\nadd_relationships : bool = True\n\nAdd edges representing relationships between GO terms, by default True",
    "crumbs": [
      "GO graphs",
      "show_go_dag_for_gene"
    ]
  },
  {
    "objectID": "api/show_go_dag_for_gene.html#parameters",
    "href": "api/show_go_dag_for_gene.html#parameters",
    "title": "show_go_dag_for_gene",
    "section": "",
    "text": "gene : str\n\nGene symbol\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606, which is human\n\nevidence : list = None\n\nLimiting list of evidence categories to include, by default None. See show_go_evidence_codes().\n\nadd_relationships : bool = True\n\nAdd edges representing relationships between GO terms, by default True",
    "crumbs": [
      "GO graphs",
      "show_go_dag_for_gene"
    ]
  },
  {
    "objectID": "api/ensembl_id.html",
    "href": "api/ensembl_id.html",
    "title": "ensembl_id",
    "section": "",
    "text": "geneinfo.information.ensembl_id(name, species)\nGet ENSEMBL ID for some gene identifier\n\n\n\nname : Union[str, list]\n\nGene identifier\n\nspecies : str\n\nSpecies latin name, e.g. “Homo sapiens”\n\n\n\n\n\n\n : str\n\nENSEMBL ID\n\n\n\n\n\n\n: [](~geneinfo.NotFound)\n\nRaises exception if no ENSEMBL ID can be found.",
    "crumbs": [
      "ID conversion",
      "ensembl_id"
    ]
  },
  {
    "objectID": "api/ensembl_id.html#parameters",
    "href": "api/ensembl_id.html#parameters",
    "title": "ensembl_id",
    "section": "",
    "text": "name : Union[str, list]\n\nGene identifier\n\nspecies : str\n\nSpecies latin name, e.g. “Homo sapiens”",
    "crumbs": [
      "ID conversion",
      "ensembl_id"
    ]
  },
  {
    "objectID": "api/ensembl_id.html#returns",
    "href": "api/ensembl_id.html#returns",
    "title": "ensembl_id",
    "section": "",
    "text": ": str\n\nENSEMBL ID",
    "crumbs": [
      "ID conversion",
      "ensembl_id"
    ]
  },
  {
    "objectID": "api/ensembl_id.html#raises",
    "href": "api/ensembl_id.html#raises",
    "title": "ensembl_id",
    "section": "",
    "text": ": [](~geneinfo.NotFound)\n\nRaises exception if no ENSEMBL ID can be found.",
    "crumbs": [
      "ID conversion",
      "ensembl_id"
    ]
  },
  {
    "objectID": "api/GenomeIdeogram.html",
    "href": "api/GenomeIdeogram.html",
    "title": "GenomeIdeogram",
    "section": "",
    "text": "geneinfo.plot.GenomeIdeogram(\n    self\n    assembly\n    axes_height_inches=0.5\n    axes_width_inches=12\n    hspace=0\n    ylim=(0, 10)\n    font_size=10\n)\nClass to plot ideograms of chromosomes in a genome assembly.\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_horizon\nAdds a horizon plot to the chromosome ideograms.\n\n\nadd_labels\nAdd text labels to the chromosome ideograms.\n\n\nadd_legend\nAdds a legend to the chromosome ideograms.\n\n\nadd_segments\nAdd segments (rectangles) to the chromosome ideograms.\n\n\nadd_vlines\nAdds vertical lines to the chromosome ideograms.\n\n\nannotate\nDraws an annotation with an arrow to a point from a text box.\n\n\ndraw_chromosomes\nDraws chromosome ideograms.\n\n\ndraw_text\nDraws text with a line pointing to a position on the y-axis.\n\n\nget_polygon\nComputes polygon for rotated text label.\n\n\nmap_fun\nMap a plotting function like seaborn.scatterplot to each ideogram panel (axis).\n\n\nmap_method\nMap a matplotib axes method like plot and scatter to each ideogram\n\n\nmap_y\nMaps y-axis values from user-specified ylim to actual plotting coordinates.\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.add_horizon(\n    data=None\n    ch='chrom'\n    y='y'\n    x='x'\n    cut=None\n    quantile_span=None\n    beginzero=True\n    base=None\n    height=None\n    colors=['#CCE2DF', '#59A9A8', '#374E9B', 'midnightblue', '#F2DE9A', '#DA8630', '#972428', 'darkred', '#D3D3D3']\n    **kwargs\n)\nAdds a horizon plot to the chromosome ideograms.\n\n\n\ndata : pd.DataFrame = None\n\nPandas DataFrame with sorted x and y data grouped by chromosome\n\nch : str = 'chrom'\n\nName of data frame column holding chromosome names, by default ‘chrom’\n\nx : str = 'x'\n\nName of data frame column holding x coordinates, by default ‘x’\n\ny : str = 'y'\n\nName of data frame column holding y coordinates, by default ‘y’\n\ncut : float = None\n\nLower and upper y values for folding the horizon plot. Default for each chromosome is a third of the y range on each side of zero.\n\nquantile_span : float = None\n\nLower and upper quantiles of y values for each chromosome to include in the horizon plot. quantile_span=(0, 1) produces the same result as cut=None. Outlier values below and above this range is assigned separate darker colors.\n\nbeginzero : bool = True\n\nPad to make the x axis begin at zero, by default True\n\nbase : float = None\n\nY coordinate for lower edge of horizon plot, by default None. If None, the lower edge of ideogram is used.\n\nheight : float = None\n\nHeight of horizon plot in y coordinates, by default None. If None, the ideogram height is used.\n\ncolors : List[str] = ['#CCE2DF', '#59A9A8', '#374E9B', 'midnightblue', '#F2DE9A', '#DA8630', '#972428', 'darkred', '#D3D3D3']\n\ndescription, by default [ ‘#CCE2DF’, ‘#59A9A8’, ‘#374E9B’, ‘midnightblue’, ‘#F2DE9A’, ‘#DA8630’, ‘#972428’, ‘darkred’, ‘#D3D3D3’]\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.add_labels(\n    annot\n    base=None\n    min_height=None\n    zoom_base=None\n    zoom_min_height=None\n    bold=[]\n    italic=[]\n    colored=[]\n    framed=[]\n    filled=[]\n    highlight_color='deeppink'\n    pad=0\n    **kwargs\n)\nAdd text labels to the chromosome ideograms.\n\n\n\nannot : MutableSequence\n\nList of gene names or tuples of HGCN gene symbols and tuples with chromosome name, gene position, text label, and optionally text color, text size, and line color: (&lt;chrom&gt;, &lt;position&gt;, &lt;text&gt;, [&lt;textcolor&gt;,  [ [textsize] [&lt;linecolor&gt;] ] ]). Text size values are scaled to make the largest one 1 and font size is then computed as self.font_size * textsize. That way font sizes can only be smaller than the default.\n\nbase : float = None\n\nY coordinate for lower end of vertical line, by default None. If None, the upper edge of ideogram is used.\n\nmin_height : float = None\n\nMinimum length of vertical line in y coordinates, by default None. If None, half the ideogram height is used.\n\nbold : MutableSequence = []\n\nList of genes to highlight with bold text, by default []\n\nitalic : MutableSequence = []\n\nList of genes to highlight with italic text, by default []\n\ncolored : MutableSequence = []\n\nList of genes to highlight with color, by default []\n\nframed : MutableSequence = []\n\nList of genes to highlight with framed label, by default []\n\nfilled : MutableSequence = []\n\nList of genes to highlight with filled label, by default []\n\nhighlight_color :  = 'deeppink'\n\nColor used for highlighted genes, by default ‘deeppink’\n\npad : float = 0\n\nText padding, by default 0\n\nzoom_base : float = None\n\nY coordinate for lower end of vertical line on zoom axes, by default None. If None, the default value of font_size.\n\nzoom_min_height : float = None\n\nMinimum length of vertical line in y coordinate on zoom axes, by default None. If None, the default is the value of min_height..\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.add_legend(**kwargs)\nAdds a legend to the chromosome ideograms.\n\n\n\n****kwargs** : dict = {}\n\nKeyword arguments are passed to matplotlib’s legend. Defaults to {‘loc’: ‘center left’, ‘bbox_to_anchor’: (1.02, 0.5), ‘frameon’: False}.\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.add_segments(\n    annot\n    base=None\n    height=None\n    label=None\n    min_visible_width=200000\n    **kwargs\n)\nAdd segments (rectangles) to the chromosome ideograms.\n\n\n\nannot : MutableSequence\n\nList of tuples with chromosome name, start and end positions of each segment: (&lt;chrom&gt;, &lt;start&gt;, &lt;end&gt;, [&lt;alpha&gt;])\n\nbase : float = None\n\nY coordinate for lower edge of rectangles, by default None. If None, the lower edge of ideogram is used.\n\nheight : float = None\n\nHeight of rectangles in y coordinates, by default None. If None, the ideogram height is used.\n\nlabel : str = None\n\nLabel for plot legend, by default None\n\nmin_visible_width : int = 200000\n\nMinimum with of rendered rectangles ensuring that very short segments remain visible, by default 200000\n\n****kwargs** : dict = {}\n\nAdditional keyword arguments for matplotlib.patches. Rectangle (defaults to {facecolor=‘black’, edgecolor=‘none’})\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.add_vlines(\n    step=1000000\n    color='black'\n    linewidth=0.1\n    zorder=100\n    **kwargs\n)\nAdds vertical lines to the chromosome ideograms.\n\n\n\nstep : int = 1000000\n\nNumber of bases between lines, by default 1000000\n\ncolor : str = 'black'\n\nColor of lines, by default ‘black’\n\nlinewidth : float = 0.1\n\nWidth of lines, by default 0.1\n\nzorder : float = 100\n\nzorder of lines, by default 100\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.annotate(\n    xy=None\n    testxy=None\n    text=None\n    chrom=None\n    ax=None\n    wrap=30\n    **kwargs\n)\nDraws an annotation with an arrow to a point from a text box.\n\n\n\nxy : tuple = None\n\nCoordinate to point to as a tuple of chromosome position and y plotting coordinate\n\ntestxy : tuple = None\n\nCoordinate to text box as a tuple of chromosome position and y plotting coordinate\n\ntext : str = None\n\nText for text box\n\nchrom : str = None\n\nChromosome to annotate, by default the first or only chromosome in the plot\n\nax : matplotlib.axes.Axes = None\n\nAxis with the point the arrow points to, by default the axis for the chromosome ideogram.\n\nwrap : int = 30\n\nLine wrap for text box, by default 30\n\nkwargs : dict = {}\n\nAdditional keyword arguments passed to matplotlib’s annotate\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.draw_chromosomes(\n    base=4\n    height=2\n    facecolor='#EBEAEA'\n    edgecolor='black'\n    linewidth=0.7\n    **kwargs\n)\nDraws chromosome ideograms.\n\n\n\nbase : float = 4\n\nPlacement of ideogram lower edge on y-axis scale, by default 4\n\nheight : float = 2\n\nHeight of ideogram on y-axis scale, by default 2\n\nfacecolor : str = '#EBEAEA'\n\nIdeogram fill color, by default ‘#EBEAEA’\n\nedgecolor : str = 'black'\n\nIdeogram edge color, by default ‘black’\n\nlinewidth : float = 0.7\n\nIdeogram edge width, by default 0.7\n\n****kwargs** : dict = {}\n\nAdditional keyword arguments for matplotlib.patches.Rectangle\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.draw_text(\n    coord\n    x_pos\n    y_pos\n    text\n    textcolor\n    fontsize\n    linecolor\n    ax=None\n    y_line_bottom=0\n    highlight=None\n    **kwargs\n)\nDraws text with a line pointing to a position on the y-axis.\n\n\n\ncoord : float\n\nCoordonate of annotation\n\nx_pos : float\n\nX-axis position of text\n\ny_pos : float\n\nY-axis position of text\n\ntext : str\n\nText to display\n\ntextcolor : str\n\nText color, by default ‘black’\n\nlinecolor : str\n\nLine color, by default ‘lightgray’\n\nax : matplotlib.axes.Axes = None\n\nMatplotlib axes, by default None\n\ny_line_bottom : float = 0\n\ny coordinate for bottom of line, by default 0\n\nhighlight : dict = None\n\nDictionary for styling text labels, by default None\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.get_polygon(text, x_pos, y_pos, ax, pad=0)\nComputes polygon for rotated text label.\n\n\n\ntext : str\n\nText to display\n\nx_pos : int\n\nX-axis position\n\ny_pos : float\n\nY-axis position\n\nax : matplotlib.axes.Axes\n\nMatplotlib axes\n\npad :  = 0\n\nText padding, by default 0\n\n\n\n\n\n\n : matplotlib.patches.Polygon\n\nMaplotlib polygon object\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.map_fun(\n    fun\n    data=None\n    ch='chrom'\n    yaxis=(0.5, 3.5)\n    **kwargs\n)\nMap a plotting function like seaborn.scatterplot to each ideogram panel (axis).\n\n\n\nfun : Callable\n\nFunction to apply to each ideogram panel (E.g. seaborn.scatterplot).\n\ndata : pd.DataFrame = None\n\nData frame with with data for x and y coordinates by chromsome.\n\nch :  = 'chrom'\n\nName of data frame column holding chromosome names, by default ‘chrom’\n\nx : str\n\nName of data frame column holding x coordinates, by default ‘x’\n\ny : str\n\nName of data frame column holding y coordinates, by default ‘y’\n\nyaxis : tuple = (0.5, 3.5)\n\nY interval of ideogram panel axis ideogram to map data to, by default (0.5, 3.5)\n\n****kwargs** : dict = {}\n\nAdditional keyword arguments are passed to the plotting function as keyword arguments.\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.map_method(\n    method\n    data=None\n    ch='chrom'\n    yaxis=(0.5, 3.5)\n    **kwargs\n)\nMap a matplotib axes method like plot and scatter to each ideogram panel (axis).\n\n\n\nmethod : Callable\n\nMethod of matplotib.axes.Axes to apply to each ideogram panel (E.g. Axes.scatter).\n\ndata : pd.DataFrame = None\n\nData frame with with data for x and y coordinates by chromsome\n\nch : str = 'chrom'\n\nName of data frame column holding chromosome names, by default ‘chrom’\n\nx : str\n\nName of data frame column holding x coordinates, by default ‘x’\n\ny : str\n\nName of data frame column holding y coordinates, by default ‘y’\n\nyaxis : tuple = (0.5, 3.5)\n\nY interval of ideogram panel axis ideogram to map data to, by default (0.5, 3.5)\n\n****kwargs** : dict = {}\n\nAdditional keyword arguments are passed to the plotting function as keyword arguments.\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.map_y(y, ax, bottom=0, top=1)\nMaps y-axis values from user-specified ylim to actual plotting coordinates.\n\n\n\ny : float\n\nY-axis value\n\nax : matplotlib.axes.Axes\n\nMatplotlib axes object\n\n\n\n\n\n\n : float\n\ny-axis value in plotting coordinates",
    "crumbs": [
      "Gene plots",
      "GenomeIdeogram"
    ]
  },
  {
    "objectID": "api/GenomeIdeogram.html#methods",
    "href": "api/GenomeIdeogram.html#methods",
    "title": "GenomeIdeogram",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_horizon\nAdds a horizon plot to the chromosome ideograms.\n\n\nadd_labels\nAdd text labels to the chromosome ideograms.\n\n\nadd_legend\nAdds a legend to the chromosome ideograms.\n\n\nadd_segments\nAdd segments (rectangles) to the chromosome ideograms.\n\n\nadd_vlines\nAdds vertical lines to the chromosome ideograms.\n\n\nannotate\nDraws an annotation with an arrow to a point from a text box.\n\n\ndraw_chromosomes\nDraws chromosome ideograms.\n\n\ndraw_text\nDraws text with a line pointing to a position on the y-axis.\n\n\nget_polygon\nComputes polygon for rotated text label.\n\n\nmap_fun\nMap a plotting function like seaborn.scatterplot to each ideogram panel (axis).\n\n\nmap_method\nMap a matplotib axes method like plot and scatter to each ideogram\n\n\nmap_y\nMaps y-axis values from user-specified ylim to actual plotting coordinates.\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.add_horizon(\n    data=None\n    ch='chrom'\n    y='y'\n    x='x'\n    cut=None\n    quantile_span=None\n    beginzero=True\n    base=None\n    height=None\n    colors=['#CCE2DF', '#59A9A8', '#374E9B', 'midnightblue', '#F2DE9A', '#DA8630', '#972428', 'darkred', '#D3D3D3']\n    **kwargs\n)\nAdds a horizon plot to the chromosome ideograms.\n\n\n\ndata : pd.DataFrame = None\n\nPandas DataFrame with sorted x and y data grouped by chromosome\n\nch : str = 'chrom'\n\nName of data frame column holding chromosome names, by default ‘chrom’\n\nx : str = 'x'\n\nName of data frame column holding x coordinates, by default ‘x’\n\ny : str = 'y'\n\nName of data frame column holding y coordinates, by default ‘y’\n\ncut : float = None\n\nLower and upper y values for folding the horizon plot. Default for each chromosome is a third of the y range on each side of zero.\n\nquantile_span : float = None\n\nLower and upper quantiles of y values for each chromosome to include in the horizon plot. quantile_span=(0, 1) produces the same result as cut=None. Outlier values below and above this range is assigned separate darker colors.\n\nbeginzero : bool = True\n\nPad to make the x axis begin at zero, by default True\n\nbase : float = None\n\nY coordinate for lower edge of horizon plot, by default None. If None, the lower edge of ideogram is used.\n\nheight : float = None\n\nHeight of horizon plot in y coordinates, by default None. If None, the ideogram height is used.\n\ncolors : List[str] = ['#CCE2DF', '#59A9A8', '#374E9B', 'midnightblue', '#F2DE9A', '#DA8630', '#972428', 'darkred', '#D3D3D3']\n\ndescription, by default [ ‘#CCE2DF’, ‘#59A9A8’, ‘#374E9B’, ‘midnightblue’, ‘#F2DE9A’, ‘#DA8630’, ‘#972428’, ‘darkred’, ‘#D3D3D3’]\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.add_labels(\n    annot\n    base=None\n    min_height=None\n    zoom_base=None\n    zoom_min_height=None\n    bold=[]\n    italic=[]\n    colored=[]\n    framed=[]\n    filled=[]\n    highlight_color='deeppink'\n    pad=0\n    **kwargs\n)\nAdd text labels to the chromosome ideograms.\n\n\n\nannot : MutableSequence\n\nList of gene names or tuples of HGCN gene symbols and tuples with chromosome name, gene position, text label, and optionally text color, text size, and line color: (&lt;chrom&gt;, &lt;position&gt;, &lt;text&gt;, [&lt;textcolor&gt;,  [ [textsize] [&lt;linecolor&gt;] ] ]). Text size values are scaled to make the largest one 1 and font size is then computed as self.font_size * textsize. That way font sizes can only be smaller than the default.\n\nbase : float = None\n\nY coordinate for lower end of vertical line, by default None. If None, the upper edge of ideogram is used.\n\nmin_height : float = None\n\nMinimum length of vertical line in y coordinates, by default None. If None, half the ideogram height is used.\n\nbold : MutableSequence = []\n\nList of genes to highlight with bold text, by default []\n\nitalic : MutableSequence = []\n\nList of genes to highlight with italic text, by default []\n\ncolored : MutableSequence = []\n\nList of genes to highlight with color, by default []\n\nframed : MutableSequence = []\n\nList of genes to highlight with framed label, by default []\n\nfilled : MutableSequence = []\n\nList of genes to highlight with filled label, by default []\n\nhighlight_color :  = 'deeppink'\n\nColor used for highlighted genes, by default ‘deeppink’\n\npad : float = 0\n\nText padding, by default 0\n\nzoom_base : float = None\n\nY coordinate for lower end of vertical line on zoom axes, by default None. If None, the default value of font_size.\n\nzoom_min_height : float = None\n\nMinimum length of vertical line in y coordinate on zoom axes, by default None. If None, the default is the value of min_height..\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.add_legend(**kwargs)\nAdds a legend to the chromosome ideograms.\n\n\n\n****kwargs** : dict = {}\n\nKeyword arguments are passed to matplotlib’s legend. Defaults to {‘loc’: ‘center left’, ‘bbox_to_anchor’: (1.02, 0.5), ‘frameon’: False}.\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.add_segments(\n    annot\n    base=None\n    height=None\n    label=None\n    min_visible_width=200000\n    **kwargs\n)\nAdd segments (rectangles) to the chromosome ideograms.\n\n\n\nannot : MutableSequence\n\nList of tuples with chromosome name, start and end positions of each segment: (&lt;chrom&gt;, &lt;start&gt;, &lt;end&gt;, [&lt;alpha&gt;])\n\nbase : float = None\n\nY coordinate for lower edge of rectangles, by default None. If None, the lower edge of ideogram is used.\n\nheight : float = None\n\nHeight of rectangles in y coordinates, by default None. If None, the ideogram height is used.\n\nlabel : str = None\n\nLabel for plot legend, by default None\n\nmin_visible_width : int = 200000\n\nMinimum with of rendered rectangles ensuring that very short segments remain visible, by default 200000\n\n****kwargs** : dict = {}\n\nAdditional keyword arguments for matplotlib.patches. Rectangle (defaults to {facecolor=‘black’, edgecolor=‘none’})\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.add_vlines(\n    step=1000000\n    color='black'\n    linewidth=0.1\n    zorder=100\n    **kwargs\n)\nAdds vertical lines to the chromosome ideograms.\n\n\n\nstep : int = 1000000\n\nNumber of bases between lines, by default 1000000\n\ncolor : str = 'black'\n\nColor of lines, by default ‘black’\n\nlinewidth : float = 0.1\n\nWidth of lines, by default 0.1\n\nzorder : float = 100\n\nzorder of lines, by default 100\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.annotate(\n    xy=None\n    testxy=None\n    text=None\n    chrom=None\n    ax=None\n    wrap=30\n    **kwargs\n)\nDraws an annotation with an arrow to a point from a text box.\n\n\n\nxy : tuple = None\n\nCoordinate to point to as a tuple of chromosome position and y plotting coordinate\n\ntestxy : tuple = None\n\nCoordinate to text box as a tuple of chromosome position and y plotting coordinate\n\ntext : str = None\n\nText for text box\n\nchrom : str = None\n\nChromosome to annotate, by default the first or only chromosome in the plot\n\nax : matplotlib.axes.Axes = None\n\nAxis with the point the arrow points to, by default the axis for the chromosome ideogram.\n\nwrap : int = 30\n\nLine wrap for text box, by default 30\n\nkwargs : dict = {}\n\nAdditional keyword arguments passed to matplotlib’s annotate\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.draw_chromosomes(\n    base=4\n    height=2\n    facecolor='#EBEAEA'\n    edgecolor='black'\n    linewidth=0.7\n    **kwargs\n)\nDraws chromosome ideograms.\n\n\n\nbase : float = 4\n\nPlacement of ideogram lower edge on y-axis scale, by default 4\n\nheight : float = 2\n\nHeight of ideogram on y-axis scale, by default 2\n\nfacecolor : str = '#EBEAEA'\n\nIdeogram fill color, by default ‘#EBEAEA’\n\nedgecolor : str = 'black'\n\nIdeogram edge color, by default ‘black’\n\nlinewidth : float = 0.7\n\nIdeogram edge width, by default 0.7\n\n****kwargs** : dict = {}\n\nAdditional keyword arguments for matplotlib.patches.Rectangle\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.draw_text(\n    coord\n    x_pos\n    y_pos\n    text\n    textcolor\n    fontsize\n    linecolor\n    ax=None\n    y_line_bottom=0\n    highlight=None\n    **kwargs\n)\nDraws text with a line pointing to a position on the y-axis.\n\n\n\ncoord : float\n\nCoordonate of annotation\n\nx_pos : float\n\nX-axis position of text\n\ny_pos : float\n\nY-axis position of text\n\ntext : str\n\nText to display\n\ntextcolor : str\n\nText color, by default ‘black’\n\nlinecolor : str\n\nLine color, by default ‘lightgray’\n\nax : matplotlib.axes.Axes = None\n\nMatplotlib axes, by default None\n\ny_line_bottom : float = 0\n\ny coordinate for bottom of line, by default 0\n\nhighlight : dict = None\n\nDictionary for styling text labels, by default None\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.get_polygon(text, x_pos, y_pos, ax, pad=0)\nComputes polygon for rotated text label.\n\n\n\ntext : str\n\nText to display\n\nx_pos : int\n\nX-axis position\n\ny_pos : float\n\nY-axis position\n\nax : matplotlib.axes.Axes\n\nMatplotlib axes\n\npad :  = 0\n\nText padding, by default 0\n\n\n\n\n\n\n : matplotlib.patches.Polygon\n\nMaplotlib polygon object\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.map_fun(\n    fun\n    data=None\n    ch='chrom'\n    yaxis=(0.5, 3.5)\n    **kwargs\n)\nMap a plotting function like seaborn.scatterplot to each ideogram panel (axis).\n\n\n\nfun : Callable\n\nFunction to apply to each ideogram panel (E.g. seaborn.scatterplot).\n\ndata : pd.DataFrame = None\n\nData frame with with data for x and y coordinates by chromsome.\n\nch :  = 'chrom'\n\nName of data frame column holding chromosome names, by default ‘chrom’\n\nx : str\n\nName of data frame column holding x coordinates, by default ‘x’\n\ny : str\n\nName of data frame column holding y coordinates, by default ‘y’\n\nyaxis : tuple = (0.5, 3.5)\n\nY interval of ideogram panel axis ideogram to map data to, by default (0.5, 3.5)\n\n****kwargs** : dict = {}\n\nAdditional keyword arguments are passed to the plotting function as keyword arguments.\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.map_method(\n    method\n    data=None\n    ch='chrom'\n    yaxis=(0.5, 3.5)\n    **kwargs\n)\nMap a matplotib axes method like plot and scatter to each ideogram panel (axis).\n\n\n\nmethod : Callable\n\nMethod of matplotib.axes.Axes to apply to each ideogram panel (E.g. Axes.scatter).\n\ndata : pd.DataFrame = None\n\nData frame with with data for x and y coordinates by chromsome\n\nch : str = 'chrom'\n\nName of data frame column holding chromosome names, by default ‘chrom’\n\nx : str\n\nName of data frame column holding x coordinates, by default ‘x’\n\ny : str\n\nName of data frame column holding y coordinates, by default ‘y’\n\nyaxis : tuple = (0.5, 3.5)\n\nY interval of ideogram panel axis ideogram to map data to, by default (0.5, 3.5)\n\n****kwargs** : dict = {}\n\nAdditional keyword arguments are passed to the plotting function as keyword arguments.\n\n\n\n\n\n\ngeneinfo.plot.GenomeIdeogram.map_y(y, ax, bottom=0, top=1)\nMaps y-axis values from user-specified ylim to actual plotting coordinates.\n\n\n\ny : float\n\nY-axis value\n\nax : matplotlib.axes.Axes\n\nMatplotlib axes object\n\n\n\n\n\n\n : float\n\ny-axis value in plotting coordinates",
    "crumbs": [
      "Gene plots",
      "GenomeIdeogram"
    ]
  },
  {
    "objectID": "api/show_go_dag_enrichment_results.html",
    "href": "api/show_go_dag_enrichment_results.html",
    "title": "show_go_dag_enrichment_results",
    "section": "",
    "text": "geneinfo.ontology.show_go_dag_enrichment_results(results)\nDisplays a GO enrichment analysis results.\n\n\n\nresults : Union[List[GOEnrichmentRecord], pd.Series]\n\nList or Series of GO result objejcts from obj column in the pd.DataFrame returned by go_enrichment().\n\n\n\n\n\ngene_list = ['TP53', 'BRCA1', 'BRCA2', 'EGFR', 'KRAS', 'PTEN', \n             'CDH1', 'ATM', 'CHEK2', 'PALB2']\nresults = go_enrichment(gene_list, taxid=9606, alpha=0.05)\nshow_go_dag_enrichment_results(results.obj)",
    "crumbs": [
      "GO graphs",
      "show_go_dag_enrichment_results"
    ]
  },
  {
    "objectID": "api/show_go_dag_enrichment_results.html#parameters",
    "href": "api/show_go_dag_enrichment_results.html#parameters",
    "title": "show_go_dag_enrichment_results",
    "section": "",
    "text": "results : Union[List[GOEnrichmentRecord], pd.Series]\n\nList or Series of GO result objejcts from obj column in the pd.DataFrame returned by go_enrichment().",
    "crumbs": [
      "GO graphs",
      "show_go_dag_enrichment_results"
    ]
  },
  {
    "objectID": "api/show_go_dag_enrichment_results.html#examples",
    "href": "api/show_go_dag_enrichment_results.html#examples",
    "title": "show_go_dag_enrichment_results",
    "section": "",
    "text": "gene_list = ['TP53', 'BRCA1', 'BRCA2', 'EGFR', 'KRAS', 'PTEN', \n             'CDH1', 'ATM', 'CHEK2', 'PALB2']\nresults = go_enrichment(gene_list, taxid=9606, alpha=0.05)\nshow_go_dag_enrichment_results(results.obj)",
    "crumbs": [
      "GO graphs",
      "show_go_dag_enrichment_results"
    ]
  },
  {
    "objectID": "api/show_go_dag_for_terms.html",
    "href": "api/show_go_dag_for_terms.html",
    "title": "show_go_dag_for_terms",
    "section": "",
    "text": "geneinfo.ontology.show_go_dag_for_terms(terms, add_relationships=True)\nDisplay GO graph for a list of GO terms.\n\n\n\nterms : Union[list, pd.Series]\n\nGo terms\n\nadd_relationships : bool = True\n\nAdd edges representing relationships between GO terms, by default True",
    "crumbs": [
      "GO graphs",
      "show_go_dag_for_terms"
    ]
  },
  {
    "objectID": "api/show_go_dag_for_terms.html#parameters",
    "href": "api/show_go_dag_for_terms.html#parameters",
    "title": "show_go_dag_for_terms",
    "section": "",
    "text": "terms : Union[list, pd.Series]\n\nGo terms\n\nadd_relationships : bool = True\n\nAdd edges representing relationships between GO terms, by default True",
    "crumbs": [
      "GO graphs",
      "show_go_dag_for_terms"
    ]
  },
  {
    "objectID": "api/gene_info.html",
    "href": "api/gene_info.html",
    "title": "gene_info",
    "section": "",
    "text": "geneinfo.information.gene_info(query, scopes='hgnc')\nDisplays HTML formatted information about one or more human genes.\n\n\n\nquery : Union[str, List[str]]\n\nGene symbol or list of gene symbols\n\nscopes : optional = 'hgnc'\n\nScopes for information search, by default ‘hgnc’",
    "crumbs": [
      "Gene information",
      "gene_info"
    ]
  },
  {
    "objectID": "api/gene_info.html#parameters",
    "href": "api/gene_info.html#parameters",
    "title": "gene_info",
    "section": "",
    "text": "query : Union[str, List[str]]\n\nGene symbol or list of gene symbols\n\nscopes : optional = 'hgnc'\n\nScopes for information search, by default ‘hgnc’",
    "crumbs": [
      "Gene information",
      "gene_info"
    ]
  },
  {
    "objectID": "api/go_term2name.html",
    "href": "api/go_term2name.html",
    "title": "go_term2name",
    "section": "",
    "text": "geneinfo.ontology.go_term2name(term)\nConverts a GO term to its name.\n\n\n\nterm : str\n\nGO term\n\n\n\n\n\n\n : str\n\nGO term name.",
    "crumbs": [
      "GO information",
      "go_term2name"
    ]
  },
  {
    "objectID": "api/go_term2name.html#parameters",
    "href": "api/go_term2name.html#parameters",
    "title": "go_term2name",
    "section": "",
    "text": "term : str\n\nGO term",
    "crumbs": [
      "GO information",
      "go_term2name"
    ]
  },
  {
    "objectID": "api/go_term2name.html#returns",
    "href": "api/go_term2name.html#returns",
    "title": "go_term2name",
    "section": "",
    "text": ": str\n\nGO term name.",
    "crumbs": [
      "GO information",
      "go_term2name"
    ]
  },
  {
    "objectID": "api/show_string_network.html",
    "href": "api/show_string_network.html",
    "title": "show_string_network",
    "section": "",
    "text": "geneinfo.string.show_string_network(my_genes, nodes=10)\nDisplay STRING network for a list of genes.\n\n\n\nmy_genes : Union[list, str]\n\nList of gene symbols\n\nnodes : int = 10\n\nNumber of nodes to show, by default 10",
    "crumbs": [
      "STRING networks",
      "show_string_network"
    ]
  },
  {
    "objectID": "api/show_string_network.html#parameters",
    "href": "api/show_string_network.html#parameters",
    "title": "show_string_network",
    "section": "",
    "text": "my_genes : Union[list, str]\n\nList of gene symbols\n\nnodes : int = 10\n\nNumber of nodes to show, by default 10",
    "crumbs": [
      "STRING networks",
      "show_string_network"
    ]
  },
  {
    "objectID": "api/string_network_table.html",
    "href": "api/string_network_table.html",
    "title": "string_network_table",
    "section": "",
    "text": "geneinfo.string.string_network_table(my_genes, nodes=10)\nRetrieves STRING network for a list of genes and returns it as a pandas.DataFrame.\n\n\n\nmy_genes : list\n\nList of gene symbols\n\nnodes : int = 10\n\nNumber of nodes to show, by default 10\n\n\n\n\n\n\n : pd.DataFrame\n\nSTRING network information for specified genes.",
    "crumbs": [
      "STRING networks",
      "string_network_table"
    ]
  },
  {
    "objectID": "api/string_network_table.html#parameters",
    "href": "api/string_network_table.html#parameters",
    "title": "string_network_table",
    "section": "",
    "text": "my_genes : list\n\nList of gene symbols\n\nnodes : int = 10\n\nNumber of nodes to show, by default 10",
    "crumbs": [
      "STRING networks",
      "string_network_table"
    ]
  },
  {
    "objectID": "api/string_network_table.html#returns",
    "href": "api/string_network_table.html#returns",
    "title": "string_network_table",
    "section": "",
    "text": ": pd.DataFrame\n\nSTRING network information for specified genes.",
    "crumbs": [
      "STRING networks",
      "string_network_table"
    ]
  },
  {
    "objectID": "api/ensembl2symbol.html",
    "href": "api/ensembl2symbol.html",
    "title": "ensembl2symbol",
    "section": "",
    "text": "geneinfo.information.ensembl2symbol(ensembl_id)\nConverts ENSEMBL ID to gene HGCN gene symbol\n\n\n\nensembl_id : str\n\nENSEMBL ID\n\n\n\n\n\n\n : str\n\nHGCN gene symbol\n\n\n\n\n\n\n: [](~geneinfo.NotFound)\n\nRaises exception if no HGCN gene symbol can be found.",
    "crumbs": [
      "ID conversion",
      "ensembl2symbol"
    ]
  },
  {
    "objectID": "api/ensembl2symbol.html#parameters",
    "href": "api/ensembl2symbol.html#parameters",
    "title": "ensembl2symbol",
    "section": "",
    "text": "ensembl_id : str\n\nENSEMBL ID",
    "crumbs": [
      "ID conversion",
      "ensembl2symbol"
    ]
  },
  {
    "objectID": "api/ensembl2symbol.html#returns",
    "href": "api/ensembl2symbol.html#returns",
    "title": "ensembl2symbol",
    "section": "",
    "text": ": str\n\nHGCN gene symbol",
    "crumbs": [
      "ID conversion",
      "ensembl2symbol"
    ]
  },
  {
    "objectID": "api/ensembl2symbol.html#raises",
    "href": "api/ensembl2symbol.html#raises",
    "title": "ensembl2symbol",
    "section": "",
    "text": ": [](~geneinfo.NotFound)\n\nRaises exception if no HGCN gene symbol can be found.",
    "crumbs": [
      "ID conversion",
      "ensembl2symbol"
    ]
  },
  {
    "objectID": "api/download_data.html",
    "href": "api/download_data.html",
    "title": "download_data",
    "section": "",
    "text": "download_data\ngeneinfo.ontology.download_data(prt=sys.stdout)",
    "crumbs": [
      "GO enrichment",
      "download_data"
    ]
  },
  {
    "objectID": "api/get_terms_for_go_regex.html",
    "href": "api/get_terms_for_go_regex.html",
    "title": "get_terms_for_go_regex",
    "section": "",
    "text": "geneinfo.ontology.get_terms_for_go_regex(regex, taxid=9606, add_children=False)\nGet GO terms for terms matching a regular expression in their description string.\n\n\n\nregex : str\n\nRegular expression to match GO term descriptions.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)\n\nadd_children : bool = False\n\nAdd GO terms nested under GO terms found, by default False\n\n\n\n\n\n\n : list\n\nList of GO terms.",
    "crumbs": [
      "GO information",
      "get_terms_for_go_regex"
    ]
  },
  {
    "objectID": "api/get_terms_for_go_regex.html#parameters",
    "href": "api/get_terms_for_go_regex.html#parameters",
    "title": "get_terms_for_go_regex",
    "section": "",
    "text": "regex : str\n\nRegular expression to match GO term descriptions.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)\n\nadd_children : bool = False\n\nAdd GO terms nested under GO terms found, by default False",
    "crumbs": [
      "GO information",
      "get_terms_for_go_regex"
    ]
  },
  {
    "objectID": "api/get_terms_for_go_regex.html#returns",
    "href": "api/get_terms_for_go_regex.html#returns",
    "title": "get_terms_for_go_regex",
    "section": "",
    "text": ": list\n\nList of GO terms.",
    "crumbs": [
      "GO information",
      "get_terms_for_go_regex"
    ]
  },
  {
    "objectID": "api/gene_coords_region.html",
    "href": "api/gene_coords_region.html",
    "title": "gene_coords_region",
    "section": "",
    "text": "geneinfo.information.gene_coords_region(\n    chrom=None\n    start=None\n    end=None\n    assembly=None\n    as_dataframe=False\n)\nGets gene structure information for genes in a chromosomal region.\n\n\n\nchrom :  = None\n\nChromosome identifier\n\nstart :  = None\n\nStart of region\n\nend :  = None\n\nEnd of region (end base not included)\n\nassembly :  = None\n\nGenome assembly as USCS genome identifier. E.g. hg38 or rheMac10\n\nas_dataframe :  = False\n\nReturn dataframe instead of list of tuples, by default False\n\n\n\n\n\n\n : \n\nList of gene information. Each gene is a tuple with the following elements: - gene name - gene start - gene end - list of list of exons (start, end) for a transcript",
    "crumbs": [
      "Gene coordinates",
      "gene_coords_region"
    ]
  },
  {
    "objectID": "api/gene_coords_region.html#parameters",
    "href": "api/gene_coords_region.html#parameters",
    "title": "gene_coords_region",
    "section": "",
    "text": "chrom :  = None\n\nChromosome identifier\n\nstart :  = None\n\nStart of region\n\nend :  = None\n\nEnd of region (end base not included)\n\nassembly :  = None\n\nGenome assembly as USCS genome identifier. E.g. hg38 or rheMac10\n\nas_dataframe :  = False\n\nReturn dataframe instead of list of tuples, by default False",
    "crumbs": [
      "Gene coordinates",
      "gene_coords_region"
    ]
  },
  {
    "objectID": "api/gene_coords_region.html#returns",
    "href": "api/gene_coords_region.html#returns",
    "title": "gene_coords_region",
    "section": "",
    "text": ": \n\nList of gene information. Each gene is a tuple with the following elements: - gene name - gene start - gene end - list of list of exons (start, end) for a transcript",
    "crumbs": [
      "Gene coordinates",
      "gene_coords_region"
    ]
  },
  {
    "objectID": "api/gene_info_region.html",
    "href": "api/gene_info_region.html",
    "title": "gene_info_region",
    "section": "",
    "text": "geneinfo.information.gene_info_region(\n    chrom\n    window_start\n    window_end\n    assembly=None\n)\nDisplays HTML formatted information about genes in a chromosomal region.\n\n\n\nchrom : str\n\nChromosome identifier\n\nwindow_start : int\n\nStart of region\n\nwindow_end : int\n\nEnd of region (end base not included)\n\nassembly : str = None\n\nGenome assembly, e.g. ‘hg38’ or ‘rheMac10’",
    "crumbs": [
      "Gene information",
      "gene_info_region"
    ]
  },
  {
    "objectID": "api/gene_info_region.html#parameters",
    "href": "api/gene_info_region.html#parameters",
    "title": "gene_info_region",
    "section": "",
    "text": "chrom : str\n\nChromosome identifier\n\nwindow_start : int\n\nStart of region\n\nwindow_end : int\n\nEnd of region (end base not included)\n\nassembly : str = None\n\nGenome assembly, e.g. ‘hg38’ or ‘rheMac10’",
    "crumbs": [
      "Gene information",
      "gene_info_region"
    ]
  },
  {
    "objectID": "api/ChromIdeogram.html",
    "href": "api/ChromIdeogram.html",
    "title": "ChromIdeogram",
    "section": "",
    "text": "geneinfo.plot.ChromIdeogram(\n    self\n    chrom\n    assembly\n    axes_height_inches=2\n    axes_width_inches=12\n    hspace=0.3\n    ylim=(0, 10)\n    zooms=[]\n    zoom_font_size=None\n    zoom_height_ratio=1.0\n    zoom_effect_color='lightgray'\n    zoom_effect_alpha=0.3\n    wspace=0.1\n    font_size=4\n)\nChild class of GenomeIdeogram for plotting single chromosome ideograms.\n\n\n\n\n\nName\nDescription\n\n\n\n\nzoom_effect\nax1 : the main Axes\n\n\n\n\n\ngeneinfo.plot.ChromIdeogram.zoom_effect(ax1, ax2, **kwargs)\nax1 : the main Axes ax1 : the zoomed Axes\nSimilar to zoom_effect01. The xmin & xmax will be taken from the ax1.viewLim.",
    "crumbs": [
      "Gene plots",
      "ChromIdeogram"
    ]
  },
  {
    "objectID": "api/ChromIdeogram.html#methods",
    "href": "api/ChromIdeogram.html#methods",
    "title": "ChromIdeogram",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nzoom_effect\nax1 : the main Axes\n\n\n\n\n\ngeneinfo.plot.ChromIdeogram.zoom_effect(ax1, ax2, **kwargs)\nax1 : the main Axes ax1 : the zoomed Axes\nSimilar to zoom_effect01. The xmin & xmax will be taken from the ax1.viewLim.",
    "crumbs": [
      "Gene plots",
      "ChromIdeogram"
    ]
  },
  {
    "objectID": "api/stairs.html",
    "href": "api/stairs.html",
    "title": "stairs",
    "section": "",
    "text": "stairs\ngeneinfo.utils.stairs(df, start='start', end='end', pos='pos', endtrim=0)\nTurn a df with start, end into one with pos to plot as stairs",
    "crumbs": [
      "Utilities",
      "stairs"
    ]
  },
  {
    "objectID": "api/go_info.html",
    "href": "api/go_info.html",
    "title": "go_info",
    "section": "",
    "text": "geneinfo.ontology.go_info(terms)\nDisplays HML formatted information about the given GO terms.\n\n\n\nterms : Union[str, List[str]]\n\nA GO term or list of GO terms to display information for.",
    "crumbs": [
      "GO information",
      "go_info"
    ]
  },
  {
    "objectID": "api/go_info.html#parameters",
    "href": "api/go_info.html#parameters",
    "title": "go_info",
    "section": "",
    "text": "terms : Union[str, List[str]]\n\nA GO term or list of GO terms to display information for.",
    "crumbs": [
      "GO information",
      "go_info"
    ]
  },
  {
    "objectID": "api/get_genes_for_go_regex.html",
    "href": "api/get_genes_for_go_regex.html",
    "title": "get_genes_for_go_regex",
    "section": "",
    "text": "geneinfo.ontology.get_genes_for_go_regex(regex, taxid=9606)\nGet gene information for GO terms matching a regular expression in their description string.\n\n\n\nregex : str\n\nRegular expression to match GO term descriptions.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)\n\n\n\n\n\n\n : pd.DataFrame\n\nColumns: symbol, name, chrom, start, end.",
    "crumbs": [
      "Gene annotation",
      "get_genes_for_go_regex"
    ]
  },
  {
    "objectID": "api/get_genes_for_go_regex.html#parameters",
    "href": "api/get_genes_for_go_regex.html#parameters",
    "title": "get_genes_for_go_regex",
    "section": "",
    "text": "regex : str\n\nRegular expression to match GO term descriptions.\n\ntaxid : int = 9606\n\nNCBI taxonomy ID, by default 9606 (which is human)",
    "crumbs": [
      "Gene annotation",
      "get_genes_for_go_regex"
    ]
  },
  {
    "objectID": "api/get_genes_for_go_regex.html#returns",
    "href": "api/get_genes_for_go_regex.html#returns",
    "title": "get_genes_for_go_regex",
    "section": "",
    "text": ": pd.DataFrame\n\nColumns: symbol, name, chrom, start, end.",
    "crumbs": [
      "Gene annotation",
      "get_genes_for_go_regex"
    ]
  },
  {
    "objectID": "api/ensembl2ncbi.html",
    "href": "api/ensembl2ncbi.html",
    "title": "ensembl2ncbi",
    "section": "",
    "text": "geneinfo.information.ensembl2ncbi(ensembl_id)\nConverts ENSEMBL ID to gene NCBI ID\n\n\n\nensembl_id : \n\nENSEMBL ID\n\n\n\n\n\n\n : \n\nNCBI ID\n\n\n\n\n\n\n: [](~geneinfo.NotFound)\n\nRaises exception if no NCBI ID can be found.",
    "crumbs": [
      "ID conversion",
      "ensembl2ncbi"
    ]
  },
  {
    "objectID": "api/ensembl2ncbi.html#parameters",
    "href": "api/ensembl2ncbi.html#parameters",
    "title": "ensembl2ncbi",
    "section": "",
    "text": "ensembl_id : \n\nENSEMBL ID",
    "crumbs": [
      "ID conversion",
      "ensembl2ncbi"
    ]
  },
  {
    "objectID": "api/ensembl2ncbi.html#returns",
    "href": "api/ensembl2ncbi.html#returns",
    "title": "ensembl2ncbi",
    "section": "",
    "text": ": \n\nNCBI ID",
    "crumbs": [
      "ID conversion",
      "ensembl2ncbi"
    ]
  },
  {
    "objectID": "api/ensembl2ncbi.html#raises",
    "href": "api/ensembl2ncbi.html#raises",
    "title": "ensembl2ncbi",
    "section": "",
    "text": ": [](~geneinfo.NotFound)\n\nRaises exception if no NCBI ID can be found.",
    "crumbs": [
      "ID conversion",
      "ensembl2ncbi"
    ]
  },
  {
    "objectID": "api/go_name2term.html",
    "href": "api/go_name2term.html",
    "title": "go_name2term",
    "section": "",
    "text": "geneinfo.ontology.go_name2term(name)\nConverts a GO term name to its term.\n\n\n\nname : str\n\nGO term name\n\n\n\n\n\n\n : str\n\nGO term.",
    "crumbs": [
      "GO information",
      "go_name2term"
    ]
  },
  {
    "objectID": "api/go_name2term.html#parameters",
    "href": "api/go_name2term.html#parameters",
    "title": "go_name2term",
    "section": "",
    "text": "name : str\n\nGO term name",
    "crumbs": [
      "GO information",
      "go_name2term"
    ]
  },
  {
    "objectID": "api/go_name2term.html#returns",
    "href": "api/go_name2term.html#returns",
    "title": "go_name2term",
    "section": "",
    "text": ": str\n\nGO term.",
    "crumbs": [
      "GO information",
      "go_name2term"
    ]
  },
  {
    "objectID": "pages/go_info.html",
    "href": "pages/go_info.html",
    "title": "GO information",
    "section": "",
    "text": "import pandas as pd\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nimport geneinfo.ontology as go\ngo.email('your@email.com')\nclass left:\n    def __rlshift__(self, df):\n        \"Left align columns of data frame: df &lt;&lt; left()\"\n        left_aligned_df = df.style.set_properties(**{'text-align': 'left'})\n        left_aligned_df = left_aligned_df.set_table_styles(\n        [dict(selector = 'th', props=[('text-align', 'left')])])\n        display(left_aligned_df)\nNB: The first time you use the GO utilities, it will spend a very long time downloading data. If you do not want to wait that out in the notebook, you can execute this command in the folder where you store your notebooks:\nGet info for one or more GO terms:\ngo.go_info('GO:0000776')\n\nGO:0000776: kinetochore\nA multisubunit complex that is located at the centromeric region of DNA and provides an attachment point for the spindle microtubules.\ngo.go_info(['GO:0000776', 'GO:0005634'])\n\nGO:0000776: kinetochore\nA multisubunit complex that is located at the centromeric region of DNA and provides an attachment point for the spindle microtubules.\n\n\n\nGO:0005634: nucleus\nA membrane-bounded organelle of eukaryotic cells in which chromosomes are housed and replicated. In most cells, the nucleus contains all of the cell’s chromosomes except the organellar chromosomes, and is the site of RNA synthesis and processing. In some species, or in specialized cell types, RNA metabolism or DNA replication may be absent.\nGet GO terms for a one or more genes:\ngo_terms = go.get_go_terms_for_genes(['DYNLT3'])\ngo_terms[:10]\n\n10741    6990\nName: GeneID, dtype: int64\n\n\n['GO:0000776',\n 'GO:0005515',\n 'GO:0005634',\n 'GO:0005737',\n 'GO:0005868',\n 'GO:0007018',\n 'GO:0007346',\n 'GO:0042802',\n 'GO:0045505',\n 'GO:0045931']\nDescriptions for GO terms for one or more genes:\ngo.go_info(go.get_go_terms_for_genes(['DYNLT3']))\n\n10741    6990\nName: GeneID, dtype: int64\n\n\nGO:0000776: kinetochore\nA multisubunit complex that is located at the centromeric region of DNA and provides an attachment point for the spindle microtubules.\n\n\n\nGO:0005515: protein binding\nBinding to a protein.\n\n\n\nGO:0005634: nucleus\nA membrane-bounded organelle of eukaryotic cells in which chromosomes are housed and replicated. In most cells, the nucleus contains all of the cell’s chromosomes except the organellar chromosomes, and is the site of RNA synthesis and processing. In some species, or in specialized cell types, RNA metabolism or DNA replication may be absent.\n\n\n\nGO:0005737: cytoplasm\nThe contents of a cell excluding the plasma membrane and nucleus, but including other subcellular structures.\n\n\n\nGO:0005868: cytoplasmic dynein complex\nAny dynein complex with a homodimeric dynein heavy chain core that catalyzes movement along a microtubule. Cytoplasmic dynein complexes participate in many cytoplasmic transport activities in eukaryotes, such as mRNA localization, intermediate filament transport, nuclear envelope breakdown, apoptosis, transport of centrosomal proteins, mitotic spindle assembly, virus transport, kinetochore functions, and movement of signaling and spindle checkpoint proteins. Some complexes participate in intraflagellar transport. Subunits associated with the dynein heavy chain mediate association between dynein heavy chain and cargoes, and may include light chains and light intermediate chains.\n\n\n\nGO:0007018: microtubule-based movement\nA microtubule-based process that results in the movement of organelles, other microtubules, or other cellular components. Examples include motor-driven movement along microtubules and movement driven by polymerization or depolymerization of microtubules.\n\n\n\nGO:0007346: regulation of mitotic cell cycle\nAny process that modulates the rate or extent of progress through the mitotic cell cycle.\n\n\n\nGO:0042802: identical protein binding\nBinding to an identical protein or proteins.\n\n\n\nGO:0045505: dynein intermediate chain binding\nBinding to an intermediate chain of the dynein complex.\n\n\n\nGO:0045931: positive regulation of mitotic cell cycle\nAny process that activates or increases the rate or extent of progression through the mitotic cell cycle.\n\n\n\nGO:0051301: cell division\nThe process resulting in division and partitioning of components of a cell to form more cells; may or may not be accompanied by the physical separation of a cell into distinct, individually membrane-bounded daughter cells.\n\n\n\nGO:0061673: mitotic spindle astral microtubule\nAny of the mitotic spindle microtubules that radiate in all directions from the spindle poles and are thought to contribute to the forces that separate the poles and position them in relation to the rest of the cell.",
    "crumbs": [
      "Enrichment",
      "GO information"
    ]
  },
  {
    "objectID": "pages/go_info.html#go-graphs",
    "href": "pages/go_info.html#go-graphs",
    "title": "GO information",
    "section": "GO graphs",
    "text": "GO graphs\nShow the sub-graph for a list of GO terms:\n\nimport geneinfo\nimport importlib\nimportlib.reload(geneinfo)\n#geneinfo.go_info('GO:0000776')\ngeneinfo.show_go_dag_for_terms(go_terms)\n\n\n\n\n\n\n\n\n\ngoshow_go_dag_for_terms(go_terms)\n\n\n\n\n\n\n\n\nShow the sub-graph for the GO terms of a single gene:\n\ngoshow_go_dag_for_gene('DYNLT3')\n\n10741    6990\nName: GeneID, dtype: int64\n\n\n\n\n\n\n\n\n\nSame but using GO annotation backed by certain kinds of evidence:\n\ngoshow_go_dag_for_gene('DYNLT3', evidence=['IDA', 'EXP', 'HTP'])\n\n10741    6990\nName: GeneID, dtype: int64\n\n\n\n\n\n\n\n\n\nShow the categories of evidence backing GO annotations:\n\ngoshow_go_evidence_codes()\n\nExperimental evidence codes:  Inferred from Experiment (EXP)  Inferred from Direct Assay (IDA)  Inferred from Physical Interaction (IPI)  Inferred from Mutant Phenotype (IMP)  Inferred from Genetic Interaction (IGI)  Inferred from Expression Pattern (IEP)  Inferred from High Throughput Experiment (HTP)  Inferred from High Throughput Direct Assay (HDA)  Inferred from High Throughput Mutant Phenotype (HMP)  Inferred from High Throughput Genetic Interaction (HGI)  Inferred from High Throughput Expression Pattern (HEP)\nPhylogenetically-inferred annotations:  Inferred from Biological aspect of Ancestor (IBA)  Inferred from Biological aspect of Descendant (IBD)  Inferred from Key Residues (IKR)  Inferred from Rapid Divergence (IRD)\nComputational analysis evidence codes  Inferred from Sequence or structural Similarity (ISS)  Inferred from Sequence Orthology (ISO)  Inferred from Sequence Alignment (ISA)  Inferred from Sequence Model (ISM)  Inferred from Genomic Context (IGC)  Inferred from Reviewed Computational Analysis (RCA)\nAuthor statement evidence codes:  Traceable Author Statement (TAS)  Non-traceable Author Statement (NAS)\nCurator statement evidence codes:  Inferred by Curator (IC)  No biological Data available (ND)\nElectronic annotation evidence code:  Inferred from Electronic Annotation (IEA)",
    "crumbs": [
      "Enrichment",
      "GO information"
    ]
  },
  {
    "objectID": "pages/go_info.html#find-genes-based-on-go-info",
    "href": "pages/go_info.html#find-genes-based-on-go-info",
    "title": "GO information",
    "section": "Find genes based on GO info",
    "text": "Find genes based on GO info\nFind genes matching a regular expression in any associated GO term description:\n\nmotor_genes_df = goget_genes_for_go_regex('kinesin|dynein')\nmotor_genes_df.head() &lt;&lt; left()\n\ngeneinfo_cache/go-basic.obo: fmt(1.2) rel(2024-10-27) 44,017 Terms; optional_attrs(comment def relationship synonym xref)\ngeneinfo_cache/go-basic.obo: fmt(1.2) rel(2024-10-27) 44,017 Terms; optional_attrs(comment def relationship synonym xref)\n\n\n\n\n\n\n\n \nsymbol\nname\nchrom\nstart\nend\n\n\n\n\n0\nSPAG1\nsperm associated antigen 1\n8\n100158037\n100241903\n\n\n1\nBLOC1S2\nbiogenesis of lysosomal organelles complex 1 subunit 2\n10\n100286679\n100273277\n\n\n2\nLZTS2\nleucine zipper tumor suppressor 2\n10\n100996587\n101007832\n\n\n3\nDYNC1H1\ndynein cytoplasmic 1 heavy chain 1\n14\n101964572\n102056442\n\n\n4\nKIF1B\nkinesin family member 1B\n1\n10210569\n10381602",
    "crumbs": [
      "Enrichment",
      "GO information"
    ]
  },
  {
    "objectID": "pages/go_enrichment.html",
    "href": "pages/go_enrichment.html",
    "title": "GO enrichment",
    "section": "",
    "text": "import pandas as pd\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nfrom geneinfo.utils import GeneListCollection\nfrom geneinfo.utils import GeneList as glist\nimport geneinfo.ontology as go\ngo.email('your@email.com')\nclass left:\n    def __rlshift__(self, df):\n        \"Left align columns of data frame: df &lt;&lt; left()\"\n        left_aligned_df = df.style.set_properties(**{'text-align': 'left'})\n        left_aligned_df = left_aligned_df.set_table_styles(\n        [dict(selector = 'th', props=[('text-align', 'left')])])\n        display(left_aligned_df)\nNB: The first time you use the GO utilities, it will spend a very long time downloading data. If you do not want to wait that out in the notebook, you can execute this command in the folder where you store your notebooks:",
    "crumbs": [
      "Enrichment",
      "GO enrichment"
    ]
  },
  {
    "objectID": "pages/go_enrichment.html#global-go-enrichment",
    "href": "pages/go_enrichment.html#global-go-enrichment",
    "title": "GO enrichment",
    "section": "Global GO enrichment",
    "text": "Global GO enrichment\nEnrichment against all GO terms with all protein coding genes as background:\n\nimport geneinfo.utils as utils\ngl = utils.GeneListCollection('google_sheet.csv')\nglist(gl.get('sfari_all_conf'))\n\n\n\n\nAFF2\nBRWD3\nDDX3X\nGLRA2\nIL1RAPL2\nMSL3\nPCDH19\nRLIM\nSYN1\nUPF3B\n\n\nAGTR2\nCACNA1F\nDDX53\nGPC4\nIQSEC2\nNEXMIF\nPHF8\nRPL10\nSYP\nUSP9X\n\n\nAP1S2\nCASK\nDMD\nGRIA3\nKDM5C\nNLGN3\nPJA1\nRPS6KA3\nTAF1\nVSIG4\n\n\nAR\nCD99L2\nFAM47A\nHCFC1\nKDM6A\nNLGN4X\nPLXNA3\nSLC6A8\nTBL1X\nWNK3\n\n\nARHGEF9\nCDKL5\nFGF13\nHDAC8\nLAS1L\nOCRL\nPTCHD1\nSLC7A3\nTBX22\nZNF711\n\n\nARX\nCHM\nFMR1\nHNRNPH2\nMAOA\nOFD1\nPTCHD1-AS\nSLC9A6\nTFE3\n\n\n\nATRX\nCLCN4\nFRMPD4\nHUWE1\nMAOB\nOPHN1\nRAB39B\nSMC1A\nTMLHE\n\n\n\nBCORL1\nCNKSR2\nGABRA3\nIL1RAPL1\nMECP2\nPCDH11X\nRHOXF1\nSYAP1\nTSPAN7\n\n\n\n\n\n\n\ngenes = ['AFF2', 'AGTR2', 'AP1S2', 'AR', 'ARHGEF9', 'ARX', 'ATRX', 'BCORL1', 'BRWD3', \n         'CACNA1F', 'CASK', 'CD99L2', 'CDKL5', 'CHM', 'CLCN4', 'CNKSR2', 'DDX3X', \n         'DDX53', 'DMD', 'FAM47A', 'FGF13', 'FMR1', 'FRMPD4', 'GABRA3', 'GLRA2', 'GPC4',\n         'GRIA3', 'HCFC1', 'HDAC8', 'HNRNPH2', 'HUWE1', 'IL1RAPL1', 'IL1RAPL2', 'IQSEC2', \n         'KDM5C', 'KDM6A', 'LAS1L', 'MAOA', 'MAOB', 'MECP2', 'MSL3', 'NEXMIF', 'NLGN3', \n         'NLGN4X', 'OCRL', 'OFD1', 'OPHN1', 'PCDH11X', 'PCDH19', 'PHF8', 'PJA1', 'PLXNA3', \n         'PTCHD1', 'PTCHD1-AS', 'RAB39B', 'RHOXF1', 'RLIM', 'RPL10', 'RPS6KA3', 'SLC6A8', \n         'SLC7A3', 'SLC9A6', 'SMC1A', 'SYAP1', 'SYN1', 'SYP', 'TAF1', 'TBL1X', 'TBX22', \n         'TFE3', 'TMLHE', 'TSPAN7', 'UPF3B', 'USP9X', 'VSIG4', 'WNK3', 'ZNF711']\n\n\ngo_results = go.go_enrichment(genes)\ngo_results.head(10)\n\nCould not map gene symbol \"PTCHD1-AS\" to ncbi id\n\n\n\n\n\n\n\n\n\nnamespace\nterm_id\ne/p\npval_uncorr\np_fdr_bh\nratio\nbg_ratio\nobj\n\n\n\n\n0\nBP\nGO:0050804\ne\n7.681490e-07\n0.009328\n0.078947\n0.004175\n&lt;GO:0050804&gt;\n\n\n1\nCC\nGO:0045211\ne\n5.855984e-06\n0.010670\n0.092105\n0.009079\n&lt;GO:0045211&gt;\n\n\n2\nBP\nGO:0097105\ne\n3.991194e-06\n0.024233\n0.039474\n0.000437\n&lt;GO:0097105&gt;\n\n\n3\nMF\nGO:0097621\ne\n4.021311e-05\n0.047471\n0.026316\n0.000146\n&lt;GO:0097621&gt;\n\n\n4\nMF\nGO:0042043\ne\n1.706675e-05\n0.047471\n0.039474\n0.000680\n&lt;GO:0042043&gt;\n\n\n5\nMF\nGO:0140693\ne\n2.706623e-05\n0.047471\n0.052632\n0.002282\n&lt;GO:0140693&gt;\n\n\n6\nMF\nGO:0003682\ne\n4.082631e-05\n0.047471\n0.118421\n0.021848\n&lt;GO:0003682&gt;\n\n\n7\nCC\nGO:0098983\ne\n8.023362e-05\n0.048834\n0.026316\n0.000194\n&lt;GO:0098983&gt;\n\n\n8\nCC\nGO:0005634\ne\n8.040731e-05\n0.048834\n0.486842\n0.273244\n&lt;GO:0005634&gt;\n\n\n9\nMF\nGO:0032452\ne\n5.260543e-05\n0.048934\n0.039474\n0.000971\n&lt;GO:0032452&gt;\n\n\n\n\n\n\n\nShow GO DAG for enrichment results:\n\ngo.show_go_dag_enrichment_results(go_results.obj)\n\n\n\n\n\n\n\n\nSame but only for top 10 GO terms:\n\ngo.show_go_dag_enrichment_results(go_results.obj[:10])\n\n\n\n\n\n\n\n\nDescriptions of the same 10 GO terms:\n\ngo.go_info(go_results.term_id[:10])\n\nGO:0050804: modulation of chemical synaptic transmission\nAny process that modulates the frequency or amplitude of synaptic transmission, the process of communication from a neuron to a target (neuron, muscle, or secretory cell) across a synapse. Amplitude, in this case, refers to the change in postsynaptic membrane potential due to a single instance of synaptic transmission.\n\n\n\nGO:0045211: postsynaptic membrane\nA specialized area of membrane facing the presynaptic membrane on the tip of the nerve ending and separated from it by a minute cleft (the synaptic cleft). Neurotransmitters cross the synaptic cleft and transmit the signal to the postsynaptic membrane.\n\n\n\nGO:0097105: presynaptic membrane assembly\nThe aggregation, arrangement and bonding together of a set of components to form a presynaptic membrane, including any proteins associated with the membrane, but excluding other cellular components. A presynaptic membrane is a specialized area of membrane of the axon terminal that faces the plasma membrane of the neuron or muscle fiber with which the axon terminal establishes a synaptic junction.\n\n\n\nGO:0097621: monoamine oxidase activity\nCatalysis of the reaction: RCH2NHR’ + H2O + O2 = RCHO + R’NH2 + H2O2.\n\n\n\nGO:0042043: neurexin family protein binding\nBinding to a neurexin, a synaptic cell surface protein related to latrotoxin receptor, laminin and agrin. Neurexins act as cell recognition molecules at nerve terminals.\n\n\n\nGO:0140693: molecular condensate scaffold activity\nBinding and bringing together two or more macromolecules in contact, permitting those molecules to organize as a molecular condensate.\n\n\n\nGO:0003682: chromatin binding\nBinding to chromatin, the network of fibers of DNA, protein, and sometimes RNA, that make up the chromosomes of the eukaryotic nucleus during interphase.\n\n\n\nGO:0098983: symmetric, GABA-ergic, inhibitory synapse\nA neuron to neuron synapse that lacks an electron dense postsynaptic specialization, uses GABA as a neurotransmitter and whose activity results in inhibitory postsynaptic potentials.\n\n\n\nGO:0005634: nucleus\nA membrane-bounded organelle of eukaryotic cells in which chromosomes are housed and replicated. In most cells, the nucleus contains all of the cell’s chromosomes except the organellar chromosomes, and is the site of RNA synthesis and processing. In some species, or in specialized cell types, RNA metabolism or DNA replication may be absent.\n\n\n\nGO:0032452: histone demethylase activity\nCatalysis of the removal of a methyl group from a histone.\n\n\n\nShow the GO DAG for a set of GO terms and their parent terms:\n\ngo.show_go_dag_for_terms(go_results.term_id[:10])\n\n\n\n\n\n\n\n\nSpecifying a custom set of background genes:\nThe query genes should be a subset of the background genes:\n\nall_protein_coding = go.all_protein_coding()\n# only the first 50 genes:\nsubset_background = all_protein_coding[:50] + genes\n\n\ngo_results = go.go_enrichment(genes, background_genes=subset_background)\ngo_results\n\nCould not map gene symbol \"PTCHD1-AS\" to ncbi id\nCould not map gene symbol \"PTCHD1-AS\" to ncbi id\n\n\n\n\n\n\n\n\n\nnamespace\nterm_id\ne/p\npval_uncorr\np_fdr_bh\nratio\nbg_ratio\nobj\n\n\n\n\n0\nBP\nGO:0055085\np\n6.454390e-09\n0.000006\n0.000000\n0.142857\n&lt;GO:0055085&gt;\n\n\n1\nMF\nGO:0042626\np\n2.131904e-08\n0.000008\n0.000000\n0.134921\n&lt;GO:0042626&gt;\n\n\n2\nMF\nGO:0140359\np\n6.805374e-07\n0.000129\n0.000000\n0.111111\n&lt;GO:0140359&gt;\n\n\n3\nMF\nGO:0016887\np\n2.593565e-06\n0.000321\n0.052632\n0.190476\n&lt;GO:0016887&gt;\n\n\n4\nMF\nGO:0005524\np\n3.389880e-06\n0.000321\n0.144737\n0.301587\n&lt;GO:0005524&gt;\n\n\n5\nCC\nGO:0005634\ne\n1.783878e-05\n0.004121\n0.486842\n0.341270\n&lt;GO:0005634&gt;\n\n\n6\nMF\nGO:0005319\np\n1.521539e-04\n0.009611\n0.000000\n0.071429\n&lt;GO:0005319&gt;\n\n\n7\nMF\nGO:0005515\ne\n1.331869e-04\n0.009611\n0.828947\n0.698413\n&lt;GO:0005515&gt;\n\n\n8\nBP\nGO:0006869\np\n5.331890e-05\n0.023807\n0.000000\n0.079365\n&lt;GO:0006869&gt;\n\n\n\n\n\n\n\nUse only the X chromosome as background:\n\ngo_results = go.go_enrichment(genes, background_chrom='X')\ngo_results\n\nCould not map gene symbol \"PTCHD1-AS\" to ncbi id\n\n\n\n\n\n\n\n\n\nnamespace\nterm_id\ne/p\npval_uncorr\np_fdr_bh\nratio\nbg_ratio\nobj\n\n\n\n\n0\nBP\nGO:0050804\ne\n4.158911e-07\n0.000937\n0.078947\n0.007034\n&lt;GO:0050804&gt;\n\n\n1\nCC\nGO:0043197\ne\n2.772412e-05\n0.004673\n0.065789\n0.007034\n&lt;GO:0043197&gt;\n\n\n2\nCC\nGO:0045211\ne\n3.783425e-05\n0.004673\n0.092105\n0.015240\n&lt;GO:0045211&gt;\n\n\n3\nCC\nGO:0045202\ne\n1.992185e-05\n0.004673\n0.105263\n0.018757\n&lt;GO:0045202&gt;\n\n\n4\nCC\nGO:0005654\ne\n3.475823e-05\n0.004673\n0.355263\n0.168816\n&lt;GO:0005654&gt;\n\n\n5\nCC\nGO:0098685\ne\n5.857231e-05\n0.005787\n0.052632\n0.004689\n&lt;GO:0098685&gt;\n\n\n6\nBP\nGO:0006338\ne\n5.644060e-06\n0.006361\n0.157895\n0.037515\n&lt;GO:0006338&gt;\n\n\n7\nBP\nGO:0045944\ne\n1.386155e-05\n0.010415\n0.171053\n0.046893\n&lt;GO:0045944&gt;\n\n\n8\nCC\nGO:0032991\ne\n4.849450e-04\n0.039927\n0.092105\n0.021102\n&lt;GO:0032991&gt;\n\n\n9\nCC\nGO:0071339\ne\n6.820063e-04\n0.048130\n0.039474\n0.003517\n&lt;GO:0071339&gt;",
    "crumbs": [
      "Enrichment",
      "GO enrichment"
    ]
  },
  {
    "objectID": "pages/go_enrichment.html#enrichment-among-a-subset-of-go-terms",
    "href": "pages/go_enrichment.html#enrichment-among-a-subset-of-go-terms",
    "title": "GO enrichment",
    "section": "Enrichment among a subset of GO terms",
    "text": "Enrichment among a subset of GO terms\nExtract terms matching regular expression:\n\n#target_terms = go.get_terms_for_go_regex('brain')\n#target_terms = go.get_terms_for_go_regex('microtubul')\n# target_terms = go.get_terms_for_go_regex('spindle')\ntarget_terms = go.get_terms_for_go_regex(r'neuron\\S* migration')\ngo.show_go_dag_for_terms(target_terms) ;\n\n/Users/kmt/geneinfo/geneinfo/cache/go-basic.obo: fmt(1.2) rel(2024-10-27) 44,017 Terms; optional_attrs(comment def relationship synonym xref)\n\n\n\n\n\n\n\n\n\n\ngo_results = go.go_enrichment(genes, terms=target_terms, list_study_genes=True)\ngo_results.head()\n\n/Users/kmt/geneinfo/geneinfo/cache/go-basic.obo: fmt(1.2) rel(2024-10-27) 44,017 Terms; optional_attrs(def relationship)\n\n\nCould not map gene symbol \"PTCHD1-AS\" to ncbi id\n\n\n\n\n\n\n\n\n\nnamespace\nterm_id\ne/p\npval_uncorr\np_fdr_bh\nratio\nbg_ratio\nobj\nstudy_genes\n\n\n\n\n0\nCC\nGO:0032991\ne\n0.009214\n0.036855\n0.092105\n0.031024\n&lt;GO:0032991&gt;\n[AR, DMD, HCFC1, MECP2, RPL10, FRMPD4, VSIG4]\n\n\n\n\n\n\n\n\ngo.show_go_dag_enrichment_results(go_results.obj)\n\n\n\n\n\n\n\n\nExtract terms matching two regular expressions in any order:\n\npattern_one = r'microtub\\S*'\npattern_two = r'spindle'\nregex = fr\"(?=.*({pattern_one}))(?=.*({pattern_two}))(?=.*)\"\n\ntarget_terms = go.get_terms_for_go_regex(regex)\ngo.show_go_dag_for_terms(target_terms)\n\n/Users/kmt/geneinfo/geneinfo/cache/go-basic.obo: fmt(1.2) rel(2024-10-27) 44,017 Terms; optional_attrs(comment def relationship synonym xref)",
    "crumbs": [
      "Enrichment",
      "GO enrichment"
    ]
  },
  {
    "objectID": "pages/gene_information.html",
    "href": "pages/gene_information.html",
    "title": "Gene information",
    "section": "",
    "text": "import geneinfo.information as gi",
    "crumbs": [
      "Information",
      "Gene information"
    ]
  },
  {
    "objectID": "pages/gene_information.html#summary-gene-information",
    "href": "pages/gene_information.html#summary-gene-information",
    "title": "Gene information",
    "section": "Summary gene information",
    "text": "Summary gene information\nUsing gene symbol:\n\ngi.gene_info('USP4')\n\nSymbol: USP4 (protein-coding)         Aliases: UNP, Unph\nubiquitin specific peptidase 4\nSummary: The protein encoded by this gene is a protease that deubiquitinates target proteins such as ADORA2A and TRIM21. The encoded protein shuttles between the nucleus and cytoplasm and is involved in maintaining operational fidelity in the endoplasmic reticulum. Three transcript variants encoding different isoforms have been found for this gene. [provided by RefSeq, Oct 2011].\nHuman genomic position: 3:49277144-49340712 (hg38), 3:49315264-49378145 (hg19)\nGene card\n\n\n\nUsing NCBI ID:\n\ngi.gene_info(7157)\n\nSymbol: TP53 (protein-coding)         Aliases: BCC7, BMFS5, LFS1, P53, TRP53\ntumor protein p53\nSummary: This gene encodes a tumor suppressor protein containing transcriptional activation, DNA binding, and oligomerization domains. The encoded protein responds to diverse cellular stresses to regulate expression of target genes, thereby inducing cell cycle arrest, apoptosis, senescence, DNA repair, or changes in metabolism. Mutations in this gene are associated with a variety of human cancers, including hereditary cancers such as Li-Fraumeni syndrome. Alternative splicing of this gene and the use of alternate promoters result in multiple transcript variants and isoforms. Additional isoforms have also been shown to result from the use of alternate translation initiation codons from identical transcript variants (PMIDs: 12032546, 20937277). [provided by RefSeq, Dec 2016].\nHuman genomic position: 17:7661779-7687546 (hg38), 17:7565097-7590856 (hg19)\nGene card\n\n\n\nFor a a list of genes:\n\ngi.gene_info(['LARS2', 'XCR1'])\n\nSymbol: LARS2 (protein-coding)         Aliases: HLASA, LEURS, PRLTS4, mtLeuRS\nleucyl-tRNA synthetase 2, mitochondrial\nSummary: This gene encodes a class 1 aminoacyl-tRNA synthetase, mitochondrial leucyl-tRNA synthetase. Each of the twenty aminoacyl-tRNA synthetases catalyzes the aminoacylation of a specific tRNA or tRNA isoaccepting family with the cognate amino acid. [provided by RefSeq, Jul 2008].\nHuman genomic position: 3:45388561-45554726 (hg38), 3:45429998-45590913 (hg19)\nGene card\n\n\n\nSymbol: XCR1 (protein-coding)         Aliases: CCXCR1, GPR5\nX-C motif chemokine receptor 1\nSummary: The protein encoded by this gene is a chemokine receptor belonging to the G protein-coupled receptor superfamily. The family members are characterized by the presence of 7 transmembrane domains. The encoded protein transduces a signal by increasing the intracellular calcium ion level. The viral macrophage inflammatory protein-II is an antagonist of this receptor and blocks signaling. Some studies have implicated a cluster of genes at 3p21.31, including this gene, as associated with COVID-19 risk. The encoded protein may also play a role in cell proliferation and migration in several types of cancer. [provided by RefSeq, Jan 2023].\nHuman genomic position: 3:46016990-46085825 (hg38), 3:46058516-46069234 (hg19)\nGene card\n\n\n\nFor genes a region:\n\ngi.gene_info_region('chrX', 76500000, 77000000, assembly='hg19')\n\nSymbol: FGF16 (protein-coding)         Aliases: FGF-16, MF4\nfibroblast growth factor 16\nSummary: This gene encodes a member of a family of proteins that are involved in a variety of biological processes, including embryonic development, cell growth, morphogenesis, tissue repair, tumor growth and invasion. This gene is expressed in cardiac cells and is required for proper heart development. Mutation in this gene was also observed in individuals with metacarpal 4-5 fusion. [provided by RefSeq, Mar 2014].\nGene card\n\n\n\nSymbol: ATRX (protein-coding)         Aliases: JMS, MRX52, RAD54, RAD54L, XH2, XNP, ZNF-HX\nATRX chromatin remodeler\nSummary: The protein encoded by this gene contains an ATPase/helicase domain, and thus it belongs to the SWI/SNF family of chromatin remodeling proteins. This protein is found to undergo cell cycle-dependent phosphorylation, which regulates its nuclear matrix and chromatin association, and suggests its involvement in the gene regulation at interphase and chromosomal segregation in mitosis. Mutations in this gene are associated with X-linked syndromes exhibiting cognitive disabilities as well as alpha-thalassemia (ATRX) syndrome. These mutations have been shown to cause diverse changes in the pattern of DNA methylation, which may provide a link between chromatin remodeling, DNA methylation, and gene expression in developmental processes. Multiple alternatively spliced transcript variants encoding distinct isoforms have been reported. [provided by RefSeq, Jul 2017].\nHuman genomic position: X:77504880-77786233 (hg38), HG1426_PATCH:76765832-77047170, X:76760356-77041702 (hg19)\nGene card",
    "crumbs": [
      "Information",
      "Gene information"
    ]
  },
  {
    "objectID": "pages/gene_information.html#get-the-hgcn-symbol-for-an-alias",
    "href": "pages/gene_information.html#get-the-hgcn-symbol-for-an-alias",
    "title": "Gene information",
    "section": "Get the HGCN symbol for an alias",
    "text": "Get the HGCN symbol for an alias\n\ngi.hgcn_symbol(['CXorf23', 'BCLAF3', 'ENSG00000173681'])\n\n['BCLAF3', 'BCLAF3', 'BCLAF3']",
    "crumbs": [
      "Information",
      "Gene information"
    ]
  },
  {
    "objectID": "pages/gene_information.html#gene-coordinates",
    "href": "pages/gene_information.html#gene-coordinates",
    "title": "Gene information",
    "section": "Gene coordinates",
    "text": "Gene coordinates\nFor a list of genes:\n\ngi.gene_coords(['ATRX', 'MAGT1', 'FOXP2'], assembly='hg38')\n\n[('chrX', 77504879, 77786216, 'ATRX'),\n ('chrX', 77825746, 77895568, 'MAGT1'),\n ('chr7', 114086326, 114693765, 'FOXP2')]\n\n\nFor the genes in a genomic region:\n\ngi.gene_coords_region('chrX', 76500000, 77000000, assembly='hg19')\n\n[('FGF16',\n  'chrX',\n  76709642,\n  76712769,\n  ([(76709642, 76709751), (76711767, 76712769)],)),\n ('ATRX',\n  'chrX',\n  76760357,\n  77041702,\n  ([(76760357, 76764107),\n    (76776265, 76776394),\n    (76776880, 76776976),\n    (76777740, 76777866),\n    (76778729, 76778879),\n    (76812921, 76813116),\n    (76814139, 76814317),\n    (76829714, 76829823),\n    (76845303, 76845410),\n    (76849165, 76849319),\n    (76854879, 76855049),\n    (76855200, 76855289),\n    (76855902, 76856033),\n    (76872080, 76872198),\n    (76874273, 76874449),\n    (76875862, 76876000),\n    (76888694, 76888872),\n    (76889053, 76889200),\n    (76890084, 76890194),\n    (76891405, 76891547),\n    (76907603, 76907843),\n    (76909587, 76909690),\n    (76912049, 76912143),\n    (76918870, 76919047),\n    (76920133, 76920267),\n    (76931720, 76931793),\n    (76937011, 76940085),\n    (76940430, 76940498),\n    (76944310, 76944420),\n    (76949312, 76949426),\n    (76952064, 76952192),\n    (76953070, 76953123),\n    (76954061, 76954117),\n    (76972607, 76972720),\n    (77041467, 77041702)],\n   [(76760357, 76764107),\n    (76776265, 76776394),\n    (76776880, 76776976),\n    (76777740, 76777866),\n    (76778729, 76778879),\n    (76812921, 76813116),\n    (76814139, 76814317),\n    (76829714, 76829823),\n    (76845303, 76845410),\n    (76849165, 76849319),\n    (76854879, 76855049),\n    (76855200, 76855289),\n    (76855902, 76856033),\n    (76872080, 76872198),\n    (76874273, 76874449),\n    (76875862, 76876000),\n    (76888694, 76888872),\n    (76889053, 76889200),\n    (76890084, 76890194),\n    (76891405, 76891547),\n    (76907603, 76907843),\n    (76909587, 76909690),\n    (76912049, 76912143),\n    (76918870, 76919047),\n    (76920133, 76920267),\n    (76931720, 76931793),\n    (76937011, 76940085),\n    (76940430, 76940498),\n    (76944310, 76944420),\n    (76952064, 76952192),\n    (76953070, 76953123),\n    (76954061, 76954117),\n    (76972607, 76972720),\n    (77041467, 77041702)]))]",
    "crumbs": [
      "Information",
      "Gene information"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html",
    "href": "pages/chrom_ideograms.html",
    "title": "Chromosome ideograms",
    "section": "",
    "text": "from collections import defaultdict\nimport random, re\nfrom random import randint\nrandom.seed(7)\nimport pandas as pd\nimport numpy  as np\nimport matplotlib\nfrom matplotlib.axes import Axes\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')\n# %config InlineBackend.figure_format = 'retina'\n%config InlineBackend.figure_format = 'svg'\n\nimport geneinfo.utils as utils\nimport geneinfo.information as gi\nimport geneinfo.plot as gplt\ngene_lists = utils.GeneListCollection('google_sheet.csv')\ngene_lists\n\n\n\n\n\n\n\n\nlabel\ndescription\n\n\n\n\nall_npx\nall NPX genes\n\n\nneuron_genome_proteome\nNeuron proteome (whole genome)\n\n\nneuron_npx_proteome\nNPX neuron proteome\n\n\nmatos_neuron\nMatos neuron genes\n\n\nmatos_common\nMatos neuron genes expressed in spermatids\n\n\nhpa_brain_prot\nBrain genes form Human protein atlas\n\n\nmeritxell_spermatid_expr\n\n\n\nintersection(nDEG, matos_neuron)\n\n\n\nunion(H,matos_common)\n\n\n\nmult_copy\n\n\n\nall_post_mei_expr\nMulti copy genes\n\n\nmsci\nall post.mei.expr. X genes\n\n\nmsci_esc\nMSCI genes\n\n\nmy_primate_codeml\nMSCI-escaping\n\n\ncDEG\nPrimate codeml site model\n\n\nnDEG\n\n\n\nprimate_ampl_multi\ncDEG\n\n\ngametologs\nnDEG\n\n\nxi\nAmpliconic or multicopy in some primates\n\n\nxi_escape\nGametologs in some primates\n\n\nxi_uncertain\nSubject to somatic X inactivation (XI)\n\n\nxi_any_evidence\nEscaping somatic X inactivation (XI)\n\n\nexpr_mod_xi_copynr_fibrobl\nX genes uncertain XI status\n\n\nexpr_mod_xi_copynr_lcl\nUnion of certain and uncertain XI status\n\n\nreg_sa_pheno\nExpression modulated by Xi copy number (Fibroblast)\n\n\nari_relate_EUR\nExpression modulated by Xi copy number (LCL)\n\n\nari_relate_ASIA\nX-chromosome genes associated with regional SA phenotypes\n\n\nari_relate_AFR\n\n\n\nari_nonPUR\n\n\n\nari_relate_PUR\n\n\n\nari_all\n\n\n\ncandidates\n\n\n\nech75_regions\n\n\n\nech90_regions\nCandidate for explaining human and baboon sweeps\n\n\naccel_reg_simiiformes_br\nOverlapping human sweeps (75% ECH regions)\n\n\nsfari_all_conf\nOverlapping human sweeps (90% ECH regions)\n\n\nintel_seiz_lang\nGenes with accelerated regions Simiiformes branch\n\n\nintelect_disabil\nX SFARI genes (including all confidence levels)\n\n\nmatos_common_no_xy_gametologs\nIntellectual disability or Seizures or Language impairment\ngeneinfo lets you visualize data in a chromosome or genome context.",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#dummy-sample-data",
    "href": "pages/chrom_ideograms.html#dummy-sample-data",
    "title": "Chromosome ideograms",
    "section": "Dummy sample data",
    "text": "Dummy sample data\n\ndf = utils.dummy_data()\ndf.head()\n\n\n\n\n\n\n\n\nx\ny\nchrom\nstart\nend\npos\n\n\n\n\n1\n5.019283e+05\n0.063933\nchr1\n0.000000e+00\n5.019283e+05\n0.000000e+00\n\n\n1\n5.019283e+05\n0.063933\nchr1\n0.000000e+00\n5.019283e+05\n5.019283e+05\n\n\n2\n1.003857e+06\n0.128872\nchr1\n5.019283e+05\n1.003857e+06\n5.019283e+05\n\n\n2\n1.003857e+06\n0.128872\nchr1\n5.019283e+05\n1.003857e+06\n1.003857e+06\n\n\n3\n1.505785e+06\n0.194514\nchr1\n1.003857e+06\n1.505785e+06\n1.003857e+06\n\n\n\n\n\n\n\n\nsegments = utils.dummy_segments()\nsegments[:10]\n\n[('chr1', 10065165, 12961789),\n ('chr1', 15568967, 18751672),\n ('chr1', 19444467, 23071285),\n ('chr1', 24350589, 25267841),\n ('chr1', 40493267, 57632604),\n ('chr1', 64602482, 86928195),\n ('chr1', 98163871, 105984624),\n ('chr1', 112252233, 113956002),\n ('chr1', 116405877, 136213743),\n ('chr1', 143849730, 147920620)]",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#all-chromosome-ideogram",
    "href": "pages/chrom_ideograms.html#all-chromosome-ideogram",
    "title": "Chromosome ideograms",
    "section": "All chromosome ideogram",
    "text": "All chromosome ideogram\n\nimport geneinfo.plot as gplt\n\nSegments:\n\ng = gplt.GenomeIdeogram(assembly='hg38') \ng.draw_chromosomes()\n\n\n\n\n\n\n\n\n\ngi.list_assemblies()\n\n\n\n\n\n\n \nSpecies\nLatin name\nAssemblies\n\n\n\n\n0\nA. gambiae\nAnopheles gambiae\nanoGam1 , anoGam3\n\n\n1\nA. mellifera\nApis mellifera\napiMel1 , apiMel2\n\n\n2\nAfrican clawed frog\nXenopus laevis\nxenLae2\n\n\n3\nAlpaca\nVicugna pacos\nvicPac1 , vicPac2\n\n\n4\nAmerican alligator\nAlligator mississippiensis\nallMis1\n\n\n5\nArmadillo\nDasypus novemcinctus\ndasNov3\n\n\n6\nAtlantic cod\nGadus morhua\ngadMor1\n\n\n7\nBaboon\nPapio anubis\npapAnu2 , papAnu4\n\n\n8\nBaboon\nPapio hamadryas\npapHam1\n\n\n9\nBison\nBison bison bison\nbisBis1\n\n\n10\nBonobo\nPan paniscus\npanPan1 , panPan2 , panPan3\n\n\n11\nBrown kiwi\nApteryx australis\naptMan1\n\n\n12\nBudgerigar\nMelopsittacus undulatus\nmelUnd1\n\n\n13\nBushbaby\nOtolemur garnettii\notoGar3\n\n\n14\nC. brenneri\nCaenorhabditis brenneri\ncaePb1 , caePb2\n\n\n15\nC. briggsae\nCaenorhabditis briggsae\ncb1 , cb3\n\n\n16\nC. elegans\nCaenorhabditis elegans\nce10 , ce11 , ce2 , ce4 , ce6\n\n\n17\nC. intestinalis\nCiona intestinalis\nci1 , ci2 , ci3\n\n\n18\nC. japonica\nCaenorhabditis japonica\ncaeJap1\n\n\n19\nC. remanei\nCaenorhabditis remanei\ncaeRem2 , caeRem3\n\n\n20\nCat\nFelis catus\nfelCat3 , felCat4 , felCat5 , felCat8 , felCat9\n\n\n21\nChicken\nGallus gallus\ngalGal2 , galGal3 , galGal4 , galGal5 , galGal6\n\n\n22\nChimp\nPan troglodytes\npanTro1 , panTro2 , panTro3 , panTro4 , panTro5 , panTro6\n\n\n23\nChinese hamster\nCricetulus griseus\ncriGri1 , criGriChoV1, criGriChoV2\n\n\n24\nChinese pangolin\nManis pentadactyla\nmanPen1\n\n\n25\nCoelacanth\nLatimeria chalumnae\nlatCha1\n\n\n26\nCow\nBos taurus\nbosTau2 , bosTau3 , bosTau4 , bosTau6 , bosTau7 , bosTau8 , bosTau9\n\n\n27\nCrab-eating macaque\nMacaca fascicularis\nmacFas5\n\n\n28\nD. ananassae\nDrosophila ananassae\ndroAna1 , droAna2\n\n\n29\nD. erecta\nDrosophila erecta\ndroEre1\n\n\n30\nD. grimshawi\nDrosophila grimshawi\ndroGri1\n\n\n31\nD. melanogaster\nDrosophila melanogaster\ndm1 , dm2 , dm3 , dm6\n\n\n32\nD. mojavensis\nDrosophila mojavensis\ndroMoj1 , droMoj2\n\n\n33\nD. persimilis\nDrosophila persimilis\ndroPer1\n\n\n34\nD. pseudoobscura\nDrosophila pseudoobscura\ndp2 , dp3\n\n\n35\nD. sechellia\nDrosophila sechellia\ndroSec1\n\n\n36\nD. simulans\nDrosophila simulans\ndroSim1\n\n\n37\nD. virilis\nDrosophila virilis\ndroVir1 , droVir2\n\n\n38\nD. yakuba\nDrosophila yakuba\ndroYak1 , droYak2\n\n\n39\nDog\nCanis lupus familiaris\ncanFam1 , canFam2 , canFam3 , canFam4 , canFam5 , canFam6\n\n\n40\nDolphin\nTursiops truncatus\nturTru2\n\n\n41\nEbola virus\nFiloviridae ebolavirus\neboVir3\n\n\n42\nElephant\nLoxodonta africana\nloxAfr3\n\n\n43\nElephant shark\nCallorhinchus milii\ncalMil1\n\n\n44\nFerret\nMustela putorius furo\nmusFur1\n\n\n45\nFugu\nTakifugu rubripes\nfr1 , fr2 , fr3\n\n\n46\nGarter snake\nThamnophis sirtalis\nthaSir1\n\n\n47\nGibbon\nNomascus leucogenys\nnomLeu1 , nomLeu2 , nomLeu3\n\n\n48\nGolden eagle\nAquila chrysaetos canadensis\naquChr2\n\n\n49\nGolden snub-nosed monkey\nRhinopithecus roxellana\nrhiRox1\n\n\n50\nGorilla\nGorilla gorilla gorilla\ngorGor3 , gorGor4 , gorGor5 , gorGor6\n\n\n51\nGreen monkey\nChlorocebus sabaeus\nchlSab2\n\n\n52\nGuinea pig\nCavia porcellus\ncavPor3\n\n\n53\nHawaiian monk seal\nNeomonachus schauinslandi\nneoSch1\n\n\n54\nHedgehog\nErinaceus europaeus\neriEur1 , eriEur2\n\n\n55\nHorse\nEquus caballus\nequCab1 , equCab2 , equCab3\n\n\n56\nHuman\nHomo sapiens\nhg16 , hg17 , hg18 , hg19 , hg38 , hs1\n\n\n57\nKangaroo rat\nDipodomys ordii\ndipOrd1\n\n\n58\nLamprey\nPetromyzon marinus\npetMar1 , petMar2 , petMar3\n\n\n59\nLancelet\nBranchiostoma floridae\nbraFlo1\n\n\n60\nLizard\nAnolis carolinensis\nanoCar1 , anoCar2\n\n\n61\nMalayan flying lemur\nGaleopterus variegatus\ngalVar1\n\n\n62\nManatee\nTrichechus manatus latirostris\ntriMan1\n\n\n63\nMarmoset\nCallithrix jacchus\ncalJac1 , calJac3 , calJac4\n\n\n64\nMedaka\nOryzias latipes\noryLat2\n\n\n65\nMedium ground finch\nGeospiza fortis\ngeoFor1\n\n\n66\nMegabat\nPteropus vampyrus\npteVam1\n\n\n67\nMinke whale\nBalaenoptera acutorostrata scammoni\nbalAcu1\n\n\n68\nMonkeypox virus\nMonkeypox virus\nmpxvRivers\n\n\n69\nMouse\nMus musculus\nmm10 , mm39 , mm7 , mm8 , mm9\n\n\n70\nMouse lemur\nMicrocebus murinus\nmicMur1 , micMur2\n\n\n71\nNaked mole-rat\nHeterocephalus glaber\nhetGla1 , hetGla2\n\n\n72\nNile tilapia\nOreochromis niloticus\noreNil2\n\n\n73\nOpossum\nMonodelphis domestica\nmonDom1 , monDom4 , monDom5\n\n\n74\nOrangutan\nPongo pygmaeus abelii\nponAbe2 , ponAbe3\n\n\n75\nP. pacificus\nPristionchus pacificus\npriPac1\n\n\n76\nPainted turtle\nChrysemys picta bellii\nchrPic1\n\n\n77\nPanda\nAiluropoda melanoleuca\nailMel1\n\n\n78\nPig\nSus scrofa\nsusScr11, susScr2 , susScr3\n\n\n79\nPika\nOchotona princeps\nochPri2 , ochPri3\n\n\n80\nPlatypus\nOrnithorhynchus anatinus\nornAna1 , ornAna2\n\n\n81\nProboscis monkey\nNasalis larvatus\nnasLar1\n\n\n82\nRabbit\nOryctolagus cuniculus\noryCun2\n\n\n83\nRat\nRattus norvegicus\nrn3 , rn4 , rn5 , rn6 , rn7\n\n\n84\nRhesus\nMacaca mulatta\nrheMac10, rheMac2 , rheMac3 , rheMac8\n\n\n85\nRock hyrax\nProcavia capensis\nproCap1\n\n\n86\nS. cerevisiae\nSaccharomyces cerevisiae\nsacCer1 , sacCer2 , sacCer3\n\n\n87\nS. purpuratus\nStrongylocentrotus purpuratus\nstrPur1 , strPur2\n\n\n88\nSARS-CoV-2\nSARS-CoV-2\nwuhCor1\n\n\n89\nSea hare\nAplysia californica\naplCal1\n\n\n90\nSheep\nOvis aries\noviAri1 , oviAri3 , oviAri4\n\n\n91\nShrew\nSorex araneus\nsorAra1 , sorAra2\n\n\n92\nSloth\nCholoepus hoffmanni\nchoHof1\n\n\n93\nSouthern sea otter\nEnhydra lutris nereis\nenhLutNer1\n\n\n94\nSquirrel\nSpermophilus tridecemlineatus\nspeTri2\n\n\n95\nSquirrel monkey\nSaimiri boliviensis\nsaiBol1\n\n\n96\nStickleback\nGasterosteus aculeatus\ngasAcu1\n\n\n97\nTarsier\nTarsius syrichta\ntarSyr1 , tarSyr2\n\n\n98\nTasmanian devil\nSarcophilus harrisii\nsarHar1\n\n\n99\nTenrec\nEchinops telfairi\nechTel1 , echTel2\n\n\n100\nTetraodon\nTetraodon nigroviridis\ntetNig1 , tetNig2\n\n\n101\nTibetan frog\nNanorana parkeri\nnanPar1\n\n\n102\nTree shrew\nTupaia belangeri\ntupBel1\n\n\n103\nTurkey\nMeleagris gallopavo\nmelGal1 , melGal5\n\n\n104\nWallaby\nMacropus eugenii\nmacEug2\n\n\n105\nWhite rhinoceros\nCeratotherium simum\ncerSim1\n\n\n106\nX. tropicalis\nXenopus tropicalis\nxenTro1 , xenTro10, xenTro2 , xenTro3 , xenTro7 , xenTro9\n\n\n107\nZebra finch\nTaeniopygia guttata\ntaeGut1 , taeGut2\n\n\n108\nZebrafish\nDanio rerio\ndanRer10, danRer11, danRer3 , danRer4 , danRer5 , danRer6 , danRer7\n\n\n\n\n\n\ng = gplt.GenomeIdeogram(assembly='panTro4') \ng.draw_chromosomes()",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#single-chromosome-ideogram",
    "href": "pages/chrom_ideograms.html#single-chromosome-ideogram",
    "title": "Chromosome ideograms",
    "section": "Single chromosome ideogram",
    "text": "Single chromosome ideogram\n\ng = gplt.ChromIdeogram('chrX', assembly='hg19')\ng.draw_chromosomes()",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#the-coordinate-system",
    "href": "pages/chrom_ideograms.html#the-coordinate-system",
    "title": "Chromosome ideograms",
    "section": "The coordinate system",
    "text": "The coordinate system\nThe x-axis follow the chromosome coordinates along the ideogram. Behind the scenes, the y-axis for each ideogram has the same scale as its x-axis. But this is mapped to a more sensible range that is (0, 10) by default can be controlled by the ylim keyword argument:\n\ng = gplt.ChromIdeogram('chrX', assembly='hg38', ylim=(0, 30))\ng.draw_chromosomes()",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#ideogram-size-and-plament",
    "href": "pages/chrom_ideograms.html#ideogram-size-and-plament",
    "title": "Chromosome ideograms",
    "section": "Ideogram size and plament",
    "text": "Ideogram size and plament\n\ng = gplt.ChromIdeogram('chrX', assembly='hg38')\ng.draw_chromosomes(base=1, height=4)",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#genomic-segment-annotation",
    "href": "pages/chrom_ideograms.html#genomic-segment-annotation",
    "title": "Chromosome ideograms",
    "section": "Genomic segment annotation",
    "text": "Genomic segment annotation\n\ng = gplt.GenomeIdeogram(assembly='hg38') \ng.draw_chromosomes()\ng.add_segments(segments, facecolor='tab:blue', alpha=0.2)\n\n\n\n\n\n\n\n\nTo make sure segments are visible on the plot, the default minimal size of plotteed segments are 200000. This can be changed like this (notice how the chr1 segment is no longer visible):\n\nsegments_with_alpha = [(*t, np.random.random()) for t in segments]\nsegments_with_alpha[:3]\n\n[('chr1', 10065165, 12961789, 0.061182546920045655),\n ('chr1', 15568967, 18751672, 0.021441536887357615),\n ('chr1', 19444467, 23071285, 0.37882307161321216)]\n\n\n\ng = gplt.GenomeIdeogram(assembly='hg38') \ng.draw_chromosomes()\ng.add_segments(segments_with_alpha, facecolor='tab:blue')",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#conditional-ideogram-color",
    "href": "pages/chrom_ideograms.html#conditional-ideogram-color",
    "title": "Chromosome ideograms",
    "section": "Conditional ideogram color",
    "text": "Conditional ideogram color\nYou can also make consequtive segments with individual alpha values to evalutate a statistic across the chromosomes. Below I make 100kb windows with sin values:\n\nlength = utils.chrom_lengths['hg38']['chrX']\nwin = 100_000\nx = range(0, length, win)\nf = np.linspace(5, 10, len(x))\ny = np.sin(2* np.pi * f * x / length) / 2 + 1/2\nchrom = ['chrX']*len(x)\nshaded_segments = [('chrX', s, s+win, a) for s, a in zip(x, y)]\nshaded_segments[:3]\n\n[('chrX', 0, 100000, 0.5),\n ('chrX', 100000, 200000, 0.5100723398623864),\n ('chrX', 200000, 300000, 0.5201534872481727)]\n\n\n\ng = gplt.ChromIdeogram('chrX', assembly='hg38') \ng.draw_chromosomes()\ng.add_segments(shaded_segments, facecolor='tab:red')\n\n\n\n\n\n\n\n\nEven better, you can use the add_horizon method to plot a horizon plot on the ideograms:\n\ng = gplt.GenomeIdeogram(assembly='hg38') \ng.draw_chromosomes(base=3, height=3)\ng.add_horizon(df, zorder=0)",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#context-plots",
    "href": "pages/chrom_ideograms.html#context-plots",
    "title": "Chromosome ideograms",
    "section": "Context plots",
    "text": "Context plots\nTo visualize data in chromosome context, you can plot anything you like above, on top, or below the ideogram:\n\ng = gplt.GenomeIdeogram(assembly='hg38') \ng.draw_chromosomes()\ng.map_fun(sns.scatterplot, data=df, x='x', y='y', yaxis=(1, 2), s=5, c='C1', label='sin curve scatter')\ng.add_legend()\n\n\n\n\n\n\n\n\n\ng = gplt.ChromIdeogram('chrX', assembly='hg38') \ng.draw_chromosomes(base=2)\ng.map_fun(sns.lineplot, data=df, x='x', y='y', yaxis=(5, 7), linewidth=2, label='sin curve line')\ng.add_legend()",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#labelled-positions",
    "href": "pages/chrom_ideograms.html#labelled-positions",
    "title": "Chromosome ideograms",
    "section": "Labelled positions",
    "text": "Labelled positions\nYou can label chromosome positions, to show gene locations or anything else:\n\nsample_genes = gene_lists.get('neuron_genome_proteome')\nsample_genes[:3]\n\n\n\n\nA1BG\nA1CF\nA2M\n\n\n\n\n\n\nimport geneinfo.information as gi\n\n\nsample_gene_coord = gi.gene_labels(random.sample(sample_genes, 100), assembly='hg38')\nsample_gene_coord[:3]\n\nC5orf51 not found\n\n\n[('chr5', 181199559.5, 'TRIM7'),\n ('chr10', 1094378.0, 'WDR37'),\n ('chr6', 12263854.5, 'EDN1')]\n\n\nAdd gene labels to positions:\n\ng = gplt.GenomeIdeogram(assembly='hg38') \ng.draw_chromosomes()\ng.add_labels(sample_gene_coord)\n\n\n\n\n\n\n\n\nYou can also use add_labels to add position markers along a chromosome like this to better see the location\n\ng = gplt.GenomeIdeogram(assembly='hg38', font_size=7) \ng.draw_chromosomes()\n\nticks = [(c, s, f'{round(s/1000000, 2)}') for c, l in utils.chrom_lengths['hg38'].items() for s in range(0, l, 2_500_000)]\ng.add_labels(ticks, base=g.ideogram_base, min_height=g.ideogram_height+1, color='black', zorder=1000)\n\n\n\n\n\n\n\n\nStyle label text and spine:\n\ng = gplt.GenomeIdeogram(assembly='hg38') \ng.draw_chromosomes()\ng.add_labels(sample_gene_coord, color='red')\n\n\n\n\n\n\n\n\nRemove color keyword arguemnt and instead add random label text and spine colors to the sample_gene_coord tuples:\n\nrand_col = lambda : matplotlib.colors.to_hex(plt.get_cmap('hsv', 10)(randint(0, 9)))\nsample_gene_coord_with_colors = [(*t, rand_col()) for t in sample_gene_coord]\nsample_gene_coord_with_colors[:3]\n\n[('chr5', 181199559.5, 'TRIM7', '#ff00bf'),\n ('chr10', 1094378.0, 'WDR37', '#ff0000'),\n ('chr6', 12263854.5, 'EDN1', '#08ff00')]\n\n\n\ng = gplt.GenomeIdeogram(assembly='hg38') \ng.draw_chromosomes()\ng.add_labels(sample_gene_coord_with_colors,\n             base=g.ideogram_base, min_height=g.ideogram_height*1.5)\n\n\n\n\n\n\n\n\nOr with a single color scale to visually evaluate significance:\n\nrand_col = lambda : matplotlib.colors.to_hex(plt.get_cmap('Blues', 10)(randint(0, 9)))\nsample_gene_coord_with_colors = [(*t, rand_col()) for t in sample_gene_coord]\n\ng = gplt.GenomeIdeogram(assembly='hg38') \ng.draw_chromosomes()\ng.add_labels(sample_gene_coord_with_colors, linewidth=1, \n             base=g.ideogram_base, min_height=g.ideogram_height*1.5)\n\n\n\n\n\n\n\n\n\nrand_col = lambda : matplotlib.colors.to_hex(plt.get_cmap('viridis', 10)(randint(0, 9)))\nsample_gene_coord_with_colors = [(*t, rand_col()) for t in sample_gene_coord]\n\ng = gplt.ChromIdeogram('chr2', assembly='hg38', font_size=6)\ng.draw_chromosomes(base=2)\ng.add_labels(sample_gene_coord_with_colors)\n\n\n\n\n\n\n\n\n\nrandom.seed(4)\nrand_col = lambda : matplotlib.colors.to_hex(plt.get_cmap('Blues', 10)(randint(0, 9)))\nsample_gene_coord_with_sizes = [(*t, 'black', random.random()) for t in sample_gene_coord]\n\ng = gplt.ChromIdeogram('chr2', assembly='hg38', font_size=7)\ng.draw_chromosomes(base=2)\ng.add_labels(sample_gene_coord_with_sizes)",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#combinatorial-highlighting",
    "href": "pages/chrom_ideograms.html#combinatorial-highlighting",
    "title": "Chromosome ideograms",
    "section": "Combinatorial highlighting",
    "text": "Combinatorial highlighting\n\ng = gplt.ChromIdeogram('chr2', assembly='hg38', font_size=6)\ng.draw_chromosomes(base=2)\ng.add_labels(sample_gene_coord,\n             colored=['NCOA1', 'CHST10', 'CPS1'],\n             filled=['STAMBP', 'SP140L'],\n             framed=['NCOA1', 'C2orf88', 'STAMBP'],\n             bold=['NCOA1', 'SP140L', 'EPC2'],\n             italic=['EPC2'],\n             )\n\n\n\n\n\n\n\n\n\ng = gplt.ChromIdeogram('chr2', assembly='hg38', font_size=6)\ng.draw_chromosomes(base=2)\ng.add_labels(sample_gene_coord,\n             colored=['NCOA1', 'CHST10', 'CPS1'],\n             filled=['STAMBP', 'SP140L'],\n             framed=['NCOA1', 'C2orf88', 'STAMBP'],\n             bold=['NCOA1', 'SP140L', 'EPC2'],\n             italic=['EPC2'],\n             highlight_color='darkorange'\n             )\n\n\n\n\n\n\n\n\nIn combination with label sizes:\n\ng = gplt.ChromIdeogram('chr2', assembly='hg38', font_size=7)\ng.draw_chromosomes(base=2)\ng.add_labels(sample_gene_coord_with_sizes,\n             colored=['NCOA1', 'CHST10', 'CPS1'],\n             filled=['STAMBP', 'SP140L'],\n             framed=['NCOA1', 'C2orf88', 'STAMBP'],\n             bold=['NCOA1', 'SP140L', 'EPC2'],\n             italic=['EPC2'],\n             )\n\n\n\n\n\n\n\n\nYou can do all the same things as with GenomeIdeogram:\n\ng = gplt.ChromIdeogram('chrX', assembly='hg38')\n\n# g.draw_chromosomes(base=1, height=0.10, facecolor='lightgray')\ng.draw_chromosomes()\n\ng.add_labels(sample_gene_coord)\n\ng.add_segments([('chrX', 25e6, 55e6), \n                 ('chrX', 98e6, 102e6)], label='segments', alpha=0.7)\ng.add_segments([('chrX', 115e6, 135e6)], facecolor='red', base=4, height=1, label='red segments', alpha=0.7)\ng.add_segments([('chrX', 125e6, 145e6)], facecolor='green', base=5, height=1, label='green segments', alpha=0.7)\ng.add_segments([('chrX', 35e6, 45e6), \n                 ('chrX', 100e6, 102e6), \n                 ('chrX', 120e6, 132e6)], facecolor='blue', base=3, height=1, label='blue segments', alpha=0.7)\n\ng.add_vlines()\n\n# plot using function that takes data and column name keyword args for dimensions (like seaborn's sns.scatterplot)\ng.map_fun(sns.scatterplot, data=df, x='x', y='y', yaxis=(0.5, 1.5), s=5, c='C1', label='seaborn')\n\n# plot using matplotlib Axes method that x and y positional arguments (like matplotlib's Axes.scatter)\ng.map_method(Axes.scatter, data=df, x='x', y='y', yaxis=(1.5, 2.5), s=5, c='C2', label='matplotlib')\n\ng.add_legend()",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#additional-axes",
    "href": "pages/chrom_ideograms.html#additional-axes",
    "title": "Chromosome ideograms",
    "section": "Additional axes",
    "text": "Additional axes\n\ng = gplt.ChromIdeogram('chrX', assembly='hg38') # plots chromosome\ng.draw_chromosomes(base=2, facecolor='none')\n\nnew_ax, new_ax2, new_ax3 = g.add_axes(3, height_ratio=0.6, hspace=0.5)\n\n_df = utils.stairs(df.loc[df.chrom == 'chrX'])\nnew_ax.plot(_df.pos, _df.y, label='Stairs')\nnew_ax.vlines(np.arange(*new_ax.get_xlim(), 2_000_000), *new_ax.get_ylim(), color='gray', linewidth=0.1)\nnew_ax.hlines(np.arange(*new_ax.get_ylim(), 1), *new_ax.get_xlim(), color='gray', linewidth=0.1)\nnew_ax.legend(loc='center left', bbox_to_anchor=(1.02, 0.5), fontsize=\"10\", frameon=False) ;\n\nnew_ax2.scatter(df.loc[df.chrom == 'chrX', 'x'], df.loc[df.chrom == 'chrX', 'y'], s=5, c='black',label='Scatter')\nfit = utils.fit_lowess(df.loc[df.chrom == 'chrX'], 'x', 'y')\nnew_ax2.plot(fit.x, fit.y, c='red', label='Lowess')\nnew_ax2.legend(loc='center left', bbox_to_anchor=(1.02, 0.5), fontsize=\"10\", frameon=False) ;\n\nnew_ax3.scatter(df.loc[df.chrom == 'chrX', 'x'], df.loc[df.chrom == 'chrX', 'y'], s=5, c='black',label='Scatter')\nfit = utils.fit_lowess(df.loc[df.chrom == 'chrX'], 'x', 'y', frac=0.05)\nnew_ax3.plot(fit.x, fit.y, c='red', label='Lowess')\nnew_ax3.legend(loc='center left', bbox_to_anchor=(1.02, 0.3), fontsize=\"10\", frameon=False) ;",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#floating-annotations",
    "href": "pages/chrom_ideograms.html#floating-annotations",
    "title": "Chromosome ideograms",
    "section": "Floating annotations",
    "text": "Floating annotations\n\ng = gplt.ChromIdeogram('chrX', assembly='hg38') \ng.draw_chromosomes(base=2) \n\nnew_ax, new_ax2 = g.add_axes(2, height_ratio=0.6, hspace=0.5)\n\n_df = utils.stairs(df.loc[df.chrom == 'chrX'])\nnew_ax.plot(_df.pos, _df.y, label='Stairs')\nnew_ax.legend(loc='center left', bbox_to_anchor=(1.02, 0.5), \n              fontsize=\"10\", frameon=False)\n\nnew_ax2.scatter(df.loc[df.chrom == 'chrX', 'x'], df.loc[df.chrom == 'chrX', 'y'], s=5, c='black',label='Scatter')\nfit = utils.fit_lowess(df.loc[df.chrom == 'chrX'], 'x', 'y')\nnew_ax2.plot(fit.x, fit.y, c='red', label='Lowess')\nnew_ax2.legend(loc='center left', bbox_to_anchor=(1.02, 0.5), fontsize=\"10\", frameon=False) ;\n\ng.annotate((0, 4), (10000000, 4), \n         \"This is the beginning of the chromosome\", 'chrX')\ng.annotate((61000000, 4), (40000000, 4), \n         \"This is the centromere\", 'chrX')\ng.annotate((90000000, 1), (90000000, 5), \n         \"Something important in another axes\", 'chrX', \n         ax=new_ax2)",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/chrom_ideograms.html#zooms",
    "href": "pages/chrom_ideograms.html#zooms",
    "title": "Chromosome ideograms",
    "section": "Zooms",
    "text": "Zooms\n\ng = gplt.ChromIdeogram(\n    'chrX', assembly='hg38',\n    zooms=[\n        (45_000_000, 55_000_000),\n        (100_000_000, 120_000_000),\n    ]\n) \ng.draw_chromosomes(base=3.5, height=1, facecolor='none')\ng.add_horizon(data=df, alpha=0.5)\ng.map_fun(sns.scatterplot, data=df, x='x', y='y', \n          yaxis=(0.5, 1), s=5, c='C1', label='seaborn')\ng.map_method(Axes.scatter, data=df, x='x', y='y', \n             yaxis=(1.5, 2.4), s=5, c='C2', label='matplotlib')\ng.map_method(Axes.plot, data=utils.fit_lowess(df, 'x', 'y', frac=0.02), \n             x='x', y='y', yaxis=(1.5, 2.4), c='red', label='Lowess')\ng.add_legend()",
    "crumbs": [
      "Visualization",
      "Chromosome ideograms"
    ]
  },
  {
    "objectID": "pages/new_retrieval_method.html",
    "href": "pages/new_retrieval_method.html",
    "title": "Gene lists",
    "section": "",
    "text": "import geneinfo.utils as utils\ngl = utils.GeneListCollection('google_sheet.csv')\nnames = gl.get('sfari_all_conf')\n\n\nfrom subprocess import Popen, PIPE\nfrom collections import OrderedDict\n\nfields = [\n    'symbol',\n    'gene-id',\n    'ensembl-geneids',\n    'name-id',\n    'swissprot-accessions',\n    'synonyms',\n    'replaced-gene-id',\n    'gene-type',\n    'chromosomes',\n    'genomic-region-gene-range-range-start',\n    'genomic-region-gene-range-range-stop',\n    'summary-description',\n    'annotation-assembly-name',\n]\n\nassembly_names = {'hg38': 'GRCh38',\n                  'GRCh38': 'GRCh38',\n                  'T2T': 'T2T',\n                  't2t': 'T2T'\n                 }\nassembly = 'hg38'\n\ncmd = f\"datasets summary gene symbol {' '.join(names)} --as-json-lines\"\np = Popen(cmd.split(), stdout=PIPE)\ncmd = f'dataformat tsv gene --elide-header --fields {\",\".join(fields)}'\noutput = subprocess.check_output(cmd.split(), stdin=p.stdout)\n# print(output)\np.wait()\nfor line in output.decode().strip().split('\\n'):\n\n    d = dict(zip(fields, line.strip().split('\\t')))\n\n    if 'annotation-assembly-name' in d and d['annotation-assembly-name'].startswith(assembly_names[assembly]):\n\n        info = {}\n        info['name'] = d['symbol']\n        info['ensembl'] = d['ensembl-geneids']\n        info['ncbi'] = d['name-id']\n        info['swissprot'] = d['swissprot-accessions']\n        info['synonyms'] = d['synonyms'].split(',')\n        info['_ncbi'] = d['replaced-gene-id']\n        info['type'] = d['gene-type']\n        info['assembly']: d['annotation-assembly-name']\n        info['coord'] = (d['chromosomes'], d['genomic-region-gene-range-range-start'], d['genomic-region-gene-range-range-stop'])\n        \n    print(info)\n\n{'name': 'AR', 'ensembl': 'ENSG00000169083', 'ncbi': 'HGNC:644', 'swissprot': 'P10275', 'synonyms': ['KD', 'AIS', 'AR8', 'TFM', 'DHTR', 'SBMA', 'HYSP1', 'NR3C4', 'SMAX1', 'HUMARA'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'AR', 'ensembl': 'ENSG00000169083', 'ncbi': 'HGNC:644', 'swissprot': 'P10275', 'synonyms': ['KD', 'AIS', 'AR8', 'TFM', 'DHTR', 'SBMA', 'HYSP1', 'NR3C4', 'SMAX1', 'HUMARA'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'FMR1', 'ensembl': 'ENSG00000102081', 'ncbi': 'HGNC:3775', 'swissprot': 'Q06787', 'synonyms': ['POF', 'FMRP', 'POF1', 'FRAXA'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'FMR1', 'ensembl': 'ENSG00000102081', 'ncbi': 'HGNC:3775', 'swissprot': 'Q06787', 'synonyms': ['POF', 'FMRP', 'POF1', 'FRAXA'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'MECP2', 'ensembl': 'ENSG00000169057', 'ncbi': 'HGNC:6990', 'swissprot': 'P51608', 'synonyms': ['RS', 'RTS', 'RTT', 'PPMX', 'MRX16', 'MRX79', 'MRXSL', 'AUTSX3', 'MRXS13'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'MECP2', 'ensembl': 'ENSG00000169057', 'ncbi': 'HGNC:6990', 'swissprot': 'P51608', 'synonyms': ['RS', 'RTS', 'RTT', 'PPMX', 'MRX16', 'MRX79', 'MRXSL', 'AUTSX3', 'MRXS13'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'MAOA', 'ensembl': 'ENSG00000189221', 'ncbi': 'HGNC:6833', 'swissprot': 'P21397', 'synonyms': ['BRNRS', 'MAO-A'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'MAOA', 'ensembl': 'ENSG00000189221', 'ncbi': 'HGNC:6833', 'swissprot': 'P21397', 'synonyms': ['BRNRS', 'MAO-A'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'FRAXA', 'ensembl': '', 'ncbi': 'HGNC:3945', 'swissprot': '', 'synonyms': ['FMR1'], '_ncbi': '', 'type': 'BIOLOGICAL_REGION', 'coord': ('X', '101', '233')}\n{'name': 'FRAXA', 'ensembl': '', 'ncbi': 'HGNC:3945', 'swissprot': '', 'synonyms': ['FMR1'], '_ncbi': '', 'type': 'BIOLOGICAL_REGION', 'coord': ('X', '101', '233')}\n{'name': 'DMD', 'ensembl': 'ENSG00000198947', 'ncbi': 'HGNC:2928', 'swissprot': 'P11532', 'synonyms': ['BMD', 'CMD3B', 'MRX85', 'DXS142', 'DXS164', 'DXS206', 'DXS230', 'DXS239', 'DXS268', 'DXS269', 'DXS270', 'DXS272'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'DMD', 'ensembl': 'ENSG00000198947', 'ncbi': 'HGNC:2928', 'swissprot': 'P11532', 'synonyms': ['BMD', 'CMD3B', 'MRX85', 'DXS142', 'DXS164', 'DXS206', 'DXS230', 'DXS239', 'DXS268', 'DXS269', 'DXS270', 'DXS272'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'ATRX', 'ensembl': 'ENSG00000085224', 'ncbi': 'HGNC:886', 'swissprot': 'P46100', 'synonyms': ['JMS', 'XH2', 'XNP', 'MRX52', 'RAD54', 'RAD54L', 'ZNF-HX'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'ATRX', 'ensembl': 'ENSG00000085224', 'ncbi': 'HGNC:886', 'swissprot': 'P46100', 'synonyms': ['JMS', 'XH2', 'XNP', 'MRX52', 'RAD54', 'RAD54L', 'ZNF-HX'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'AGTR2', 'ensembl': 'ENSG00000180772', 'ncbi': 'HGNC:338', 'swissprot': 'P50052', 'synonyms': ['AT2', 'ATGR2', 'MRX88'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'AGTR2', 'ensembl': 'ENSG00000180772', 'ncbi': 'HGNC:338', 'swissprot': 'P50052', 'synonyms': ['AT2', 'ATGR2', 'MRX88'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'DDX3X', 'ensembl': 'ENSG00000215301', 'ncbi': 'HGNC:2745', 'swissprot': 'O00571', 'synonyms': ['DBX', 'DDX3', 'HLP2', 'DDX14', 'CAP-Rf', 'MRX102', 'MRXSSB'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'DDX3X', 'ensembl': 'ENSG00000215301', 'ncbi': 'HGNC:2745', 'swissprot': 'O00571', 'synonyms': ['DBX', 'DDX3', 'HLP2', 'DDX14', 'CAP-Rf', 'MRX102', 'MRXSSB'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'AKR1B1', 'ensembl': 'ENSG00000085662', 'ncbi': 'HGNC:381', 'swissprot': 'P15121', 'synonyms': ['AR', 'ADR', 'ALR2', 'ALDR1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('7', '', '')}\n{'name': 'AKR1B1', 'ensembl': 'ENSG00000085662', 'ncbi': 'HGNC:381', 'swissprot': 'P15121', 'synonyms': ['AR', 'ADR', 'ALR2', 'ALDR1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('7', '', '')}\n{'name': 'AREG', 'ensembl': 'ENSG00000109321', 'ncbi': 'HGNC:651', 'swissprot': 'P15514', 'synonyms': ['AR', 'SDGF', 'AREGB', 'CRDGF'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('4', '', '')}\n{'name': 'AREG', 'ensembl': 'ENSG00000109321', 'ncbi': 'HGNC:651', 'swissprot': 'P15514', 'synonyms': ['AR', 'SDGF', 'AREGB', 'CRDGF'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('4', '', '')}\n{'name': 'MPZ', 'ensembl': 'ENSG00000158887', 'ncbi': 'HGNC:7225', 'swissprot': 'P25189', 'synonyms': ['P0', 'CHM', 'DSS', 'MPP', 'CHN2', 'CMT1', 'CMT1B', 'CMT2I', 'CMT2J', 'CMT4E', 'CMTDI3', 'CMTDID', 'HMSNIB'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('1', '', '')}\n{'name': 'MPZ', 'ensembl': 'ENSG00000158887', 'ncbi': 'HGNC:7225', 'swissprot': 'P25189', 'synonyms': ['P0', 'CHM', 'DSS', 'MPP', 'CHN2', 'CMT1', 'CMT1B', 'CMT2I', 'CMT2J', 'CMT4E', 'CMTDI3', 'CMTDID', 'HMSNIB'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('1', '', '')}\n{'name': 'MAOB', 'ensembl': 'ENSG00000069535', 'ncbi': 'HGNC:6834', 'swissprot': 'P27338', 'synonyms': [''], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'MAOB', 'ensembl': 'ENSG00000069535', 'ncbi': 'HGNC:6834', 'swissprot': 'P27338', 'synonyms': [''], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TFE3', 'ensembl': 'ENSG00000068323', 'ncbi': 'HGNC:11752', 'swissprot': 'P19532', 'synonyms': ['TFEA', 'RCCP2', 'RCCX1', 'MRXSPF', 'bHLHe33'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TFE3', 'ensembl': 'ENSG00000068323', 'ncbi': 'HGNC:11752', 'swissprot': 'P19532', 'synonyms': ['TFEA', 'RCCP2', 'RCCX1', 'MRXSPF', 'bHLHe33'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TFE3', 'ensembl': 'ENSG00000068323', 'ncbi': 'HGNC:11752', 'swissprot': 'P19532', 'synonyms': ['TFEA', 'RCCP2', 'RCCX1', 'MRXSPF', 'bHLHe33'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'RPS6KA3', 'ensembl': 'ENSG00000177189', 'ncbi': 'HGNC:10432', 'swissprot': 'P51812', 'synonyms': ['CLS', 'RSK', 'HU-3', 'RSK2', 'MRX19', 'ISPK-1', 'XLID19', 'p90-RSK2', 'pp90RSK2', 'MAPKAPK1B', 'S6K-alpha3'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'RPS6KA3', 'ensembl': 'ENSG00000177189', 'ncbi': 'HGNC:10432', 'swissprot': 'P51812', 'synonyms': ['CLS', 'RSK', 'HU-3', 'RSK2', 'MRX19', 'ISPK-1', 'XLID19', 'p90-RSK2', 'pp90RSK2', 'MAPKAPK1B', 'S6K-alpha3'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TAF1', 'ensembl': 'ENSG00000147133', 'ncbi': 'HGNC:11535', 'swissprot': 'P21675', 'synonyms': ['OF', 'XDP', 'BA2R', 'CCG1', 'CCGS', 'DYT3', 'KAT4', 'P250', 'NSCL2', 'TAF2A', 'MRXS33', 'N-TAF1', 'TAFII250', 'DYT3/TAF1', 'TAFII-250', 'TAF(II)250'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TAF1', 'ensembl': 'ENSG00000147133', 'ncbi': 'HGNC:11535', 'swissprot': 'P21675', 'synonyms': ['OF', 'XDP', 'BA2R', 'CCG1', 'CCGS', 'DYT3', 'KAT4', 'P250', 'NSCL2', 'TAF2A', 'MRXS33', 'N-TAF1', 'TAFII250', 'DYT3/TAF1', 'TAFII-250', 'TAF(II)250'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'HDAC8', 'ensembl': 'ENSG00000147099', 'ncbi': 'HGNC:13315', 'swissprot': 'Q9BY41', 'synonyms': ['HD8', 'WTS', 'RPD3', 'CDA07', 'CDLS5', 'KDAC8', 'MRXS6', 'HDACL1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'HDAC8', 'ensembl': 'ENSG00000147099', 'ncbi': 'HGNC:13315', 'swissprot': 'Q9BY41', 'synonyms': ['HD8', 'WTS', 'RPD3', 'CDA07', 'CDLS5', 'KDAC8', 'MRXS6', 'HDACL1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SMC1A', 'ensembl': 'ENSG00000072501', 'ncbi': 'HGNC:11111', 'swissprot': 'Q14683', 'synonyms': ['SMC1', 'SMCB', 'CDLS2', 'DEE85', 'SB1.8', 'EIEE85', 'SMC1L1', 'DXS423E', 'SMC1alpha'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SMC1A', 'ensembl': 'ENSG00000072501', 'ncbi': 'HGNC:11111', 'swissprot': 'Q14683', 'synonyms': ['SMC1', 'SMCB', 'CDLS2', 'DEE85', 'SB1.8', 'EIEE85', 'SMC1L1', 'DXS423E', 'SMC1alpha'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'HUWE1', 'ensembl': 'ENSG00000086758', 'ncbi': 'HGNC:30892', 'swissprot': 'Q7Z6Z7', 'synonyms': ['MULE', 'Ib772', 'LASU1', 'MRXST', 'UREB1', 'HECTH9', 'URE-B1', 'ARF-BP1', 'HSPC272'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'HUWE1', 'ensembl': 'ENSG00000086758', 'ncbi': 'HGNC:30892', 'swissprot': 'Q7Z6Z7', 'synonyms': ['MULE', 'Ib772', 'LASU1', 'MRXST', 'UREB1', 'HECTH9', 'URE-B1', 'ARF-BP1', 'HSPC272'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CDKL5', 'ensembl': 'ENSG00000008086', 'ncbi': 'HGNC:11411', 'swissprot': 'O76039', 'synonyms': ['DEE2', 'ISSX', 'STK9', 'EIEE2', 'CFAP247'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CDKL5', 'ensembl': 'ENSG00000008086', 'ncbi': 'HGNC:11411', 'swissprot': 'O76039', 'synonyms': ['DEE2', 'ISSX', 'STK9', 'EIEE2', 'CFAP247'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'KDM6A', 'ensembl': 'ENSG00000147050', 'ncbi': 'HGNC:12637', 'swissprot': 'O15550', 'synonyms': ['UTX', 'KABUK2', 'bA386N14.2'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'KDM6A', 'ensembl': 'ENSG00000147050', 'ncbi': 'HGNC:12637', 'swissprot': 'O15550', 'synonyms': ['UTX', 'KABUK2', 'bA386N14.2'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'USP9X', 'ensembl': 'ENSG00000124486', 'ncbi': 'HGNC:12632', 'swissprot': 'Q93008', 'synonyms': ['FAF', 'FAM', 'hFAM', 'DFFRX', 'FAF-X', 'MRX99', 'XLID99', 'MRXS99F'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'USP9X', 'ensembl': 'ENSG00000124486', 'ncbi': 'HGNC:12632', 'swissprot': 'Q93008', 'synonyms': ['FAF', 'FAM', 'hFAM', 'DFFRX', 'FAF-X', 'MRX99', 'XLID99', 'MRXS99F'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CHM', 'ensembl': 'ENSG00000188419', 'ncbi': 'HGNC:1940', 'swissprot': 'P24386', 'synonyms': ['TCD', 'GGTA', 'REP-1', 'DXS540', 'HSD-32'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CHM', 'ensembl': 'ENSG00000188419', 'ncbi': 'HGNC:1940', 'swissprot': 'P24386', 'synonyms': ['TCD', 'GGTA', 'REP-1', 'DXS540', 'HSD-32'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'ARX', 'ensembl': 'ENSG00000004848', 'ncbi': 'HGNC:18060', 'swissprot': 'Q96QS3', 'synonyms': ['ISSX', 'PRTS', 'CT121', 'EIEE1', 'MRX29', 'MRX32', 'MRX33', 'MRX36', 'MRX38', 'MRX43', 'MRX54', 'MRX76', 'MRX87', 'MRXS1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'ARX', 'ensembl': 'ENSG00000004848', 'ncbi': 'HGNC:18060', 'swissprot': 'Q96QS3', 'synonyms': ['ISSX', 'PRTS', 'CT121', 'EIEE1', 'MRX29', 'MRX32', 'MRX33', 'MRX36', 'MRX38', 'MRX43', 'MRX54', 'MRX76', 'MRX87', 'MRXS1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'HCFC1', 'ensembl': 'ENSG00000172534', 'ncbi': 'HGNC:4839', 'swissprot': 'P51610', 'synonyms': ['CFF', 'HCF', 'HCF1', 'HFC1', 'MRX3', 'VCAF', 'HCF-1', 'MAHCX', 'XLID3', 'PPP1R89'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'HCFC1', 'ensembl': 'ENSG00000172534', 'ncbi': 'HGNC:4839', 'swissprot': 'P51610', 'synonyms': ['CFF', 'HCF', 'HCF1', 'HFC1', 'MRX3', 'VCAF', 'HCF-1', 'MAHCX', 'XLID3', 'PPP1R89'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'OCRL', 'ensembl': 'ENSG00000122126', 'ncbi': 'HGNC:8108', 'swissprot': 'Q01968', 'synonyms': ['LOCR', 'DENT2', 'NPHL2', 'OCRL1', 'Dent-2', 'INPP5F', 'OCRL-1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'OCRL', 'ensembl': 'ENSG00000122126', 'ncbi': 'HGNC:8108', 'swissprot': 'Q01968', 'synonyms': ['LOCR', 'DENT2', 'NPHL2', 'OCRL1', 'Dent-2', 'INPP5F', 'OCRL-1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PCDH19', 'ensembl': 'ENSG00000165194', 'ncbi': 'HGNC:14270', 'swissprot': 'Q8TAB3', 'synonyms': ['DEE9', 'EFMR', 'EIEE9'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PCDH19', 'ensembl': 'ENSG00000165194', 'ncbi': 'HGNC:14270', 'swissprot': 'Q8TAB3', 'synonyms': ['DEE9', 'EFMR', 'EIEE9'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SYP', 'ensembl': 'ENSG00000102003', 'ncbi': 'HGNC:11506', 'swissprot': 'P08247', 'synonyms': ['MRX96', 'MRXSYP', 'XLID96'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SYP', 'ensembl': 'ENSG00000102003', 'ncbi': 'HGNC:11506', 'swissprot': 'P08247', 'synonyms': ['MRX96', 'MRXSYP', 'XLID96'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CASK', 'ensembl': 'ENSG00000147044', 'ncbi': 'HGNC:1497', 'swissprot': 'O14936', 'synonyms': ['CMG', 'FGS4', 'LIN2', 'TNRC8', 'hCASK', 'CAGH39', 'CAMGUK', 'MICPCH', 'MRXSNA'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CASK', 'ensembl': 'ENSG00000147044', 'ncbi': 'HGNC:1497', 'swissprot': 'O14936', 'synonyms': ['CMG', 'FGS4', 'LIN2', 'TNRC8', 'hCASK', 'CAGH39', 'CAMGUK', 'MICPCH', 'MRXSNA'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SLC6A8', 'ensembl': 'ENSG00000130821', 'ncbi': 'HGNC:11055', 'swissprot': 'P48029', 'synonyms': ['CRT', 'CT1', 'CRT1', 'CRTR', 'CTR5', 'CCDS1', 'CRT-1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SLC6A8', 'ensembl': 'ENSG00000130821', 'ncbi': 'HGNC:11055', 'swissprot': 'P48029', 'synonyms': ['CRT', 'CT1', 'CRT1', 'CRTR', 'CTR5', 'CCDS1', 'CRT-1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CACNA1F', 'ensembl': 'ENSG00000102001', 'ncbi': 'HGNC:1393', 'swissprot': 'O60840', 'synonyms': ['JM8', 'OA2', 'AIED', 'COD3', 'COD4', 'JMC8', 'CORDX', 'CSNB2', 'CORDX3', 'CSNB2A', 'CSNBX2', 'Cav1.4', 'Cav1.4alpha1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CACNA1F', 'ensembl': 'ENSG00000102001', 'ncbi': 'HGNC:1393', 'swissprot': 'O60840', 'synonyms': ['JM8', 'OA2', 'AIED', 'COD3', 'COD4', 'JMC8', 'CORDX', 'CSNB2', 'CORDX3', 'CSNB2A', 'CSNBX2', 'Cav1.4', 'Cav1.4alpha1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PCDH10', 'ensembl': 'ENSG00000138650', 'ncbi': 'HGNC:13404', 'swissprot': 'Q9P2E7', 'synonyms': ['PCDH19', 'OL-PCDH'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('4', '', '')}\n{'name': 'PCDH10', 'ensembl': 'ENSG00000138650', 'ncbi': 'HGNC:13404', 'swissprot': 'Q9P2E7', 'synonyms': ['PCDH19', 'OL-PCDH'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('4', '', '')}\n{'name': 'RPL10', 'ensembl': 'ENSG00000147403', 'ncbi': 'HGNC:10298', 'swissprot': 'P27635', 'synonyms': ['QM', 'L10', 'NOV', 'uL16', 'AUTSX5', 'DXS648', 'MRXS35', 'DXS648E'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'RPL10', 'ensembl': 'ENSG00000147403', 'ncbi': 'HGNC:10298', 'swissprot': 'P27635', 'synonyms': ['QM', 'L10', 'NOV', 'uL16', 'AUTSX5', 'DXS648', 'MRXS35', 'DXS648E'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'OFD1', 'ensembl': 'ENSG00000046651', 'ncbi': 'HGNC:2567', 'swissprot': 'O75665', 'synonyms': ['RP23', '71-7A', 'SGBS2', 'CXorf5', 'JBTS10'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'OFD1', 'ensembl': 'ENSG00000046651', 'ncbi': 'HGNC:2567', 'swissprot': 'O75665', 'synonyms': ['RP23', '71-7A', 'SGBS2', 'CXorf5', 'JBTS10'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'GRIA3', 'ensembl': 'ENSG00000125675', 'ncbi': 'HGNC:4573', 'swissprot': 'P42263', 'synonyms': ['GLUR3', 'GLURC', 'GluA3', 'MRX94', 'MRXSW', 'GLUR-C', 'iGluR3', 'GLUR-K3'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'GRIA3', 'ensembl': 'ENSG00000125675', 'ncbi': 'HGNC:4573', 'swissprot': 'P42263', 'synonyms': ['GLUR3', 'GLURC', 'GluA3', 'MRX94', 'MRXSW', 'GLUR-C', 'iGluR3', 'GLUR-K3'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SYN1', 'ensembl': 'ENSG00000008056', 'ncbi': 'HGNC:11494', 'swissprot': 'P17600', 'synonyms': ['SYNI', 'EPILX', 'MRX50', 'SYN1a', 'SYN1b', 'EPILX1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SYN1', 'ensembl': 'ENSG00000008056', 'ncbi': 'HGNC:11494', 'swissprot': 'P17600', 'synonyms': ['SYNI', 'EPILX', 'MRX50', 'SYN1a', 'SYN1b', 'EPILX1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'KDM5C', 'ensembl': 'ENSG00000126012', 'ncbi': 'HGNC:11114', 'swissprot': 'P41229', 'synonyms': ['MRXJ', 'SMCX', 'MRX13', 'MRXSJ', 'XE169', 'MRXSCJ', 'JARID1C', 'DXS1272E'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'KDM5C', 'ensembl': 'ENSG00000126012', 'ncbi': 'HGNC:11114', 'swissprot': 'P41229', 'synonyms': ['MRXJ', 'SMCX', 'MRX13', 'MRXSJ', 'XE169', 'MRXSCJ', 'JARID1C', 'DXS1272E'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'UBA2', 'ensembl': 'ENSG00000126261', 'ncbi': 'HGNC:30661', 'swissprot': 'Q9UBT2', 'synonyms': ['ARX', 'SAE2', 'ACCES', 'HRIHFB2115'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('19', '', '')}\n{'name': 'UBA2', 'ensembl': 'ENSG00000126261', 'ncbi': 'HGNC:30661', 'swissprot': 'Q9UBT2', 'synonyms': ['ARX', 'SAE2', 'ACCES', 'HRIHFB2115'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('19', '', '')}\n{'name': 'UBA2', 'ensembl': 'ENSG00000126261', 'ncbi': 'HGNC:30661', 'swissprot': 'Q9UBT2', 'synonyms': ['ARX', 'SAE2', 'ACCES', 'HRIHFB2115'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('19', '', '')}\n{'name': 'PHF8', 'ensembl': 'ENSG00000172943', 'ncbi': 'HGNC:20672', 'swissprot': 'Q9UPP1', 'synonyms': ['KDM7B', 'JHDM1F', 'MRXSSD', 'ZNF422'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PHF8', 'ensembl': 'ENSG00000172943', 'ncbi': 'HGNC:20672', 'swissprot': 'Q9UPP1', 'synonyms': ['KDM7B', 'JHDM1F', 'MRXSSD', 'ZNF422'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'NLGN4X', 'ensembl': 'ENSG00000146938', 'ncbi': 'HGNC:14287', 'swissprot': 'Q8N0W4', 'synonyms': ['HLNX', 'HNL4X', 'NLGN4', 'ASPGX2', 'AUTSX2'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'NLGN4X', 'ensembl': 'ENSG00000146938', 'ncbi': 'HGNC:14287', 'swissprot': 'Q8N0W4', 'synonyms': ['HLNX', 'HNL4X', 'NLGN4', 'ASPGX2', 'AUTSX2'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'RPL15', 'ensembl': 'ENSG00000174748', 'ncbi': 'HGNC:10306', 'swissprot': 'P61313', 'synonyms': ['L15', 'EC45', 'eL15', 'DBA12', 'RPL10', 'RPLY10', 'RPYL10'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('3', '', '')}\n{'name': 'RPL15', 'ensembl': 'ENSG00000174748', 'ncbi': 'HGNC:10306', 'swissprot': 'P61313', 'synonyms': ['L15', 'EC45', 'eL15', 'DBA12', 'RPL10', 'RPLY10', 'RPYL10'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('3', '', '')}\n{'name': 'UPF3B', 'ensembl': 'ENSG00000125351', 'ncbi': 'HGNC:20439', 'swissprot': 'Q9BZI7', 'synonyms': ['MRX62', 'MRX82', 'UPF3X', 'HUPF3B', 'MRXS14', 'RENT3B', 'UPF3BP1', 'UPF3BP2', 'UPF3BP3', 'Upf3p-X'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'UPF3B', 'ensembl': 'ENSG00000125351', 'ncbi': 'HGNC:20439', 'swissprot': 'Q9BZI7', 'synonyms': ['MRX62', 'MRX82', 'UPF3X', 'HUPF3B', 'MRXS14', 'RENT3B', 'UPF3BP1', 'UPF3BP2', 'UPF3BP3', 'Upf3p-X'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SLC9A6', 'ensembl': 'ENSG00000198689', 'ncbi': 'HGNC:11079', 'swissprot': 'Q92581', 'synonyms': ['MRSA', 'NHE6', 'MRXSCH'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SLC9A6', 'ensembl': 'ENSG00000198689', 'ncbi': 'HGNC:11079', 'swissprot': 'Q92581', 'synonyms': ['MRSA', 'NHE6', 'MRXSCH'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'IL1RAPL1', 'ensembl': 'ENSG00000169306', 'ncbi': 'HGNC:5996', 'swissprot': 'Q9NZN1', 'synonyms': ['IL1R8', 'MRX10', 'MRX21', 'MRX34', 'OPHN4', 'IL1RAPL', 'TIGIRR-2', 'IL1RAPL-1', 'IL-1RAPL-1', 'IL-1-RAPL-1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'IL1RAPL1', 'ensembl': 'ENSG00000169306', 'ncbi': 'HGNC:5996', 'swissprot': 'Q9NZN1', 'synonyms': ['IL1R8', 'MRX10', 'MRX21', 'MRX34', 'OPHN4', 'IL1RAPL', 'TIGIRR-2', 'IL1RAPL-1', 'IL-1RAPL-1', 'IL-1-RAPL-1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'VSIG4', 'ensembl': 'ENSG00000155659', 'ncbi': 'HGNC:17032', 'swissprot': 'Q9Y279', 'synonyms': ['CRIg', 'Z39IG'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'VSIG4', 'ensembl': 'ENSG00000155659', 'ncbi': 'HGNC:17032', 'swissprot': 'Q9Y279', 'synonyms': ['CRIg', 'Z39IG'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'RAB39B', 'ensembl': 'ENSG00000155961', 'ncbi': 'HGNC:16499', 'swissprot': 'Q96DA2', 'synonyms': ['WSN', 'BGMR', 'WSMN', 'MRX72', 'XLID72'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'RAB39B', 'ensembl': 'ENSG00000155961', 'ncbi': 'HGNC:16499', 'swissprot': 'Q96DA2', 'synonyms': ['WSN', 'BGMR', 'WSMN', 'MRX72', 'XLID72'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'FGF13', 'ensembl': 'ENSG00000129682', 'ncbi': 'HGNC:3670', 'swissprot': 'Q92913', 'synonyms': ['FGF2', 'FHF2', 'DEE90', 'FHF-2', 'FGF-13', 'XLID110', 'LINC00889'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'FGF13', 'ensembl': 'ENSG00000129682', 'ncbi': 'HGNC:3670', 'swissprot': 'Q92913', 'synonyms': ['FGF2', 'FHF2', 'DEE90', 'FHF-2', 'FGF-13', 'XLID110', 'LINC00889'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'IQSEC2', 'ensembl': 'ENSG00000124313', 'ncbi': 'HGNC:29059', 'swissprot': 'Q5JU85', 'synonyms': ['MRX1', 'BRAG1', 'MRX18', 'MRX78', 'XLID1', 'IQ-ArfGEF'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'IQSEC2', 'ensembl': 'ENSG00000124313', 'ncbi': 'HGNC:29059', 'swissprot': 'Q5JU85', 'synonyms': ['MRX1', 'BRAG1', 'MRX18', 'MRX78', 'XLID1', 'IQ-ArfGEF'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'AFF2', 'ensembl': 'ENSG00000155966', 'ncbi': 'HGNC:3776', 'swissprot': 'P51816', 'synonyms': ['FMR2', 'MRX2', 'OX19', 'FMR2P', 'FRAXE', 'XLID109'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'AFF2', 'ensembl': 'ENSG00000155966', 'ncbi': 'HGNC:3776', 'swissprot': 'P51816', 'synonyms': ['FMR2', 'MRX2', 'OX19', 'FMR2P', 'FRAXE', 'XLID109'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'GABRA3', 'ensembl': 'ENSG00000011677', 'ncbi': 'HGNC:4077', 'swissprot': 'P34903', 'synonyms': ['EPILX2'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'GABRA3', 'ensembl': 'ENSG00000011677', 'ncbi': 'HGNC:4077', 'swissprot': 'P34903', 'synonyms': ['EPILX2'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'HNRNPH2', 'ensembl': 'ENSG00000126945', 'ncbi': 'HGNC:5042', 'swissprot': 'P55795', 'synonyms': ['FTP3', 'MRXSB', 'NRPH2', \"HNRPH'\", 'HNRPH2', \"hnRNPH'\"], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'HNRNPH2', 'ensembl': 'ENSG00000126945', 'ncbi': 'HGNC:5042', 'swissprot': 'P55795', 'synonyms': ['FTP3', 'MRXSB', 'NRPH2', \"HNRPH'\", 'HNRPH2', \"hnRNPH'\"], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'OPHN1', 'ensembl': 'ENSG00000079482', 'ncbi': 'HGNC:8148', 'swissprot': 'O60890', 'synonyms': ['OPN1', 'MRX60', 'MRXSBL', 'ARHGAP41'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'OPHN1', 'ensembl': 'ENSG00000079482', 'ncbi': 'HGNC:8148', 'swissprot': 'O60890', 'synonyms': ['OPN1', 'MRX60', 'MRXSBL', 'ARHGAP41'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TBX22', 'ensembl': 'ENSG00000122145', 'ncbi': 'HGNC:11600', 'swissprot': 'Q9Y458', 'synonyms': ['CPX', 'CLPA', 'TBXX', 'ABERS', 'dJ795G23.1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TBX22', 'ensembl': 'ENSG00000122145', 'ncbi': 'HGNC:11600', 'swissprot': 'Q9Y458', 'synonyms': ['CPX', 'CLPA', 'TBXX', 'ABERS', 'dJ795G23.1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TBX22', 'ensembl': 'ENSG00000122145', 'ncbi': 'HGNC:11600', 'swissprot': 'Q9Y458', 'synonyms': ['CPX', 'CLPA', 'TBXX', 'ABERS', 'dJ795G23.1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'NLGN3', 'ensembl': 'ENSG00000196338', 'ncbi': 'HGNC:14289', 'swissprot': 'Q9NZ94', 'synonyms': ['HNL3'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'NLGN3', 'ensembl': 'ENSG00000196338', 'ncbi': 'HGNC:14289', 'swissprot': 'Q9NZ94', 'synonyms': ['HNL3'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TSPAN7', 'ensembl': 'ENSG00000156298', 'ncbi': 'HGNC:11854', 'swissprot': 'P41732', 'synonyms': ['A15', 'MXS1', 'CD231', 'MRX58', 'CCG-B7', 'TM4SF2', 'XLID58', 'TALLA-1', 'TM4SF2b', 'DXS1692E'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TSPAN7', 'ensembl': 'ENSG00000156298', 'ncbi': 'HGNC:11854', 'swissprot': 'P41732', 'synonyms': ['A15', 'MXS1', 'CD231', 'MRX58', 'CCG-B7', 'TM4SF2', 'XLID58', 'TALLA-1', 'TM4SF2b', 'DXS1692E'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CLCN4', 'ensembl': 'ENSG00000073464', 'ncbi': 'HGNC:2022', 'swissprot': 'P51793', 'synonyms': ['CLC4', 'ClC-4', 'MRX15', 'MRX49', 'ClC-4A', 'MRXSRC'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CLCN4', 'ensembl': 'ENSG00000073464', 'ncbi': 'HGNC:2022', 'swissprot': 'P51793', 'synonyms': ['CLC4', 'ClC-4', 'MRX15', 'MRX49', 'ClC-4A', 'MRXSRC'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'GPC4', 'ensembl': 'ENSG00000076716', 'ncbi': 'HGNC:4452', 'swissprot': 'O75487', 'synonyms': ['KPTS', 'K-glypican'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'GPC4', 'ensembl': 'ENSG00000076716', 'ncbi': 'HGNC:4452', 'swissprot': 'O75487', 'synonyms': ['KPTS', 'K-glypican'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CNKSR2', 'ensembl': 'ENSG00000149970', 'ncbi': 'HGNC:19701', 'swissprot': 'Q8WXI2', 'synonyms': ['CNK2', 'KSR2', 'MAGUIN', 'MRXSHG'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CNKSR2', 'ensembl': 'ENSG00000149970', 'ncbi': 'HGNC:19701', 'swissprot': 'Q8WXI2', 'synonyms': ['CNK2', 'KSR2', 'MAGUIN', 'MRXSHG'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'ARHGEF9', 'ensembl': 'ENSG00000131089', 'ncbi': 'HGNC:14561', 'swissprot': 'O43307', 'synonyms': ['DEE8', 'PEM2', 'EIEE8', 'PEM-2', 'HPEM-2', 'COLLYBISTIN'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'ARHGEF9', 'ensembl': 'ENSG00000131089', 'ncbi': 'HGNC:14561', 'swissprot': 'O43307', 'synonyms': ['DEE8', 'PEM2', 'EIEE8', 'PEM-2', 'HPEM-2', 'COLLYBISTIN'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PCDH11X', 'ensembl': 'ENSG00000102290', 'ncbi': 'HGNC:8656', 'swissprot': 'Q9BZA7', 'synonyms': ['PCDHX', 'PCDH-X', 'PCDH-Y', 'PCDH11', 'PCDH22', 'PCDH11Y', 'PPP1R119'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PCDH11X', 'ensembl': 'ENSG00000102290', 'ncbi': 'HGNC:8656', 'swissprot': 'Q9BZA7', 'synonyms': ['PCDHX', 'PCDH-X', 'PCDH-Y', 'PCDH11', 'PCDH22', 'PCDH11Y', 'PPP1R119'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'RLIM', 'ensembl': 'ENSG00000131263', 'ncbi': 'HGNC:13429', 'swissprot': 'Q9NVW2', 'synonyms': ['MRX61', 'RNF12', 'TOKAS', 'NY-REN-43'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'RLIM', 'ensembl': 'ENSG00000131263', 'ncbi': 'HGNC:13429', 'swissprot': 'Q9NVW2', 'synonyms': ['MRX61', 'RNF12', 'TOKAS', 'NY-REN-43'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'BCORL1', 'ensembl': 'ENSG00000085185', 'ncbi': 'HGNC:25657', 'swissprot': 'Q5H9F3', 'synonyms': ['SHUVER', 'BCoR-L1', 'CXorf10'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'BCORL1', 'ensembl': 'ENSG00000085185', 'ncbi': 'HGNC:25657', 'swissprot': 'Q5H9F3', 'synonyms': ['SHUVER', 'BCoR-L1', 'CXorf10'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'WNK3', 'ensembl': 'ENSG00000196632', 'ncbi': 'HGNC:14543', 'swissprot': 'Q9BYP7', 'synonyms': ['PRS', 'MRXS2', 'PRKWNK3'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'WNK3', 'ensembl': 'ENSG00000196632', 'ncbi': 'HGNC:14543', 'swissprot': 'Q9BYP7', 'synonyms': ['PRS', 'MRXS2', 'PRKWNK3'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TBL1X', 'ensembl': 'ENSG00000101849', 'ncbi': 'HGNC:11585', 'swissprot': 'O60907', 'synonyms': ['EBI', 'TBL1', 'CHNG8', 'SMAP55'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TBL1X', 'ensembl': 'ENSG00000101849', 'ncbi': 'HGNC:11585', 'swissprot': 'O60907', 'synonyms': ['EBI', 'TBL1', 'CHNG8', 'SMAP55'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'AP1S2', 'ensembl': 'ENSG00000182287', 'ncbi': 'HGNC:560', 'swissprot': 'P56377', 'synonyms': ['PGS', 'DC22', 'MRX59', 'MRXS5', 'MRXSF', 'MRXS21', 'SIGMA1B'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'AP1S2', 'ensembl': 'ENSG00000182287', 'ncbi': 'HGNC:560', 'swissprot': 'P56377', 'synonyms': ['PGS', 'DC22', 'MRX59', 'MRXS5', 'MRXSF', 'MRXS21', 'SIGMA1B'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'DDX53', 'ensembl': 'ENSG00000184735', 'ncbi': 'HGNC:20083', 'swissprot': 'Q86TM3', 'synonyms': ['CAGE', 'CT26'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'DDX53', 'ensembl': 'ENSG00000184735', 'ncbi': 'HGNC:20083', 'swissprot': 'Q86TM3', 'synonyms': ['CAGE', 'CT26'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'GLRA2', 'ensembl': 'ENSG00000101958', 'ncbi': 'HGNC:4327', 'swissprot': 'P23416', 'synonyms': ['GLR', 'MRXSP'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'GLRA2', 'ensembl': 'ENSG00000101958', 'ncbi': 'HGNC:4327', 'swissprot': 'P23416', 'synonyms': ['GLR', 'MRXSP'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'NEXMIF', 'ensembl': 'ENSG00000050030', 'ncbi': 'HGNC:29433', 'swissprot': 'Q5QGS0', 'synonyms': ['XPN', 'MRX98', 'KIDLIA', 'XLID98', 'KIAA2022'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'NEXMIF', 'ensembl': 'ENSG00000050030', 'ncbi': 'HGNC:29433', 'swissprot': 'Q5QGS0', 'synonyms': ['XPN', 'MRX98', 'KIDLIA', 'XLID98', 'KIAA2022'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TMLHE', 'ensembl': 'ENSG00000185973', 'ncbi': 'HGNC:18308', 'swissprot': 'Q9NVH6', 'synonyms': ['TMLD', 'TMLH', 'BBOX2', 'AUTSX6', 'TMLHED', 'XAP130'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'TMLHE', 'ensembl': 'ENSG00000185973', 'ncbi': 'HGNC:18308', 'swissprot': 'Q9NVH6', 'synonyms': ['TMLD', 'TMLH', 'BBOX2', 'AUTSX6', 'TMLHED', 'XAP130'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PJA1', 'ensembl': 'ENSG00000181191', 'ncbi': 'HGNC:16648', 'swissprot': 'Q8NG27', 'synonyms': ['RNF70', 'PRAJA1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PJA1', 'ensembl': 'ENSG00000181191', 'ncbi': 'HGNC:16648', 'swissprot': 'Q8NG27', 'synonyms': ['RNF70', 'PRAJA1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'ZNF711', 'ensembl': 'ENSG00000147180', 'ncbi': 'HGNC:13128', 'swissprot': 'Q9Y462', 'synonyms': ['ZNF4', 'ZNF5', 'ZNF6', 'CMPX1', 'MRX65', 'MRX97', 'XLID97', 'Zfp711', 'dJ75N13.1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'ZNF711', 'ensembl': 'ENSG00000147180', 'ncbi': 'HGNC:13128', 'swissprot': 'Q9Y462', 'synonyms': ['ZNF4', 'ZNF5', 'ZNF6', 'CMPX1', 'MRX65', 'MRX97', 'XLID97', 'Zfp711', 'dJ75N13.1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'LAS1L', 'ensembl': 'ENSG00000001497', 'ncbi': 'HGNC:25726', 'swissprot': 'Q9Y4W2', 'synonyms': ['WTS', 'Las1', 'MRXSWTS', 'Las1-like', 'dJ475B7.2'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'LAS1L', 'ensembl': 'ENSG00000001497', 'ncbi': 'HGNC:25726', 'swissprot': 'Q9Y4W2', 'synonyms': ['WTS', 'Las1', 'MRXSWTS', 'Las1-like', 'dJ475B7.2'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'MSL3', 'ensembl': 'ENSG00000005302', 'ncbi': 'HGNC:7370', 'swissprot': 'Q8N5Y2', 'synonyms': ['MRSXBA', 'MRXS36', 'MRXSBA', 'MSL3L1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'MSL3', 'ensembl': 'ENSG00000005302', 'ncbi': 'HGNC:7370', 'swissprot': 'Q8N5Y2', 'synonyms': ['MRSXBA', 'MRXS36', 'MRXSBA', 'MSL3L1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PTCHD1', 'ensembl': 'ENSG00000165186', 'ncbi': 'HGNC:26392', 'swissprot': 'Q96NR3', 'synonyms': ['AUTSX4', 'DELXP22.11', 'CXDELp22.11'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PTCHD1', 'ensembl': 'ENSG00000165186', 'ncbi': 'HGNC:26392', 'swissprot': 'Q96NR3', 'synonyms': ['AUTSX4', 'DELXP22.11', 'CXDELp22.11'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'RHOXF1', 'ensembl': 'ENSG00000101883', 'ncbi': 'HGNC:29993', 'swissprot': 'Q8NHV9', 'synonyms': ['OTEX', 'PEPP1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'RHOXF1', 'ensembl': 'ENSG00000101883', 'ncbi': 'HGNC:29993', 'swissprot': 'Q8NHV9', 'synonyms': ['OTEX', 'PEPP1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'BRWD3', 'ensembl': 'ENSG00000165288', 'ncbi': 'HGNC:17342', 'swissprot': 'Q6RI45', 'synonyms': ['BRODL', 'MRX93', 'DCAF20', 'XLID93'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'BRWD3', 'ensembl': 'ENSG00000165288', 'ncbi': 'HGNC:17342', 'swissprot': 'Q6RI45', 'synonyms': ['BRODL', 'MRX93', 'DCAF20', 'XLID93'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'IL1RAPL2', 'ensembl': 'ENSG00000189108', 'ncbi': 'HGNC:5997', 'swissprot': 'Q9NP60', 'synonyms': ['IL1R9', 'IL-1R9', 'TIGIRR-1', 'IL1RAPL-2'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'IL1RAPL2', 'ensembl': 'ENSG00000189108', 'ncbi': 'HGNC:5997', 'swissprot': 'Q9NP60', 'synonyms': ['IL1R9', 'IL-1R9', 'TIGIRR-1', 'IL1RAPL-2'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PLXNA3', 'ensembl': 'ENSG00000130827', 'ncbi': 'HGNC:9101', 'swissprot': 'P51805', 'synonyms': ['6.3', 'PLXN3', 'PLXN4', 'XAP-6', 'HSSEXGENE'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PLXNA3', 'ensembl': 'ENSG00000130827', 'ncbi': 'HGNC:9101', 'swissprot': 'P51805', 'synonyms': ['6.3', 'PLXN3', 'PLXN4', 'XAP-6', 'HSSEXGENE'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CD99L2', 'ensembl': 'ENSG00000102181', 'ncbi': 'HGNC:18237', 'swissprot': 'Q8TCZ2', 'synonyms': ['CD99B', 'MIC2L1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'CD99L2', 'ensembl': 'ENSG00000102181', 'ncbi': 'HGNC:18237', 'swissprot': 'Q8TCZ2', 'synonyms': ['CD99B', 'MIC2L1'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SLC9A7', 'ensembl': 'ENSG00000065923', 'ncbi': 'HGNC:17123', 'swissprot': 'Q96T83', 'synonyms': ['NHE7', 'NHE-7', 'MRX108', 'SLC9A6'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SLC9A7', 'ensembl': 'ENSG00000065923', 'ncbi': 'HGNC:17123', 'swissprot': 'Q96T83', 'synonyms': ['NHE7', 'NHE-7', 'MRX108', 'SLC9A6'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SLC7A3', 'ensembl': 'ENSG00000165349', 'ncbi': 'HGNC:11061', 'swissprot': 'Q8WY07', 'synonyms': ['CAT3', 'ATRC3', 'CAT-3'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SLC7A3', 'ensembl': 'ENSG00000165349', 'ncbi': 'HGNC:11061', 'swissprot': 'Q8WY07', 'synonyms': ['CAT3', 'ATRC3', 'CAT-3'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SYAP1', 'ensembl': 'ENSG00000169895', 'ncbi': 'HGNC:16273', 'swissprot': 'Q96A49', 'synonyms': ['BSTA', 'PRO3113'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'SYAP1', 'ensembl': 'ENSG00000169895', 'ncbi': 'HGNC:16273', 'swissprot': 'Q96A49', 'synonyms': ['BSTA', 'PRO3113'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'FRMPD4', 'ensembl': 'ENSG00000169933', 'ncbi': 'HGNC:29007', 'swissprot': 'Q14CM0', 'synonyms': ['MRX104', 'PDZD10', 'PDZK10', 'XLID104'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'FRMPD4', 'ensembl': 'ENSG00000169933', 'ncbi': 'HGNC:29007', 'swissprot': 'Q14CM0', 'synonyms': ['MRX104', 'PDZD10', 'PDZK10', 'XLID104'], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'PTCHD1-AS', 'ensembl': '', 'ncbi': 'HGNC:37703', 'swissprot': '', 'synonyms': ['PHEX-AS1', 'DDX53-AS1', 'PTCHD1AS1', 'PTCHD1AS2'], '_ncbi': '', 'type': 'ncRNA', 'coord': ('X', '', '')}\n{'name': 'PTCHD1-AS', 'ensembl': '', 'ncbi': 'HGNC:37703', 'swissprot': '', 'synonyms': ['PHEX-AS1', 'DDX53-AS1', 'PTCHD1AS1', 'PTCHD1AS2'], '_ncbi': '', 'type': 'ncRNA', 'coord': ('X', '', '')}\n{'name': 'PTCHD1-AS', 'ensembl': '', 'ncbi': 'HGNC:37703', 'swissprot': '', 'synonyms': ['PHEX-AS1', 'DDX53-AS1', 'PTCHD1AS1', 'PTCHD1AS2'], '_ncbi': '', 'type': 'ncRNA', 'coord': ('X', '', '')}\n{'name': 'FAM47A', 'ensembl': 'ENSG00000185448', 'ncbi': 'HGNC:29962', 'swissprot': 'Q5JRC9', 'synonyms': [''], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}\n{'name': 'FAM47A', 'ensembl': 'ENSG00000185448', 'ncbi': 'HGNC:29962', 'swissprot': 'Q5JRC9', 'synonyms': [''], '_ncbi': '', 'type': 'PROTEIN_CODING', 'coord': ('X', '', '')}"
  },
  {
    "objectID": "pages/gene_plots.html",
    "href": "pages/gene_plots.html",
    "title": "Gene context",
    "section": "",
    "text": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')\n\n# %config InlineBackend.figure_format = 'retina'\n%config InlineBackend.figure_format = 'svg'",
    "crumbs": [
      "Visualization",
      "Gene context"
    ]
  },
  {
    "objectID": "pages/gene_plots.html#plot-data-over-gene-annotation",
    "href": "pages/gene_plots.html#plot-data-over-gene-annotation",
    "title": "Gene context",
    "section": "Plot data over gene annotation",
    "text": "Plot data over gene annotation\n\n# x = np.linspace(1, 1520300000, 100000)\n# y = np.random.random(100000)\n# dummy manhattan data\nx = np.linspace(76500000, 77500000, 10000)\nrng = np.random.default_rng()\ny = rng.exponential(scale=1, size=x.size)\n\nStandard plot:\n\nfrom geneinfo.plot import gene_plot\nax = gene_plot('chrX', 76500000, 77500000, 'hg38')\nax.scatter(x, y, s=2)\nplt.tight_layout()\n\n\n\n\n\n\n\n\nSame on older hg19 assembly:\n\nax = gene_plot('chrX', 76500000, 77500000, assembly='hg19')\nax.scatter(x, y, s=2)\nplt.tight_layout()\n\n\n\n\n\n\n\n\nTwo subplots for data:\n\nax1, ax2 = gene_plot('chrX', 76500000, 77500000, assembly='hg38', return_axes=2)\nax1.scatter(x, y, s=2)\nax2.scatter(x, y, s=2)\nplt.tight_layout()\n\n\n\n\n\n\n\n\nThree subplots for data and adjusted aspect ratio:\n\nax1, ax2, ax3 = gene_plot('chrX', 76500000, 77500000, assembly='hg38', return_axes=3, aspect=0.5)\nax1.scatter(x, y, s=2)\nax2.scatter(x, y, s=2)\nax3.scatter(x, y, s=2)\nplt.tight_layout()\n\n\n\n\n\n\n\n\nHighlight a list of genes:\n\nax = gene_plot('chrX', 76500000, 77500000, 'hg19', highlight=['ATRX', 'ATP7A'])\nax.scatter(x, y, s=2)\nsns.despine(ax=ax) # make it look nicer\nplt.tight_layout()\n\n\n\n\n\n\n\n\nCombinatorial hightlighting:\nCombining text weight, style, color and bbox:\n\nhighlight = defaultdict(dict)\nfor gene in ['ATRX', 'COX7B', 'PGK1']:\n    highlight[gene].update(dict(weight='bold'))\nfor gene in ['MAGT1']:\n    highlight[gene].update(dict(style='italic'))\nfor gene in ['ATP7A', 'ATRX']:\n    highlight[gene].update(dict(color='red'))\nfor gene in ['PGK1', 'ATRX']:\n    highlight[gene].update(dict(bbox=dict(edgecolor='black', facecolor='none', linewidth=0.2)))\n\n\nax = gene_plot('chrX', 76500000, 77500000, 'hg19', highlight=highlight)\nax.scatter(x, y, s=2)\nsns.despine(ax=ax) # make it look nicer\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\nimport geneinfo.utils as utils\ngene_lists = utils.GeneListCollection('google_sheet.csv')\n\n\nhighlight = defaultdict(dict)\nfor gene in gene_lists.get('xi_any_evidence'):\n    highlight[gene].update(dict(weight='bold'))\nfor gene in gene_lists.get('ech75_regions'):\n    highlight[gene].update(dict(style='italic'))\nfor gene in gene_lists.get('sfari_all_conf') + gene_lists.get('intelect_disabil'):\n    highlight[gene].update(dict(color='red'))\nfor gene in (gene_lists.get('gametologs') + gene_lists.get('mult_copy') + gene_lists.get('xi_escape') \n             + gene_lists.get('cDEG') + gene_lists.get('nDEG') ):\n    highlight[gene].update(dict(bbox=dict(edgecolor='black', facecolor='none', linewidth=0.2)))\n\n\nax = gene_plot('chrX', 76500000, 77500000, 'hg19', highlight=highlight)\n\nax.scatter(x, y, s=2)\nsns.despine(ax=ax) # make it look nicer\nplt.tight_layout()\n\n\n\n\n\n\n\n\nLarger with colors:\n\nax = gene_plot('chrX', 76500000, 77500000, 'hg19', highlight=highlight, figsize=(7, 4))\n\nax.scatter(x, y, s=2, c=y, cmap='viridis_r')\nsns.despine(ax=ax) # make it look nicer\nplt.tight_layout()\n\n\n\n\n\n\n\n\nOther features:\n\nimport geneinfo.utils\ngeneinfo.utils.clear_cache()\n\n\nax = gene_plot('chrX', 76500000, 77500000, assembly='hg19',\n                  figsize=(7, 4),          # larger figure\n                  exact_exons=False,        # allow exons to be wide enough to be visible on large plots\n                  hard_limits=True,          # truncate genes that overlap the borders of the specified range\n                 )\n\nax.scatter(x, y, s=2)\nsns.despine(ax=ax) # make it look nicer\nplt.tight_layout()",
    "crumbs": [
      "Visualization",
      "Gene context"
    ]
  },
  {
    "objectID": "pages/string_nets.html",
    "href": "pages/string_nets.html",
    "title": "String networks",
    "section": "",
    "text": "import geneinfo.string as gst",
    "crumbs": [
      "Visualization",
      "String networks"
    ]
  },
  {
    "objectID": "pages/string_nets.html#show-string-interaction-network",
    "href": "pages/string_nets.html#show-string-interaction-network",
    "title": "String networks",
    "section": "Show STRING interaction network",
    "text": "Show STRING interaction network\n\ngst.show_string_network(['ATRX', 'TP53', 'RAD51'], nodes=10)",
    "crumbs": [
      "Visualization",
      "String networks"
    ]
  }
]